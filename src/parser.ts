/* AutoGenerated Code, changes may be overwritten
*/

import { joinString, filterOutContinueLines } from "./util";

type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    start = "start",
    content_1 = "content_1",
    content_2 = "content_2",
    content_3 = "content_3",
    content_4 = "content_4",
    content_5 = "content_5",
    content_6 = "content_6",
    content_7 = "content_7",
    newLine = "newLine",
    newLineBody_1 = "newLineBody_1",
    newLineBody_2 = "newLineBody_2",
    newLineBody_3 = "newLineBody_3",
    endOfLine_1 = "endOfLine_1",
    endOfLine_2 = "endOfLine_2",
    space = "space",
    someSpaces = "someSpaces",
    commentLong = "commentLong",
    commentLongBody_1 = "commentLongBody_1",
    commentLongBody_2 = "commentLongBody_2",
    commentLine = "commentLine",
    continueLine = "continueLine",
    continueLineOrCommentLong_1 = "continueLineOrCommentLong_1",
    continueLineOrCommentLong_2 = "continueLineOrCommentLong_2",
    spaceOrContinueLineOrCommentLong_1 = "spaceOrContinueLineOrCommentLong_1",
    spaceOrContinueLineOrCommentLong_2 = "spaceOrContinueLineOrCommentLong_2",
    spaceOrContinueLineOrCommentLong_3 = "spaceOrContinueLineOrCommentLong_3",
    identiferHeadCharacter = "identiferHeadCharacter",
    identiferBodySentence_1 = "identiferBodySentence_1",
    identiferBodySentence_2 = "identiferBodySentence_2",
    identiferBodyCharacter = "identiferBodyCharacter",
    statementSeparator = "statementSeparator",
    statementSeparatorBody_1 = "statementSeparatorBody_1",
    statementSeparatorBody_2 = "statementSeparatorBody_2",
    statementSeparatorBody_3 = "statementSeparatorBody_3",
    statementTerminator_1 = "statementTerminator_1",
    statementTerminator_2 = "statementTerminator_2",
    statementTerminatorBody = "statementTerminatorBody",
    functionBlock = "functionBlock",
    functionBlock_$0_1 = "functionBlock_$0_1",
    functionBlock_$0_2 = "functionBlock_$0_2",
    functionBlock_$0_3 = "functionBlock_$0_3",
    functionBlock_$0_4 = "functionBlock_$0_4",
    functionBlock_$0_5 = "functionBlock_$0_5",
    functionBlock_$1_1 = "functionBlock_$1_1",
    functionBlock_$1_2 = "functionBlock_$1_2",
    functionBlock_$1_3 = "functionBlock_$1_3",
    functionBlock_$1_4 = "functionBlock_$1_4",
    functionBlock_$1_5 = "functionBlock_$1_5",
    functionBlock_$2_1 = "functionBlock_$2_1",
    functionBlock_$2_2 = "functionBlock_$2_2",
    functionBlock_$3_1 = "functionBlock_$3_1",
    functionBlock_$3_2 = "functionBlock_$3_2",
    functionBlockName = "functionBlockName",
    functionBlockSelector = "functionBlockSelector",
    selector = "selector",
    selectorPrefix = "selectorPrefix",
    selectorPrefixName = "selectorPrefixName",
    selectorMain = "selectorMain",
    selectorMainName_1 = "selectorMainName_1",
    selectorMainName_2 = "selectorMainName_2",
    selectorMainName_3 = "selectorMainName_3",
    selectorMainName_4 = "selectorMainName_4",
    selectorMainName_5 = "selectorMainName_5",
    selectorMainName_6 = "selectorMainName_6",
    selectorMainName_7 = "selectorMainName_7",
    selectorSuffix = "selectorSuffix",
    selectorSuffixName = "selectorSuffixName",
    block = "block",
    block_$0_1 = "block_$0_1",
    block_$0_2 = "block_$0_2",
    block_$0_3 = "block_$0_3",
    block_$0_4 = "block_$0_4",
    block_$0_5 = "block_$0_5",
    block_$1_1 = "block_$1_1",
    block_$1_2 = "block_$1_2",
    block_$1_3 = "block_$1_3",
    block_$2_1 = "block_$2_1",
    block_$2_2 = "block_$2_2",
    block_$2_3 = "block_$2_3",
    block_$2_4 = "block_$2_4",
    block_$2_5 = "block_$2_5",
    blockSelector = "blockSelector",
    blockInner_1 = "blockInner_1",
    blockInner_2 = "blockInner_2",
    blockInner_3 = "blockInner_3",
    blockInner_4 = "blockInner_4",
    blockInner_5 = "blockInner_5",
    blockInner_6 = "blockInner_6",
    blockInner_7 = "blockInner_7",
    blockInner_8 = "blockInner_8",
    blockInnerFlow = "blockInnerFlow",
    blockInnerFlowKind_1 = "blockInnerFlowKind_1",
    blockInnerFlowKind_2 = "blockInnerFlowKind_2",
    blockInnerFlowKind_3 = "blockInnerFlowKind_3",
    blockInnerFlowKind_4 = "blockInnerFlowKind_4",
    blockInnerFlowKind_5 = "blockInnerFlowKind_5",
    blockInnerFlowKind_6 = "blockInnerFlowKind_6",
    blockInnerFlowKind_7 = "blockInnerFlowKind_7",
    blockInnerSentence = "blockInnerSentence",
    blockInnerSentence_$0_1 = "blockInnerSentence_$0_1",
    blockInnerSentence_$0_2 = "blockInnerSentence_$0_2",
    blockInnerSentence_$0_3 = "blockInnerSentence_$0_3",
    blockInnerSentenceKind_1 = "blockInnerSentenceKind_1",
    blockInnerSentenceKind_2 = "blockInnerSentenceKind_2",
    blockInnerSentenceKind_3 = "blockInnerSentenceKind_3",
    blockInnerSentenceKind_4 = "blockInnerSentenceKind_4",
    blockInnerSentenceKind_5 = "blockInnerSentenceKind_5",
    blockInnerSentenceKind_6 = "blockInnerSentenceKind_6",
    blockInnerSentenceKind_7 = "blockInnerSentenceKind_7",
    flowIf = "flowIf",
    flowIf_$0_1 = "flowIf_$0_1",
    flowIf_$0_2 = "flowIf_$0_2",
    flowIfName = "flowIfName",
    flowElseif = "flowElseif",
    flowElseif_$0_1 = "flowElseif_$0_1",
    flowElseif_$0_2 = "flowElseif_$0_2",
    flowElseifName = "flowElseifName",
    flowElse = "flowElse",
    flowElse_$0_1 = "flowElse_$0_1",
    flowElse_$0_2 = "flowElse_$0_2",
    flowElseName = "flowElseName",
    flowIfBlock = "flowIfBlock",
    flowIfBlock_$0_1 = "flowIfBlock_$0_1",
    flowIfBlock_$0_2 = "flowIfBlock_$0_2",
    flowIfBlock_$1_1 = "flowIfBlock_$1_1",
    flowIfBlock_$1_2 = "flowIfBlock_$1_2",
    flowCase = "flowCase",
    flowCase_$0_1 = "flowCase_$0_1",
    flowCase_$0_2 = "flowCase_$0_2",
    flowCase_$0_3 = "flowCase_$0_3",
    flowCase_$0_4 = "flowCase_$0_4",
    flowCase_$0_5 = "flowCase_$0_5",
    flowCase_$1_1 = "flowCase_$1_1",
    flowCase_$1_2 = "flowCase_$1_2",
    flowCase_$1_3 = "flowCase_$1_3",
    flowCase_$1_4 = "flowCase_$1_4",
    flowCase_$1_5 = "flowCase_$1_5",
    flowCaseName = "flowCaseName",
    flowWhen = "flowWhen",
    flowWhenName = "flowWhenName",
    flowWhenConditions = "flowWhenConditions",
    flowWhenConditions_$0 = "flowWhenConditions_$0",
    flowWhenCondition_1 = "flowWhenCondition_1",
    flowWhenCondition_2 = "flowWhenCondition_2",
    flowWhenConditionLiteral = "flowWhenConditionLiteral",
    flowWhenConditionLiteral_$0_1 = "flowWhenConditionLiteral_$0_1",
    flowWhenConditionLiteral_$0_2 = "flowWhenConditionLiteral_$0_2",
    flowWhenConditionLiteral_$0_3 = "flowWhenConditionLiteral_$0_3",
    flowWhenConditionLiteral_$1_1 = "flowWhenConditionLiteral_$1_1",
    flowWhenConditionLiteral_$1_2 = "flowWhenConditionLiteral_$1_2",
    flowWhenConditionLiteral_$2_1 = "flowWhenConditionLiteral_$2_1",
    flowWhenConditionLiteral_$2_2 = "flowWhenConditionLiteral_$2_2",
    flowWhenConditionLiteral_$2_3 = "flowWhenConditionLiteral_$2_3",
    flowWhenConditionRange = "flowWhenConditionRange",
    flowWhenConditionRange_$0_1 = "flowWhenConditionRange_$0_1",
    flowWhenConditionRange_$0_2 = "flowWhenConditionRange_$0_2",
    flowWhenConditionRange_$0_3 = "flowWhenConditionRange_$0_3",
    flowWhenConditionRange_$1_1 = "flowWhenConditionRange_$1_1",
    flowWhenConditionRange_$1_2 = "flowWhenConditionRange_$1_2",
    flowWhenConditionRange_$2_1 = "flowWhenConditionRange_$2_1",
    flowWhenConditionRange_$2_2 = "flowWhenConditionRange_$2_2",
    flowWhenConditionRange_$2_3 = "flowWhenConditionRange_$2_3",
    flowWhenConditionRange_$3_1 = "flowWhenConditionRange_$3_1",
    flowWhenConditionRange_$3_2 = "flowWhenConditionRange_$3_2",
    flowWhenConditionRange_$3_3 = "flowWhenConditionRange_$3_3",
    flowWhenConditionRange_$4_1 = "flowWhenConditionRange_$4_1",
    flowWhenConditionRange_$4_2 = "flowWhenConditionRange_$4_2",
    flowWhenConditionRange_$5_1 = "flowWhenConditionRange_$5_1",
    flowWhenConditionRange_$5_2 = "flowWhenConditionRange_$5_2",
    flowWhenConditionRange_$5_3 = "flowWhenConditionRange_$5_3",
    flowOthers = "flowOthers",
    flowOthers_$0_1 = "flowOthers_$0_1",
    flowOthers_$0_2 = "flowOthers_$0_2",
    flowOthers_$0_3 = "flowOthers_$0_3",
    flowOthersName = "flowOthersName",
    flowSwitch = "flowSwitch",
    flowSwitchName = "flowSwitchName",
    flowWhile = "flowWhile",
    flowWhileName = "flowWhileName",
    flowFor = "flowFor",
    flowForName = "flowForName",
    flowForeach = "flowForeach",
    flowForeach_$0_1 = "flowForeach_$0_1",
    flowForeach_$0_2 = "flowForeach_$0_2",
    flowForeach_$0_3 = "flowForeach_$0_3",
    flowForeachName = "flowForeachName",
    blockInnerBreak = "blockInnerBreak",
    blockInnerBreakName = "blockInnerBreakName",
    blockInnerContinue = "blockInnerContinue",
    blockInnerContinueName = "blockInnerContinueName",
    blockInnerReturn = "blockInnerReturn",
    blockInnerReturnName = "blockInnerReturnName",
    blockInnerParallel = "blockInnerParallel",
    blockInnerParallelName = "blockInnerParallelName",
    blockInnerVoid = "blockInnerVoid",
    blockInnerVoidName = "blockInnerVoidName",
    outputSettlement = "outputSettlement",
    expr = "expr",
    expr_$0_1 = "expr_$0_1",
    expr_$0_2 = "expr_$0_2",
    expr_$0_3 = "expr_$0_3",
    expr_$1_1 = "expr_$1_1",
    expr_$1_2 = "expr_$1_2",
    expr_$1_3 = "expr_$1_3",
    exprInner_1 = "exprInner_1",
    exprInner_2 = "exprInner_2",
    exprInner_3 = "exprInner_3",
    exprInner_4 = "exprInner_4",
    exprInner_5 = "exprInner_5",
    exprInner_6 = "exprInner_6",
    exprInner_7 = "exprInner_7",
    exprInner_8 = "exprInner_8",
    exprInner_9 = "exprInner_9",
    exprInner_10 = "exprInner_10",
    exprInner_11 = "exprInner_11",
    exprInner_12 = "exprInner_12",
    exprInner_13 = "exprInner_13",
    exprInner_14 = "exprInner_14",
    exprInner_15 = "exprInner_15",
    exprInner_16 = "exprInner_16",
    exprInner_17 = "exprInner_17",
    exprInner_18 = "exprInner_18",
    exprInner_19 = "exprInner_19",
    parenthesesOperation = "parenthesesOperation",
    parenthesesOperation_$0_1 = "parenthesesOperation_$0_1",
    parenthesesOperation_$0_2 = "parenthesesOperation_$0_2",
    parenthesesOperation_$0_3 = "parenthesesOperation_$0_3",
    parenthesesOperation_$1_1 = "parenthesesOperation_$1_1",
    parenthesesOperation_$1_2 = "parenthesesOperation_$1_2",
    parenthesesOperation_$1_3 = "parenthesesOperation_$1_3",
    bracketsOperation = "bracketsOperation",
    bracketsOperation_$0_1 = "bracketsOperation_$0_1",
    bracketsOperation_$0_2 = "bracketsOperation_$0_2",
    bracketsOperation_$0_3 = "bracketsOperation_$0_3",
    bracketsOperation_$1_1 = "bracketsOperation_$1_1",
    bracketsOperation_$1_2 = "bracketsOperation_$1_2",
    bracketsOperation_$1_3 = "bracketsOperation_$1_3",
    bracketsOperationOption = "bracketsOperationOption",
    bracketsOperationOption_$0_1 = "bracketsOperationOption_$0_1",
    bracketsOperationOption_$0_2 = "bracketsOperationOption_$0_2",
    bracketsOperationOption_$0_3 = "bracketsOperationOption_$0_3",
    bracketsOperationOption_$1_1 = "bracketsOperationOption_$1_1",
    bracketsOperationOption_$1_2 = "bracketsOperationOption_$1_2",
    bracketsOperationOption_$1_3 = "bracketsOperationOption_$1_3",
    exclamationOperation = "exclamationOperation",
    exclamationOperation_$0_1 = "exclamationOperation_$0_1",
    exclamationOperation_$0_2 = "exclamationOperation_$0_2",
    exclamationOperation_$0_3 = "exclamationOperation_$0_3",
    incrementOrDecrementOperation = "incrementOrDecrementOperation",
    incrementOrDecrementOperation_$0_1 = "incrementOrDecrementOperation_$0_1",
    incrementOrDecrementOperation_$0_2 = "incrementOrDecrementOperation_$0_2",
    incrementOrDecrementOperation_$0_3 = "incrementOrDecrementOperation_$0_3",
    incrementOrDecrementOperator_1 = "incrementOrDecrementOperator_1",
    incrementOrDecrementOperator_2 = "incrementOrDecrementOperator_2",
    incrementOrDecrementOperator_$0 = "incrementOrDecrementOperator_$0",
    incrementOrDecrementOperator_$0_$0_1 = "incrementOrDecrementOperator_$0_$0_1",
    incrementOrDecrementOperator_$0_$0_2 = "incrementOrDecrementOperator_$0_$0_2",
    incrementOrDecrementOperator_$0_$1_1 = "incrementOrDecrementOperator_$0_$1_1",
    incrementOrDecrementOperator_$0_$1_2 = "incrementOrDecrementOperator_$0_$1_2",
    incrementOrDecrementOperator_$1 = "incrementOrDecrementOperator_$1",
    incrementOrDecrementOperator_$1_$0_1 = "incrementOrDecrementOperator_$1_$0_1",
    incrementOrDecrementOperator_$1_$0_2 = "incrementOrDecrementOperator_$1_$0_2",
    incrementOrDecrementOperator_$1_$1_1 = "incrementOrDecrementOperator_$1_$1_1",
    incrementOrDecrementOperator_$1_$1_2 = "incrementOrDecrementOperator_$1_$1_2",
    multiplicationOrDivisionOperation = "multiplicationOrDivisionOperation",
    multiplicationOrDivisionOperation_$0_1 = "multiplicationOrDivisionOperation_$0_1",
    multiplicationOrDivisionOperation_$0_2 = "multiplicationOrDivisionOperation_$0_2",
    multiplicationOrDivisionOperation_$0_3 = "multiplicationOrDivisionOperation_$0_3",
    multiplicationOrDivisionOperation_$1_1 = "multiplicationOrDivisionOperation_$1_1",
    multiplicationOrDivisionOperation_$1_2 = "multiplicationOrDivisionOperation_$1_2",
    multiplicationOrDivisionOperation_$1_3 = "multiplicationOrDivisionOperation_$1_3",
    multiplicationOrDivisionOperator_1 = "multiplicationOrDivisionOperator_1",
    multiplicationOrDivisionOperator_2 = "multiplicationOrDivisionOperator_2",
    multiplicationOrDivisionOperator_3 = "multiplicationOrDivisionOperator_3",
    multiplicationOrDivisionOperator_$0 = "multiplicationOrDivisionOperator_$0",
    multiplicationOrDivisionOperator_$0_$0_1 = "multiplicationOrDivisionOperator_$0_$0_1",
    multiplicationOrDivisionOperator_$0_$0_2 = "multiplicationOrDivisionOperator_$0_$0_2",
    multiplicationOrDivisionOperator_$1 = "multiplicationOrDivisionOperator_$1",
    multiplicationOrDivisionOperator_$1_$0_1 = "multiplicationOrDivisionOperator_$1_$0_1",
    multiplicationOrDivisionOperator_$1_$0_2 = "multiplicationOrDivisionOperator_$1_$0_2",
    multiplicationOrDivisionOperator_$2 = "multiplicationOrDivisionOperator_$2",
    multiplicationOrDivisionOperator_$2_$0_1 = "multiplicationOrDivisionOperator_$2_$0_1",
    multiplicationOrDivisionOperator_$2_$0_2 = "multiplicationOrDivisionOperator_$2_$0_2",
    additionOrSubtractionOperation = "additionOrSubtractionOperation",
    additionOrSubtractionOperation_$0_1 = "additionOrSubtractionOperation_$0_1",
    additionOrSubtractionOperation_$0_2 = "additionOrSubtractionOperation_$0_2",
    additionOrSubtractionOperation_$0_3 = "additionOrSubtractionOperation_$0_3",
    additionOrSubtractionOperation_$1_1 = "additionOrSubtractionOperation_$1_1",
    additionOrSubtractionOperation_$1_2 = "additionOrSubtractionOperation_$1_2",
    additionOrSubtractionOperation_$1_3 = "additionOrSubtractionOperation_$1_3",
    additionOrSubtractionOperator_1 = "additionOrSubtractionOperator_1",
    additionOrSubtractionOperator_2 = "additionOrSubtractionOperator_2",
    additionOrSubtractionOperator_$0 = "additionOrSubtractionOperator_$0",
    additionOrSubtractionOperator_$0_$0_1 = "additionOrSubtractionOperator_$0_$0_1",
    additionOrSubtractionOperator_$0_$0_2 = "additionOrSubtractionOperator_$0_$0_2",
    additionOrSubtractionOperator_$1 = "additionOrSubtractionOperator_$1",
    additionOrSubtractionOperator_$1_$0_1 = "additionOrSubtractionOperator_$1_$0_1",
    additionOrSubtractionOperator_$1_$0_2 = "additionOrSubtractionOperator_$1_$0_2",
    feedbackOperation = "feedbackOperation",
    feedbackOperation_$0_1 = "feedbackOperation_$0_1",
    feedbackOperation_$0_2 = "feedbackOperation_$0_2",
    feedbackOperation_$0_3 = "feedbackOperation_$0_3",
    comparisonOperation = "comparisonOperation",
    comparisonOperation_$0_1 = "comparisonOperation_$0_1",
    comparisonOperation_$0_2 = "comparisonOperation_$0_2",
    comparisonOperation_$0_3 = "comparisonOperation_$0_3",
    comparisonOperation_$1_1 = "comparisonOperation_$1_1",
    comparisonOperation_$1_2 = "comparisonOperation_$1_2",
    comparisonOperation_$1_3 = "comparisonOperation_$1_3",
    comparisonOperator_1 = "comparisonOperator_1",
    comparisonOperator_2 = "comparisonOperator_2",
    comparisonOperator_3 = "comparisonOperator_3",
    comparisonOperator_4 = "comparisonOperator_4",
    comparisonOperator_5 = "comparisonOperator_5",
    comparisonOperator_6 = "comparisonOperator_6",
    comparisonOperator_7 = "comparisonOperator_7",
    comparisonOperator_8 = "comparisonOperator_8",
    comparisonOperator_$0 = "comparisonOperator_$0",
    comparisonOperator_$0_$0_1 = "comparisonOperator_$0_$0_1",
    comparisonOperator_$0_$0_2 = "comparisonOperator_$0_$0_2",
    comparisonOperator_$0_$1_1 = "comparisonOperator_$0_$1_1",
    comparisonOperator_$0_$1_2 = "comparisonOperator_$0_$1_2",
    comparisonOperator_$1 = "comparisonOperator_$1",
    comparisonOperator_$1_$0_1 = "comparisonOperator_$1_$0_1",
    comparisonOperator_$1_$0_2 = "comparisonOperator_$1_$0_2",
    comparisonOperator_$1_$1_1 = "comparisonOperator_$1_$1_1",
    comparisonOperator_$1_$1_2 = "comparisonOperator_$1_$1_2",
    comparisonOperator_$2 = "comparisonOperator_$2",
    comparisonOperator_$2_$0_1 = "comparisonOperator_$2_$0_1",
    comparisonOperator_$2_$0_2 = "comparisonOperator_$2_$0_2",
    comparisonOperator_$2_$1_1 = "comparisonOperator_$2_$1_1",
    comparisonOperator_$2_$1_2 = "comparisonOperator_$2_$1_2",
    comparisonOperator_$3 = "comparisonOperator_$3",
    comparisonOperator_$3_$0_1 = "comparisonOperator_$3_$0_1",
    comparisonOperator_$3_$0_2 = "comparisonOperator_$3_$0_2",
    comparisonOperator_$3_$1_1 = "comparisonOperator_$3_$1_1",
    comparisonOperator_$3_$1_2 = "comparisonOperator_$3_$1_2",
    comparisonOperator_$4 = "comparisonOperator_$4",
    comparisonOperator_$4_$0_1 = "comparisonOperator_$4_$0_1",
    comparisonOperator_$4_$0_2 = "comparisonOperator_$4_$0_2",
    comparisonOperator_$5 = "comparisonOperator_$5",
    comparisonOperator_$5_$0_1 = "comparisonOperator_$5_$0_1",
    comparisonOperator_$5_$0_2 = "comparisonOperator_$5_$0_2",
    comparisonOperator_$6 = "comparisonOperator_$6",
    comparisonOperator_$6_$0_1 = "comparisonOperator_$6_$0_1",
    comparisonOperator_$6_$0_2 = "comparisonOperator_$6_$0_2",
    comparisonOperator_$6_$1_1 = "comparisonOperator_$6_$1_1",
    comparisonOperator_$6_$1_2 = "comparisonOperator_$6_$1_2",
    comparisonOperator_$6_$2_1 = "comparisonOperator_$6_$2_1",
    comparisonOperator_$6_$2_2 = "comparisonOperator_$6_$2_2",
    comparisonOperator_$6_$3_1 = "comparisonOperator_$6_$3_1",
    comparisonOperator_$6_$3_2 = "comparisonOperator_$6_$3_2",
    comparisonOperator_$7 = "comparisonOperator_$7",
    comparisonOperator_$7_$0_1 = "comparisonOperator_$7_$0_1",
    comparisonOperator_$7_$0_2 = "comparisonOperator_$7_$0_2",
    comparisonOperator_$7_$1_1 = "comparisonOperator_$7_$1_1",
    comparisonOperator_$7_$1_2 = "comparisonOperator_$7_$1_2",
    comparisonOperator_$7_$2_1 = "comparisonOperator_$7_$2_1",
    comparisonOperator_$7_$2_2 = "comparisonOperator_$7_$2_2",
    comparisonOperator_$7_$3_1 = "comparisonOperator_$7_$3_1",
    comparisonOperator_$7_$3_2 = "comparisonOperator_$7_$3_2",
    comparisonOperator_$7_$4_1 = "comparisonOperator_$7_$4_1",
    comparisonOperator_$7_$4_2 = "comparisonOperator_$7_$4_2",
    logicalConjunction = "logicalConjunction",
    logicalConjunction_$0_1 = "logicalConjunction_$0_1",
    logicalConjunction_$0_2 = "logicalConjunction_$0_2",
    logicalConjunction_$0_3 = "logicalConjunction_$0_3",
    logicalConjunction_$1_1 = "logicalConjunction_$1_1",
    logicalConjunction_$1_2 = "logicalConjunction_$1_2",
    logicalConjunction_$1_3 = "logicalConjunction_$1_3",
    logicalConjunctionOperator = "logicalConjunctionOperator",
    logicalConjunctionOperator_$0 = "logicalConjunctionOperator_$0",
    logicalConjunctionOperator_$0_$0_1 = "logicalConjunctionOperator_$0_$0_1",
    logicalConjunctionOperator_$0_$0_2 = "logicalConjunctionOperator_$0_$0_2",
    logicalConjunctionOperator_$0_$1_1 = "logicalConjunctionOperator_$0_$1_1",
    logicalConjunctionOperator_$0_$1_2 = "logicalConjunctionOperator_$0_$1_2",
    logicalDisjunction = "logicalDisjunction",
    logicalDisjunction_$0_1 = "logicalDisjunction_$0_1",
    logicalDisjunction_$0_2 = "logicalDisjunction_$0_2",
    logicalDisjunction_$0_3 = "logicalDisjunction_$0_3",
    logicalDisjunction_$1_1 = "logicalDisjunction_$1_1",
    logicalDisjunction_$1_2 = "logicalDisjunction_$1_2",
    logicalDisjunction_$1_3 = "logicalDisjunction_$1_3",
    logicalDisjunctionOperator = "logicalDisjunctionOperator",
    logicalDisjunctionOperator_$0 = "logicalDisjunctionOperator_$0",
    logicalDisjunctionOperator_$0_$0_1 = "logicalDisjunctionOperator_$0_$0_1",
    logicalDisjunctionOperator_$0_$0_2 = "logicalDisjunctionOperator_$0_$0_2",
    logicalDisjunctionOperator_$0_$1_1 = "logicalDisjunctionOperator_$0_$1_1",
    logicalDisjunctionOperator_$0_$1_2 = "logicalDisjunctionOperator_$0_$1_2",
    substitution = "substitution",
    substitution_$0_1 = "substitution_$0_1",
    substitution_$0_2 = "substitution_$0_2",
    substitution_$1_1 = "substitution_$1_1",
    substitution_$1_2 = "substitution_$1_2",
    substitution_$1_3 = "substitution_$1_3",
    substitution_$2_1 = "substitution_$2_1",
    substitution_$2_2 = "substitution_$2_2",
    substitution_$2_3 = "substitution_$2_3",
    substitutionOperator_1 = "substitutionOperator_1",
    substitutionOperator_2 = "substitutionOperator_2",
    substitutionOperator_$0 = "substitutionOperator_$0",
    substitutionOperator_$0_$0_1 = "substitutionOperator_$0_$0_1",
    substitutionOperator_$0_$0_2 = "substitutionOperator_$0_$0_2",
    substitutionOperator_$1 = "substitutionOperator_$1",
    substitutionOperator_$1_$0_1 = "substitutionOperator_$1_$0_1",
    substitutionOperator_$1_$0_2 = "substitutionOperator_$1_$0_2",
    substitutionOperator_$1_$1_1 = "substitutionOperator_$1_$1_1",
    substitutionOperator_$1_$1_2 = "substitutionOperator_$1_$1_2",
    substitutionOperation = "substitutionOperation",
    substitutionOperation_$0_1 = "substitutionOperation_$0_1",
    substitutionOperation_$0_2 = "substitutionOperation_$0_2",
    substitutionOperation_$1_1 = "substitutionOperation_$1_1",
    substitutionOperation_$1_2 = "substitutionOperation_$1_2",
    substitutionOperation_$1_3 = "substitutionOperation_$1_3",
    substitutionOperation_$2_1 = "substitutionOperation_$2_1",
    substitutionOperation_$2_2 = "substitutionOperation_$2_2",
    substitutionOperation_$2_3 = "substitutionOperation_$2_3",
    substitutionOperationOperator_1 = "substitutionOperationOperator_1",
    substitutionOperationOperator_2 = "substitutionOperationOperator_2",
    substitutionOperationOperator_3 = "substitutionOperationOperator_3",
    substitutionOperationOperator_4 = "substitutionOperationOperator_4",
    substitutionOperationOperator_5 = "substitutionOperationOperator_5",
    substitutionOperationOperator_6 = "substitutionOperationOperator_6",
    substitutionOperationOperator_7 = "substitutionOperationOperator_7",
    substitutionOperationOperator_8 = "substitutionOperationOperator_8",
    substitutionOperationOperator_9 = "substitutionOperationOperator_9",
    substitutionOperationOperator_10 = "substitutionOperationOperator_10",
    substitutionOperationOperator_11 = "substitutionOperationOperator_11",
    substitutionOperationOperator_$0 = "substitutionOperationOperator_$0",
    substitutionOperationOperator_$0_$0_1 = "substitutionOperationOperator_$0_$0_1",
    substitutionOperationOperator_$0_$0_2 = "substitutionOperationOperator_$0_$0_2",
    substitutionOperationOperator_$0_$1_1 = "substitutionOperationOperator_$0_$1_1",
    substitutionOperationOperator_$0_$1_2 = "substitutionOperationOperator_$0_$1_2",
    substitutionOperationOperator_$1 = "substitutionOperationOperator_$1",
    substitutionOperationOperator_$1_$0_1 = "substitutionOperationOperator_$1_$0_1",
    substitutionOperationOperator_$1_$0_2 = "substitutionOperationOperator_$1_$0_2",
    substitutionOperationOperator_$1_$1_1 = "substitutionOperationOperator_$1_$1_1",
    substitutionOperationOperator_$1_$1_2 = "substitutionOperationOperator_$1_$1_2",
    substitutionOperationOperator_$2 = "substitutionOperationOperator_$2",
    substitutionOperationOperator_$2_$0_1 = "substitutionOperationOperator_$2_$0_1",
    substitutionOperationOperator_$2_$0_2 = "substitutionOperationOperator_$2_$0_2",
    substitutionOperationOperator_$2_$1_1 = "substitutionOperationOperator_$2_$1_1",
    substitutionOperationOperator_$2_$1_2 = "substitutionOperationOperator_$2_$1_2",
    substitutionOperationOperator_$3 = "substitutionOperationOperator_$3",
    substitutionOperationOperator_$3_$0_1 = "substitutionOperationOperator_$3_$0_1",
    substitutionOperationOperator_$3_$0_2 = "substitutionOperationOperator_$3_$0_2",
    substitutionOperationOperator_$3_$1_1 = "substitutionOperationOperator_$3_$1_1",
    substitutionOperationOperator_$3_$1_2 = "substitutionOperationOperator_$3_$1_2",
    substitutionOperationOperator_$4 = "substitutionOperationOperator_$4",
    substitutionOperationOperator_$4_$0_1 = "substitutionOperationOperator_$4_$0_1",
    substitutionOperationOperator_$4_$0_2 = "substitutionOperationOperator_$4_$0_2",
    substitutionOperationOperator_$4_$1_1 = "substitutionOperationOperator_$4_$1_1",
    substitutionOperationOperator_$4_$1_2 = "substitutionOperationOperator_$4_$1_2",
    substitutionOperationOperator_$5 = "substitutionOperationOperator_$5",
    substitutionOperationOperator_$5_$0_1 = "substitutionOperationOperator_$5_$0_1",
    substitutionOperationOperator_$5_$0_2 = "substitutionOperationOperator_$5_$0_2",
    substitutionOperationOperator_$5_$1_1 = "substitutionOperationOperator_$5_$1_1",
    substitutionOperationOperator_$5_$1_2 = "substitutionOperationOperator_$5_$1_2",
    substitutionOperationOperator_$5_$2_1 = "substitutionOperationOperator_$5_$2_1",
    substitutionOperationOperator_$5_$2_2 = "substitutionOperationOperator_$5_$2_2",
    substitutionOperationOperator_$6 = "substitutionOperationOperator_$6",
    substitutionOperationOperator_$6_$0_1 = "substitutionOperationOperator_$6_$0_1",
    substitutionOperationOperator_$6_$0_2 = "substitutionOperationOperator_$6_$0_2",
    substitutionOperationOperator_$6_$1_1 = "substitutionOperationOperator_$6_$1_1",
    substitutionOperationOperator_$6_$1_2 = "substitutionOperationOperator_$6_$1_2",
    substitutionOperationOperator_$6_$2_1 = "substitutionOperationOperator_$6_$2_1",
    substitutionOperationOperator_$6_$2_2 = "substitutionOperationOperator_$6_$2_2",
    substitutionOperationOperator_$7 = "substitutionOperationOperator_$7",
    substitutionOperationOperator_$7_$0_1 = "substitutionOperationOperator_$7_$0_1",
    substitutionOperationOperator_$7_$0_2 = "substitutionOperationOperator_$7_$0_2",
    substitutionOperationOperator_$7_$1_1 = "substitutionOperationOperator_$7_$1_1",
    substitutionOperationOperator_$7_$1_2 = "substitutionOperationOperator_$7_$1_2",
    substitutionOperationOperator_$7_$2_1 = "substitutionOperationOperator_$7_$2_1",
    substitutionOperationOperator_$7_$2_2 = "substitutionOperationOperator_$7_$2_2",
    substitutionOperationOperator_$8 = "substitutionOperationOperator_$8",
    substitutionOperationOperator_$8_$0_1 = "substitutionOperationOperator_$8_$0_1",
    substitutionOperationOperator_$8_$0_2 = "substitutionOperationOperator_$8_$0_2",
    substitutionOperationOperator_$8_$1_1 = "substitutionOperationOperator_$8_$1_1",
    substitutionOperationOperator_$8_$1_2 = "substitutionOperationOperator_$8_$1_2",
    substitutionOperationOperator_$8_$2_1 = "substitutionOperationOperator_$8_$2_1",
    substitutionOperationOperator_$8_$2_2 = "substitutionOperationOperator_$8_$2_2",
    substitutionOperationOperator_$9 = "substitutionOperationOperator_$9",
    substitutionOperationOperator_$9_$0_1 = "substitutionOperationOperator_$9_$0_1",
    substitutionOperationOperator_$9_$0_2 = "substitutionOperationOperator_$9_$0_2",
    substitutionOperationOperator_$9_$1_1 = "substitutionOperationOperator_$9_$1_1",
    substitutionOperationOperator_$9_$1_2 = "substitutionOperationOperator_$9_$1_2",
    substitutionOperationOperator_$9_$2_1 = "substitutionOperationOperator_$9_$2_1",
    substitutionOperationOperator_$9_$2_2 = "substitutionOperationOperator_$9_$2_2",
    substitutionOperationOperator_$10 = "substitutionOperationOperator_$10",
    substitutionOperationOperator_$10_$0_1 = "substitutionOperationOperator_$10_$0_1",
    substitutionOperationOperator_$10_$0_2 = "substitutionOperationOperator_$10_$0_2",
    substitutionOperationOperator_$10_$1_1 = "substitutionOperationOperator_$10_$1_1",
    substitutionOperationOperator_$10_$1_2 = "substitutionOperationOperator_$10_$1_2",
    commaOperation = "commaOperation",
    commaOperation_$0 = "commaOperation_$0",
    arrayCall = "arrayCall",
    arrayCall_$0_1 = "arrayCall_$0_1",
    arrayCall_$0_2 = "arrayCall_$0_2",
    arrayCall_$0_3 = "arrayCall_$0_3",
    arrayCall_$1_1 = "arrayCall_$1_1",
    arrayCall_$1_2 = "arrayCall_$1_2",
    arrayCall_$1_3 = "arrayCall_$1_3",
    functionCall = "functionCall",
    functionCall_$0_1 = "functionCall_$0_1",
    functionCall_$0_2 = "functionCall_$0_2",
    functionCall_$0_3 = "functionCall_$0_3",
    functionCall_$1_1 = "functionCall_$1_1",
    functionCall_$1_2 = "functionCall_$1_2",
    functionCall_$1_3 = "functionCall_$1_3",
    signed = "signed",
    signed_$0_1 = "signed_$0_1",
    signed_$0_2 = "signed_$0_2",
    variable_1 = "variable_1",
    variable_2 = "variable_2",
    identifer = "identifer",
    variableLocal = "variableLocal",
    literal_1 = "literal_1",
    literal_2 = "literal_2",
    literal_3 = "literal_3",
    literal_4 = "literal_4",
    literal_5 = "literal_5",
    literal_6 = "literal_6",
    heredoc = "heredoc",
    heredocInner_1 = "heredocInner_1",
    heredocInner_2 = "heredocInner_2",
    heredocInner_3 = "heredocInner_3",
    heredocRaw = "heredocRaw",
    heredocRawInner_1 = "heredocRawInner_1",
    heredocRawInner_2 = "heredocRawInner_2",
    heredocRawInner_3 = "heredocRawInner_3",
    literalString = "literalString",
    literalStringInner_1 = "literalStringInner_1",
    literalStringInner_2 = "literalStringInner_2",
    literalStringInner_3 = "literalStringInner_3",
    literalStringInner_4 = "literalStringInner_4",
    literalStringRaw = "literalStringRaw",
    literalStringRawInner_1 = "literalStringRawInner_1",
    literalStringRawInner_2 = "literalStringRawInner_2",
    literalStringRawInner_3 = "literalStringRawInner_3",
    literalStringRawInner_4 = "literalStringRawInner_4",
    real = "real",
    real_$0_1 = "real_$0_1",
    real_$0_2 = "real_$0_2",
    int_1 = "int_1",
    int_2 = "int_2",
    int_3 = "int_3",
    int_x10 = "int_x10",
    int_x10_$0_1 = "int_x10_$0_1",
    int_x10_$0_2 = "int_x10_$0_2",
    int_x10Inner_1 = "int_x10Inner_1",
    int_x10Inner_2 = "int_x10Inner_2",
    int_x2 = "int_x2",
    int_x2Inner_1 = "int_x2Inner_1",
    int_x2Inner_2 = "int_x2Inner_2",
    int_x16 = "int_x16",
    int_x16Inner_1 = "int_x16Inner_1",
    int_x16Inner_2 = "int_x16Inner_2",
    preprocess_1 = "preprocess_1",
    preprocess_2 = "preprocess_2",
    preprocessGlobalDefine = "preprocessGlobalDefine",
    preprocessGlobalDefineName = "preprocessGlobalDefineName",
    preprocessDefine = "preprocessDefine",
    preprocessDefineName = "preprocessDefineName",
    maybePreprocess = "maybePreprocess",
    preprocessBeforeCharacterSentence_1 = "preprocessBeforeCharacterSentence_1",
    preprocessBeforeCharacterSentence_2 = "preprocessBeforeCharacterSentence_2",
    preprocessAfterCharacterSentence_1 = "preprocessAfterCharacterSentence_1",
    preprocessAfterCharacterSentence_2 = "preprocessAfterCharacterSentence_2",
    $EOF = "$EOF",
}
export interface start {
    kind: ASTKinds.start;
    contents: content[];
}
export type content = content_1 | content_2 | content_3 | content_4 | content_5 | content_6 | content_7;
export type content_1 = newLine;
export type content_2 = someSpaces;
export type content_3 = commentLong;
export type content_4 = commentLine;
export type content_5 = continueLine;
export type content_6 = functionBlock;
export type content_7 = preprocess;
export interface newLine {
    kind: ASTKinds.newLine;
    newLine: newLineBody;
    spaces: space[];
}
export type newLineBody = newLineBody_1 | newLineBody_2 | newLineBody_3;
export type newLineBody_1 = string;
export type newLineBody_2 = string;
export type newLineBody_3 = string;
export type endOfLine = endOfLine_1 | endOfLine_2;
export type endOfLine_1 = newLine;
export type endOfLine_2 = {kind: ASTKinds.$EOF};
export type space = string;
export interface someSpaces {
    kind: ASTKinds.someSpaces;
    spaces: space[];
}
export class commentLong {
    public kind: ASTKinds.commentLong = ASTKinds.commentLong;
    public commentRaw: commentLongBody[];
    public comment: string;
    constructor(commentRaw: commentLongBody[]){
        this.commentRaw = commentRaw;
        this.comment = ((): string => {
        const s = commentRaw.map((c) => c.c);
        return joinString(s);
        })();
    }
}
export type commentLongBody = commentLongBody_1 | commentLongBody_2;
export interface commentLongBody_1 {
    kind: ASTKinds.commentLongBody_1;
    c: string;
}
export interface commentLongBody_2 {
    kind: ASTKinds.commentLongBody_2;
    c: string;
}
export interface commentLine {
    kind: ASTKinds.commentLine;
    spaces: space[];
    commentRaw: string[];
    endOfLine: endOfLine;
}
export interface continueLine {
    kind: ASTKinds.continueLine;
    newLine: newLine;
}
export type continueLineOrCommentLong = continueLineOrCommentLong_1 | continueLineOrCommentLong_2;
export type continueLineOrCommentLong_1 = continueLine;
export type continueLineOrCommentLong_2 = commentLong;
export type spaceOrContinueLineOrCommentLong = spaceOrContinueLineOrCommentLong_1 | spaceOrContinueLineOrCommentLong_2 | spaceOrContinueLineOrCommentLong_3;
export type spaceOrContinueLineOrCommentLong_1 = space;
export type spaceOrContinueLineOrCommentLong_2 = continueLine;
export type spaceOrContinueLineOrCommentLong_3 = commentLong;
export type identiferHeadCharacter = string;
export type identiferBodySentence = identiferBodySentence_1 | identiferBodySentence_2;
export type identiferBodySentence_1 = continueLineOrCommentLong;
export type identiferBodySentence_2 = identiferBodyCharacter;
export type identiferBodyCharacter = string;
export interface statementSeparator {
    kind: ASTKinds.statementSeparator;
    separator: statementSeparatorBody;
}
export type statementSeparatorBody = statementSeparatorBody_1 | statementSeparatorBody_2 | statementSeparatorBody_3;
export interface statementSeparatorBody_1 {
    kind: ASTKinds.statementSeparatorBody_1;
}
export type statementSeparatorBody_2 = newLine;
export type statementSeparatorBody_3 = commentLine;
export type statementTerminator = statementTerminator_1 | statementTerminator_2;
export interface statementTerminator_1 {
    kind: ASTKinds.statementTerminator_1;
    separator: statementSeparator;
}
export type statementTerminator_2 = statementTerminatorBody;
export interface statementTerminatorBody {
    kind: ASTKinds.statementTerminatorBody;
}
export interface functionBlock {
    kind: ASTKinds.functionBlock;
    name: functionBlockName;
    spacesBeforeSelector: functionBlock_$0[];
    selector: Nullable<functionBlockSelector>;
    spacesBeforeBody: functionBlock_$1[];
    open: functionBlock_$2;
    blockInners: blockInner[];
    close: functionBlock_$3;
}
export type functionBlock_$0 = functionBlock_$0_1 | functionBlock_$0_2 | functionBlock_$0_3 | functionBlock_$0_4 | functionBlock_$0_5;
export type functionBlock_$0_1 = space;
export type functionBlock_$0_2 = continueLine;
export type functionBlock_$0_3 = newLine;
export type functionBlock_$0_4 = commentLine;
export type functionBlock_$0_5 = commentLong;
export type functionBlock_$1 = functionBlock_$1_1 | functionBlock_$1_2 | functionBlock_$1_3 | functionBlock_$1_4 | functionBlock_$1_5;
export type functionBlock_$1_1 = space;
export type functionBlock_$1_2 = continueLine;
export type functionBlock_$1_3 = newLine;
export type functionBlock_$1_4 = commentLine;
export type functionBlock_$1_5 = commentLong;
export type functionBlock_$2 = functionBlock_$2_1 | functionBlock_$2_2;
export type functionBlock_$2_1 = string;
export type functionBlock_$2_2 = string;
export type functionBlock_$3 = functionBlock_$3_1 | functionBlock_$3_2;
export type functionBlock_$3_1 = string;
export type functionBlock_$3_2 = string;
export type functionBlockName = identifer;
export interface functionBlockSelector {
    kind: ASTKinds.functionBlockSelector;
    spaceLhs: spaceOrContinueLineOrCommentLong[];
    spaceRhs: spaceOrContinueLineOrCommentLong[];
    selector: Nullable<selector>;
}
export interface selector {
    kind: ASTKinds.selector;
    prefix: Nullable<selectorPrefix>;
    main: selectorMain;
    suffix: Nullable<selectorSuffix>;
}
export interface selectorPrefix {
    kind: ASTKinds.selectorPrefix;
    nameRaw: selectorPrefixName;
}
export class selectorPrefixName {
    public kind: ASTKinds.selectorPrefixName = ASTKinds.selectorPrefixName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public name: string;
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.name = ((): string => {
        return 'pool';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface selectorMain {
    kind: ASTKinds.selectorMain;
    nameRaw: selectorMainName;
}
export type selectorMainName = selectorMainName_1 | selectorMainName_2 | selectorMainName_3 | selectorMainName_4 | selectorMainName_5 | selectorMainName_6 | selectorMainName_7;
export class selectorMainName_1 {
    public kind: ASTKinds.selectorMainName_1 = ASTKinds.selectorMainName_1;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public c6: continueLineOrCommentLong[];
    public name: string;
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[], c6: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.name = ((): string => {
        return 'random';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5, c6];
        return filterOutContinueLines(raw);
        })();
    }
}
export class selectorMainName_2 {
    public kind: ASTKinds.selectorMainName_2 = ASTKinds.selectorMainName_2;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public c6: continueLineOrCommentLong[];
    public c7: continueLineOrCommentLong[];
    public c8: continueLineOrCommentLong[];
    public c9: continueLineOrCommentLong[];
    public c10: continueLineOrCommentLong[];
    public name: string;
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[], c6: continueLineOrCommentLong[], c7: continueLineOrCommentLong[], c8: continueLineOrCommentLong[], c9: continueLineOrCommentLong[], c10: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.c7 = c7;
        this.c8 = c8;
        this.c9 = c9;
        this.c10 = c10;
        this.name = ((): string => {
        return 'nonoverlap';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10];
        return filterOutContinueLines(raw);
        })();
    }
}
export class selectorMainName_3 {
    public kind: ASTKinds.selectorMainName_3 = ASTKinds.selectorMainName_3;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public c6: continueLineOrCommentLong[];
    public c7: continueLineOrCommentLong[];
    public c8: continueLineOrCommentLong[];
    public c9: continueLineOrCommentLong[];
    public c10: continueLineOrCommentLong[];
    public name: string;
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[], c6: continueLineOrCommentLong[], c7: continueLineOrCommentLong[], c8: continueLineOrCommentLong[], c9: continueLineOrCommentLong[], c10: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.c7 = c7;
        this.c8 = c8;
        this.c9 = c9;
        this.c10 = c10;
        this.name = ((): string => {
        return 'sequential';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10];
        return filterOutContinueLines(raw);
        })();
    }
}
export class selectorMainName_4 {
    public kind: ASTKinds.selectorMainName_4 = ASTKinds.selectorMainName_4;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public name: string;
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.name = ((): string => {
        return 'array';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5];
        return filterOutContinueLines(raw);
        })();
    }
}
export class selectorMainName_5 {
    public kind: ASTKinds.selectorMainName_5 = ASTKinds.selectorMainName_5;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public name: string;
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.name = ((): string => {
        return 'void';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4];
        return filterOutContinueLines(raw);
        })();
    }
}
export class selectorMainName_6 {
    public kind: ASTKinds.selectorMainName_6 = ASTKinds.selectorMainName_6;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public name: string;
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.name = ((): string => {
        return 'all';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3];
        return filterOutContinueLines(raw);
        })();
    }
}
export class selectorMainName_7 {
    public kind: ASTKinds.selectorMainName_7 = ASTKinds.selectorMainName_7;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public name: string;
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.name = ((): string => {
        return 'last'
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface selectorSuffix {
    kind: ASTKinds.selectorSuffix;
    nameRaw: selectorSuffixName;
}
export class selectorSuffixName {
    public kind: ASTKinds.selectorSuffixName = ASTKinds.selectorSuffixName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public name: string;
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.name = ((): string => {
        return 'pool';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface block {
    kind: ASTKinds.block;
    spacesStart: block_$0[];
    selector: Nullable<blockSelector>;
    spacesBeforeBlock: block_$1[];
    blockInners: blockInner[];
    spacesEnd: block_$2[];
}
export type block_$0 = block_$0_1 | block_$0_2 | block_$0_3 | block_$0_4 | block_$0_5;
export type block_$0_1 = space;
export type block_$0_2 = continueLine;
export type block_$0_3 = newLine;
export type block_$0_4 = commentLong;
export type block_$0_5 = commentLine;
export type block_$1 = block_$1_1 | block_$1_2 | block_$1_3;
export type block_$1_1 = space;
export type block_$1_2 = continueLine;
export type block_$1_3 = newLine;
export type block_$2 = block_$2_1 | block_$2_2 | block_$2_3 | block_$2_4 | block_$2_5;
export type block_$2_1 = space;
export type block_$2_2 = continueLine;
export type block_$2_3 = newLine;
export type block_$2_4 = commentLong;
export type block_$2_5 = commentLine;
export interface blockSelector {
    kind: ASTKinds.blockSelector;
    selector: Nullable<selector>;
    spacesLhs: space[];
    spacesRhs: space[];
}
export type blockInner = blockInner_1 | blockInner_2 | blockInner_3 | blockInner_4 | blockInner_5 | blockInner_6 | blockInner_7 | blockInner_8;
export type blockInner_1 = newLine;
export type blockInner_2 = commentLong;
export type blockInner_3 = commentLine;
export type blockInner_4 = continueLine;
export type blockInner_5 = someSpaces;
export type blockInner_6 = blockInnerFlow;
export type blockInner_7 = blockInnerSentence;
export type blockInner_8 = preprocess;
export interface blockInnerFlow {
    kind: ASTKinds.blockInnerFlow;
    body: blockInnerFlowKind;
}
export type blockInnerFlowKind = blockInnerFlowKind_1 | blockInnerFlowKind_2 | blockInnerFlowKind_3 | blockInnerFlowKind_4 | blockInnerFlowKind_5 | blockInnerFlowKind_6 | blockInnerFlowKind_7;
export type blockInnerFlowKind_1 = flowIf;
export type blockInnerFlowKind_2 = flowCase;
export type blockInnerFlowKind_3 = flowSwitch;
export type blockInnerFlowKind_4 = flowWhile;
export type blockInnerFlowKind_5 = flowFor;
export type blockInnerFlowKind_6 = flowForeach;
export type blockInnerFlowKind_7 = block;
export interface blockInnerSentence {
    kind: ASTKinds.blockInnerSentence;
    body: blockInnerSentenceKind;
    spaces: blockInnerSentence_$0[];
    terminator: statementTerminator;
}
export type blockInnerSentence_$0 = blockInnerSentence_$0_1 | blockInnerSentence_$0_2 | blockInnerSentence_$0_3;
export type blockInnerSentence_$0_1 = space;
export type blockInnerSentence_$0_2 = continueLine;
export type blockInnerSentence_$0_3 = commentLong;
export type blockInnerSentenceKind = blockInnerSentenceKind_1 | blockInnerSentenceKind_2 | blockInnerSentenceKind_3 | blockInnerSentenceKind_4 | blockInnerSentenceKind_5 | blockInnerSentenceKind_6 | blockInnerSentenceKind_7;
export type blockInnerSentenceKind_1 = blockInnerBreak;
export type blockInnerSentenceKind_2 = blockInnerContinue;
export type blockInnerSentenceKind_3 = blockInnerReturn;
export type blockInnerSentenceKind_4 = blockInnerParallel;
export type blockInnerSentenceKind_5 = blockInnerVoid;
export type blockInnerSentenceKind_6 = outputSettlement;
export type blockInnerSentenceKind_7 = expr;
export interface flowIf {
    kind: ASTKinds.flowIf;
    name: flowIfName;
    condition: expr;
    block: flowIf_$0;
    flowElseifs: flowElseif[];
    flowElse: Nullable<flowElse>;
}
export type flowIf_$0 = flowIf_$0_1 | flowIf_$0_2;
export type flowIf_$0_1 = block;
export type flowIf_$0_2 = flowIfBlock;
export class flowIfName {
    public kind: ASTKinds.flowIfName = ASTKinds.flowIfName;
    public c1: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.comments = ((): commentLong[][] => {
        const raw = [c1];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface flowElseif {
    kind: ASTKinds.flowElseif;
    name: flowElseifName;
    condition: expr;
    block: flowElseif_$0;
}
export type flowElseif_$0 = flowElseif_$0_1 | flowElseif_$0_2;
export type flowElseif_$0_1 = block;
export type flowElseif_$0_2 = flowIfBlock;
export class flowElseifName {
    public kind: ASTKinds.flowElseifName = ASTKinds.flowElseifName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public c6: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[], c6: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5, c6];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface flowElse {
    kind: ASTKinds.flowElse;
    name: flowElseName;
    block: flowElse_$0;
}
export type flowElse_$0 = flowElse_$0_1 | flowElse_$0_2;
export type flowElse_$0_1 = block;
export type flowElse_$0_2 = flowIfBlock;
export class flowElseName {
    public kind: ASTKinds.flowElseName = ASTKinds.flowElseName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface flowIfBlock {
    kind: ASTKinds.flowIfBlock;
    spacesStart: spaceOrContinueLineOrCommentLong[];
    newLineFirst: flowIfBlock_$0;
    inner: blockInnerSentence;
    spacesEnd: flowIfBlock_$1[];
}
export type flowIfBlock_$0 = flowIfBlock_$0_1 | flowIfBlock_$0_2;
export type flowIfBlock_$0_1 = newLine;
export type flowIfBlock_$0_2 = commentLine;
export type flowIfBlock_$1 = flowIfBlock_$1_1 | flowIfBlock_$1_2;
export type flowIfBlock_$1_1 = space;
export type flowIfBlock_$1_2 = commentLong;
export interface flowCase {
    kind: ASTKinds.flowCase;
    name: flowCaseName;
    condition: expr;
    spacesBeforeBlock: flowCase_$0[];
    firstBlockInners: blockInner[];
    flowWhens: flowWhen[];
    flowOthers: Nullable<flowOthers>;
    lastBlockInners: blockInner[];
    spacesAfterBlock: flowCase_$1[];
}
export type flowCase_$0 = flowCase_$0_1 | flowCase_$0_2 | flowCase_$0_3 | flowCase_$0_4 | flowCase_$0_5;
export type flowCase_$0_1 = space;
export type flowCase_$0_2 = continueLine;
export type flowCase_$0_3 = newLine;
export type flowCase_$0_4 = commentLong;
export type flowCase_$0_5 = commentLine;
export type flowCase_$1 = flowCase_$1_1 | flowCase_$1_2 | flowCase_$1_3 | flowCase_$1_4 | flowCase_$1_5;
export type flowCase_$1_1 = space;
export type flowCase_$1_2 = continueLine;
export type flowCase_$1_3 = newLine;
export type flowCase_$1_4 = commentLong;
export type flowCase_$1_5 = commentLine;
export class flowCaseName {
    public kind: ASTKinds.flowCaseName = ASTKinds.flowCaseName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface flowWhen {
    kind: ASTKinds.flowWhen;
    name: flowWhenName;
    conditions: flowWhenConditions;
    block: block;
}
export class flowWhenName {
    public kind: ASTKinds.flowWhenName = ASTKinds.flowWhenName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4];
        return filterOutContinueLines(raw);
        })();
    }
}
export class flowWhenConditions {
    public kind: ASTKinds.flowWhenConditions = ASTKinds.flowWhenConditions;
    public conditionHead: flowWhenCondition;
    public conditionBodies: flowWhenConditions_$0[];
    public conditions: flowWhenCondition[];
    constructor(conditionHead: flowWhenCondition, conditionBodies: flowWhenConditions_$0[]){
        this.conditionHead = conditionHead;
        this.conditionBodies = conditionBodies;
        this.conditions = ((): flowWhenCondition[] => {
        const bodies = conditionBodies.map((b) => b.body);
        return [conditionHead, ...bodies];
        })();
    }
}
export interface flowWhenConditions_$0 {
    kind: ASTKinds.flowWhenConditions_$0;
    body: flowWhenCondition;
}
export type flowWhenCondition = flowWhenCondition_1 | flowWhenCondition_2;
export type flowWhenCondition_1 = flowWhenConditionRange;
export type flowWhenCondition_2 = flowWhenConditionLiteral;
export interface flowWhenConditionLiteral {
    kind: ASTKinds.flowWhenConditionLiteral;
    spacesStart: flowWhenConditionLiteral_$0[];
    body: flowWhenConditionLiteral_$1;
    spacesEnd: flowWhenConditionLiteral_$2[];
}
export type flowWhenConditionLiteral_$0 = flowWhenConditionLiteral_$0_1 | flowWhenConditionLiteral_$0_2 | flowWhenConditionLiteral_$0_3;
export type flowWhenConditionLiteral_$0_1 = space;
export type flowWhenConditionLiteral_$0_2 = continueLine;
export type flowWhenConditionLiteral_$0_3 = commentLong;
export type flowWhenConditionLiteral_$1 = flowWhenConditionLiteral_$1_1 | flowWhenConditionLiteral_$1_2;
export type flowWhenConditionLiteral_$1_1 = literal;
export type flowWhenConditionLiteral_$1_2 = maybePreprocess;
export type flowWhenConditionLiteral_$2 = flowWhenConditionLiteral_$2_1 | flowWhenConditionLiteral_$2_2 | flowWhenConditionLiteral_$2_3;
export type flowWhenConditionLiteral_$2_1 = space;
export type flowWhenConditionLiteral_$2_2 = continueLine;
export type flowWhenConditionLiteral_$2_3 = commentLong;
export interface flowWhenConditionRange {
    kind: ASTKinds.flowWhenConditionRange;
    spacesStart: flowWhenConditionRange_$0[];
    lhs: flowWhenConditionRange_$1;
    spacesLhs: flowWhenConditionRange_$2[];
    spacesRhs: flowWhenConditionRange_$3[];
    rhs: flowWhenConditionRange_$4;
    spacesEnd: flowWhenConditionRange_$5[];
}
export type flowWhenConditionRange_$0 = flowWhenConditionRange_$0_1 | flowWhenConditionRange_$0_2 | flowWhenConditionRange_$0_3;
export type flowWhenConditionRange_$0_1 = space;
export type flowWhenConditionRange_$0_2 = continueLine;
export type flowWhenConditionRange_$0_3 = commentLong;
export type flowWhenConditionRange_$1 = flowWhenConditionRange_$1_1 | flowWhenConditionRange_$1_2;
export type flowWhenConditionRange_$1_1 = literal;
export type flowWhenConditionRange_$1_2 = maybePreprocess;
export type flowWhenConditionRange_$2 = flowWhenConditionRange_$2_1 | flowWhenConditionRange_$2_2 | flowWhenConditionRange_$2_3;
export type flowWhenConditionRange_$2_1 = space;
export type flowWhenConditionRange_$2_2 = continueLine;
export type flowWhenConditionRange_$2_3 = commentLong;
export type flowWhenConditionRange_$3 = flowWhenConditionRange_$3_1 | flowWhenConditionRange_$3_2 | flowWhenConditionRange_$3_3;
export type flowWhenConditionRange_$3_1 = space;
export type flowWhenConditionRange_$3_2 = continueLine;
export type flowWhenConditionRange_$3_3 = commentLong;
export type flowWhenConditionRange_$4 = flowWhenConditionRange_$4_1 | flowWhenConditionRange_$4_2;
export type flowWhenConditionRange_$4_1 = literal;
export type flowWhenConditionRange_$4_2 = maybePreprocess;
export type flowWhenConditionRange_$5 = flowWhenConditionRange_$5_1 | flowWhenConditionRange_$5_2 | flowWhenConditionRange_$5_3;
export type flowWhenConditionRange_$5_1 = space;
export type flowWhenConditionRange_$5_2 = continueLine;
export type flowWhenConditionRange_$5_3 = commentLong;
export interface flowOthers {
    kind: ASTKinds.flowOthers;
    spacesStart: flowOthers_$0[];
    name: flowOthersName;
    block: block;
}
export type flowOthers_$0 = flowOthers_$0_1 | flowOthers_$0_2 | flowOthers_$0_3;
export type flowOthers_$0_1 = space;
export type flowOthers_$0_2 = continueLine;
export type flowOthers_$0_3 = commentLong;
export class flowOthersName {
    public kind: ASTKinds.flowOthersName = ASTKinds.flowOthersName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public c6: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[], c6: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5, c6];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface flowSwitch {
    kind: ASTKinds.flowSwitch;
    name: flowSwitchName;
    condition: expr;
    block: block;
}
export class flowSwitchName {
    public kind: ASTKinds.flowSwitchName = ASTKinds.flowSwitchName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public c6: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[], c6: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5, c6];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface flowWhile {
    kind: ASTKinds.flowWhile;
    name: flowWhileName;
    condition: expr;
    block: block;
}
export class flowWhileName {
    public kind: ASTKinds.flowWhileName = ASTKinds.flowWhileName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface flowFor {
    kind: ASTKinds.flowFor;
    name: flowForName;
    initializer: expr;
    separator1: statementSeparator;
    condition: expr;
    separator2: statementSeparator;
    updater: expr;
    block: block;
}
export class flowForName {
    public kind: ASTKinds.flowForName = ASTKinds.flowForName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface flowForeach {
    kind: ASTKinds.flowForeach;
    name: flowForeachName;
    target: expr;
    separator: statementSeparator;
    spaceBeforeVariable: flowForeach_$0[];
    variable: variable;
    block: block;
}
export type flowForeach_$0 = flowForeach_$0_1 | flowForeach_$0_2 | flowForeach_$0_3;
export type flowForeach_$0_1 = space;
export type flowForeach_$0_2 = commentLong;
export type flowForeach_$0_3 = continueLine;
export class flowForeachName {
    public kind: ASTKinds.flowForeachName = ASTKinds.flowForeachName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public c6: continueLineOrCommentLong[];
    public c7: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[], c6: continueLineOrCommentLong[], c7: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.c7 = c7;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5, c6, c7];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface blockInnerBreak {
    kind: ASTKinds.blockInnerBreak;
    name: blockInnerBreakName;
}
export class blockInnerBreakName {
    public kind: ASTKinds.blockInnerBreakName = ASTKinds.blockInnerBreakName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface blockInnerContinue {
    kind: ASTKinds.blockInnerContinue;
    name: blockInnerContinueName;
}
export class blockInnerContinueName {
    public kind: ASTKinds.blockInnerContinueName = ASTKinds.blockInnerContinueName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public c6: continueLineOrCommentLong[];
    public c7: continueLineOrCommentLong[];
    public c8: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[], c6: continueLineOrCommentLong[], c7: continueLineOrCommentLong[], c8: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.c7 = c7;
        this.c8 = c8;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5, c6, c7, c8];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface blockInnerReturn {
    kind: ASTKinds.blockInnerReturn;
    name: blockInnerReturnName;
}
export class blockInnerReturnName {
    public kind: ASTKinds.blockInnerReturnName = ASTKinds.blockInnerReturnName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public c6: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[], c6: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5, c6];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface blockInnerParallel {
    kind: ASTKinds.blockInnerParallel;
    name: blockInnerParallelName;
    target: expr;
}
export class blockInnerParallelName {
    public kind: ASTKinds.blockInnerParallelName = ASTKinds.blockInnerParallelName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public c6: continueLineOrCommentLong[];
    public c7: continueLineOrCommentLong[];
    public c8: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[], c6: continueLineOrCommentLong[], c7: continueLineOrCommentLong[], c8: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.c7 = c7;
        this.c8 = c8;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5, c6, c7, c8];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface blockInnerVoid {
    kind: ASTKinds.blockInnerVoid;
    name: blockInnerVoidName;
    target: expr;
}
export class blockInnerVoidName {
    public kind: ASTKinds.blockInnerVoidName = ASTKinds.blockInnerVoidName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4];
        return filterOutContinueLines(raw);
        })();
    }
}
export interface outputSettlement {
    kind: ASTKinds.outputSettlement;
    tokens: string;
}
export interface expr {
    kind: ASTKinds.expr;
    spacesLhs: expr_$0[];
    inner: exprInner;
    spacesRhs: expr_$1[];
}
export type expr_$0 = expr_$0_1 | expr_$0_2 | expr_$0_3;
export type expr_$0_1 = space;
export type expr_$0_2 = commentLong;
export type expr_$0_3 = continueLine;
export type expr_$1 = expr_$1_1 | expr_$1_2 | expr_$1_3;
export type expr_$1_1 = space;
export type expr_$1_2 = commentLong;
export type expr_$1_3 = continueLine;
export type exprInner = exprInner_1 | exprInner_2 | exprInner_3 | exprInner_4 | exprInner_5 | exprInner_6 | exprInner_7 | exprInner_8 | exprInner_9 | exprInner_10 | exprInner_11 | exprInner_12 | exprInner_13 | exprInner_14 | exprInner_15 | exprInner_16 | exprInner_17 | exprInner_18 | exprInner_19;
export type exprInner_1 = commaOperation;
export type exprInner_2 = multiplicationOrDivisionOperation;
export type exprInner_3 = additionOrSubtractionOperation;
export type exprInner_4 = logicalConjunction;
export type exprInner_5 = logicalDisjunction;
export type exprInner_6 = substitution;
export type exprInner_7 = substitutionOperation;
export type exprInner_8 = comparisonOperation;
export type exprInner_9 = arrayCall;
export type exprInner_10 = functionCall;
export type exprInner_11 = parenthesesOperation;
export type exprInner_12 = bracketsOperation;
export type exprInner_13 = exclamationOperation;
export type exprInner_14 = incrementOrDecrementOperation;
export type exprInner_15 = feedbackOperation;
export type exprInner_16 = literal;
export type exprInner_17 = variable;
export type exprInner_18 = signed;
export type exprInner_19 = maybePreprocess;
export interface parenthesesOperation {
    kind: ASTKinds.parenthesesOperation;
    spacesLhs: parenthesesOperation_$0[];
    operand: Nullable<expr>;
    spacesRhs: parenthesesOperation_$1[];
}
export type parenthesesOperation_$0 = parenthesesOperation_$0_1 | parenthesesOperation_$0_2 | parenthesesOperation_$0_3;
export type parenthesesOperation_$0_1 = space;
export type parenthesesOperation_$0_2 = commentLong;
export type parenthesesOperation_$0_3 = continueLine;
export type parenthesesOperation_$1 = parenthesesOperation_$1_1 | parenthesesOperation_$1_2 | parenthesesOperation_$1_3;
export type parenthesesOperation_$1_1 = space;
export type parenthesesOperation_$1_2 = commentLong;
export type parenthesesOperation_$1_3 = continueLine;
export interface bracketsOperation {
    kind: ASTKinds.bracketsOperation;
    spacesLhs: bracketsOperation_$0[];
    start: expr;
    end: Nullable<bracketsOperationOption>;
    delimiter: Nullable<bracketsOperationOption>;
    spacesRhs: bracketsOperation_$1[];
}
export type bracketsOperation_$0 = bracketsOperation_$0_1 | bracketsOperation_$0_2 | bracketsOperation_$0_3;
export type bracketsOperation_$0_1 = space;
export type bracketsOperation_$0_2 = commentLong;
export type bracketsOperation_$0_3 = continueLine;
export type bracketsOperation_$1 = bracketsOperation_$1_1 | bracketsOperation_$1_2 | bracketsOperation_$1_3;
export type bracketsOperation_$1_1 = space;
export type bracketsOperation_$1_2 = commentLong;
export type bracketsOperation_$1_3 = continueLine;
export interface bracketsOperationOption {
    kind: ASTKinds.bracketsOperationOption;
    spacesLhs: bracketsOperationOption_$0[];
    spacesRhs: bracketsOperationOption_$1[];
    value: Nullable<expr>;
}
export type bracketsOperationOption_$0 = bracketsOperationOption_$0_1 | bracketsOperationOption_$0_2 | bracketsOperationOption_$0_3;
export type bracketsOperationOption_$0_1 = space;
export type bracketsOperationOption_$0_2 = commentLong;
export type bracketsOperationOption_$0_3 = continueLine;
export type bracketsOperationOption_$1 = bracketsOperationOption_$1_1 | bracketsOperationOption_$1_2 | bracketsOperationOption_$1_3;
export type bracketsOperationOption_$1_1 = space;
export type bracketsOperationOption_$1_2 = commentLong;
export type bracketsOperationOption_$1_3 = continueLine;
export interface exclamationOperation {
    kind: ASTKinds.exclamationOperation;
    spaces: exclamationOperation_$0[];
    operand: expr;
}
export type exclamationOperation_$0 = exclamationOperation_$0_1 | exclamationOperation_$0_2 | exclamationOperation_$0_3;
export type exclamationOperation_$0_1 = space;
export type exclamationOperation_$0_2 = commentLong;
export type exclamationOperation_$0_3 = continueLine;
export interface incrementOrDecrementOperation {
    kind: ASTKinds.incrementOrDecrementOperation;
    operand: variable;
    spaces: incrementOrDecrementOperation_$0[];
    operator: incrementOrDecrementOperator;
}
export type incrementOrDecrementOperation_$0 = incrementOrDecrementOperation_$0_1 | incrementOrDecrementOperation_$0_2 | incrementOrDecrementOperation_$0_3;
export type incrementOrDecrementOperation_$0_1 = space;
export type incrementOrDecrementOperation_$0_2 = commentLong;
export type incrementOrDecrementOperation_$0_3 = continueLine;
export type incrementOrDecrementOperator = incrementOrDecrementOperator_1 | incrementOrDecrementOperator_2;
export type incrementOrDecrementOperator_1 = incrementOrDecrementOperator_$0;
export type incrementOrDecrementOperator_2 = incrementOrDecrementOperator_$1;
export class incrementOrDecrementOperator_$0 {
    public kind: ASTKinds.incrementOrDecrementOperator_$0 = ASTKinds.incrementOrDecrementOperator_$0;
    public c1: incrementOrDecrementOperator_$0_$0[];
    public c2: incrementOrDecrementOperator_$0_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: incrementOrDecrementOperator_$0_$0[], c2: incrementOrDecrementOperator_$0_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\+\+';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type incrementOrDecrementOperator_$0_$0 = incrementOrDecrementOperator_$0_$0_1 | incrementOrDecrementOperator_$0_$0_2;
export type incrementOrDecrementOperator_$0_$0_1 = commentLong;
export type incrementOrDecrementOperator_$0_$0_2 = continueLine;
export type incrementOrDecrementOperator_$0_$1 = incrementOrDecrementOperator_$0_$1_1 | incrementOrDecrementOperator_$0_$1_2;
export type incrementOrDecrementOperator_$0_$1_1 = commentLong;
export type incrementOrDecrementOperator_$0_$1_2 = continueLine;
export class incrementOrDecrementOperator_$1 {
    public kind: ASTKinds.incrementOrDecrementOperator_$1 = ASTKinds.incrementOrDecrementOperator_$1;
    public c1: incrementOrDecrementOperator_$1_$0[];
    public c2: incrementOrDecrementOperator_$1_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: incrementOrDecrementOperator_$1_$0[], c2: incrementOrDecrementOperator_$1_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\-\-'
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type incrementOrDecrementOperator_$1_$0 = incrementOrDecrementOperator_$1_$0_1 | incrementOrDecrementOperator_$1_$0_2;
export type incrementOrDecrementOperator_$1_$0_1 = commentLong;
export type incrementOrDecrementOperator_$1_$0_2 = continueLine;
export type incrementOrDecrementOperator_$1_$1 = incrementOrDecrementOperator_$1_$1_1 | incrementOrDecrementOperator_$1_$1_2;
export type incrementOrDecrementOperator_$1_$1_1 = commentLong;
export type incrementOrDecrementOperator_$1_$1_2 = continueLine;
export interface multiplicationOrDivisionOperation {
    kind: ASTKinds.multiplicationOrDivisionOperation;
    operand1: expr;
    spacesLhs: multiplicationOrDivisionOperation_$0[];
    operator: multiplicationOrDivisionOperator;
    spacesRhs: multiplicationOrDivisionOperation_$1[];
    operand2: expr;
}
export type multiplicationOrDivisionOperation_$0 = multiplicationOrDivisionOperation_$0_1 | multiplicationOrDivisionOperation_$0_2 | multiplicationOrDivisionOperation_$0_3;
export type multiplicationOrDivisionOperation_$0_1 = space;
export type multiplicationOrDivisionOperation_$0_2 = commentLong;
export type multiplicationOrDivisionOperation_$0_3 = continueLine;
export type multiplicationOrDivisionOperation_$1 = multiplicationOrDivisionOperation_$1_1 | multiplicationOrDivisionOperation_$1_2 | multiplicationOrDivisionOperation_$1_3;
export type multiplicationOrDivisionOperation_$1_1 = space;
export type multiplicationOrDivisionOperation_$1_2 = commentLong;
export type multiplicationOrDivisionOperation_$1_3 = continueLine;
export type multiplicationOrDivisionOperator = multiplicationOrDivisionOperator_1 | multiplicationOrDivisionOperator_2 | multiplicationOrDivisionOperator_3;
export type multiplicationOrDivisionOperator_1 = multiplicationOrDivisionOperator_$0;
export type multiplicationOrDivisionOperator_2 = multiplicationOrDivisionOperator_$1;
export type multiplicationOrDivisionOperator_3 = multiplicationOrDivisionOperator_$2;
export class multiplicationOrDivisionOperator_$0 {
    public kind: ASTKinds.multiplicationOrDivisionOperator_$0 = ASTKinds.multiplicationOrDivisionOperator_$0;
    public c1: multiplicationOrDivisionOperator_$0_$0[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: multiplicationOrDivisionOperator_$0_$0[]){
        this.c1 = c1;
        this.body = ((): string => {
        return '\*';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1];
                return filterOutContinueLines(raw);
        })();
    }
}
export type multiplicationOrDivisionOperator_$0_$0 = multiplicationOrDivisionOperator_$0_$0_1 | multiplicationOrDivisionOperator_$0_$0_2;
export type multiplicationOrDivisionOperator_$0_$0_1 = commentLong;
export type multiplicationOrDivisionOperator_$0_$0_2 = continueLine;
export class multiplicationOrDivisionOperator_$1 {
    public kind: ASTKinds.multiplicationOrDivisionOperator_$1 = ASTKinds.multiplicationOrDivisionOperator_$1;
    public c1: multiplicationOrDivisionOperator_$1_$0[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: multiplicationOrDivisionOperator_$1_$0[]){
        this.c1 = c1;
        this.body = ((): string => {
        return '\/';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1];
                return filterOutContinueLines(raw);
        })();
    }
}
export type multiplicationOrDivisionOperator_$1_$0 = multiplicationOrDivisionOperator_$1_$0_1 | multiplicationOrDivisionOperator_$1_$0_2;
export type multiplicationOrDivisionOperator_$1_$0_1 = commentLong;
export type multiplicationOrDivisionOperator_$1_$0_2 = continueLine;
export class multiplicationOrDivisionOperator_$2 {
    public kind: ASTKinds.multiplicationOrDivisionOperator_$2 = ASTKinds.multiplicationOrDivisionOperator_$2;
    public c1: multiplicationOrDivisionOperator_$2_$0[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: multiplicationOrDivisionOperator_$2_$0[]){
        this.c1 = c1;
        this.body = ((): string => {
        return '\%';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1];
                return filterOutContinueLines(raw);
        })();
    }
}
export type multiplicationOrDivisionOperator_$2_$0 = multiplicationOrDivisionOperator_$2_$0_1 | multiplicationOrDivisionOperator_$2_$0_2;
export type multiplicationOrDivisionOperator_$2_$0_1 = commentLong;
export type multiplicationOrDivisionOperator_$2_$0_2 = continueLine;
export interface additionOrSubtractionOperation {
    kind: ASTKinds.additionOrSubtractionOperation;
    operand1: expr;
    spacesLhs: additionOrSubtractionOperation_$0[];
    operator: additionOrSubtractionOperator;
    spacesRhs: additionOrSubtractionOperation_$1[];
    operand2: expr;
}
export type additionOrSubtractionOperation_$0 = additionOrSubtractionOperation_$0_1 | additionOrSubtractionOperation_$0_2 | additionOrSubtractionOperation_$0_3;
export type additionOrSubtractionOperation_$0_1 = space;
export type additionOrSubtractionOperation_$0_2 = commentLong;
export type additionOrSubtractionOperation_$0_3 = continueLine;
export type additionOrSubtractionOperation_$1 = additionOrSubtractionOperation_$1_1 | additionOrSubtractionOperation_$1_2 | additionOrSubtractionOperation_$1_3;
export type additionOrSubtractionOperation_$1_1 = space;
export type additionOrSubtractionOperation_$1_2 = commentLong;
export type additionOrSubtractionOperation_$1_3 = continueLine;
export type additionOrSubtractionOperator = additionOrSubtractionOperator_1 | additionOrSubtractionOperator_2;
export type additionOrSubtractionOperator_1 = additionOrSubtractionOperator_$0;
export type additionOrSubtractionOperator_2 = additionOrSubtractionOperator_$1;
export class additionOrSubtractionOperator_$0 {
    public kind: ASTKinds.additionOrSubtractionOperator_$0 = ASTKinds.additionOrSubtractionOperator_$0;
    public c1: additionOrSubtractionOperator_$0_$0[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: additionOrSubtractionOperator_$0_$0[]){
        this.c1 = c1;
        this.body = ((): string => {
        return '\+';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1];
                return filterOutContinueLines(raw);
        })();
    }
}
export type additionOrSubtractionOperator_$0_$0 = additionOrSubtractionOperator_$0_$0_1 | additionOrSubtractionOperator_$0_$0_2;
export type additionOrSubtractionOperator_$0_$0_1 = commentLong;
export type additionOrSubtractionOperator_$0_$0_2 = continueLine;
export class additionOrSubtractionOperator_$1 {
    public kind: ASTKinds.additionOrSubtractionOperator_$1 = ASTKinds.additionOrSubtractionOperator_$1;
    public c1: additionOrSubtractionOperator_$1_$0[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: additionOrSubtractionOperator_$1_$0[]){
        this.c1 = c1;
        this.body = ((): string => {
        return '\-';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1];
                return filterOutContinueLines(raw);
        })();
    }
}
export type additionOrSubtractionOperator_$1_$0 = additionOrSubtractionOperator_$1_$0_1 | additionOrSubtractionOperator_$1_$0_2;
export type additionOrSubtractionOperator_$1_$0_1 = commentLong;
export type additionOrSubtractionOperator_$1_$0_2 = continueLine;
export interface feedbackOperation {
    kind: ASTKinds.feedbackOperation;
    spaces: feedbackOperation_$0[];
    operand: variable;
}
export type feedbackOperation_$0 = feedbackOperation_$0_1 | feedbackOperation_$0_2 | feedbackOperation_$0_3;
export type feedbackOperation_$0_1 = space;
export type feedbackOperation_$0_2 = commentLong;
export type feedbackOperation_$0_3 = continueLine;
export interface comparisonOperation {
    kind: ASTKinds.comparisonOperation;
    operand1: expr;
    spacesLhs: comparisonOperation_$0[];
    operator: comparisonOperator;
    spacesRhs: comparisonOperation_$1[];
    operand2: expr;
}
export type comparisonOperation_$0 = comparisonOperation_$0_1 | comparisonOperation_$0_2 | comparisonOperation_$0_3;
export type comparisonOperation_$0_1 = space;
export type comparisonOperation_$0_2 = commentLong;
export type comparisonOperation_$0_3 = continueLine;
export type comparisonOperation_$1 = comparisonOperation_$1_1 | comparisonOperation_$1_2 | comparisonOperation_$1_3;
export type comparisonOperation_$1_1 = space;
export type comparisonOperation_$1_2 = commentLong;
export type comparisonOperation_$1_3 = continueLine;
export type comparisonOperator = comparisonOperator_1 | comparisonOperator_2 | comparisonOperator_3 | comparisonOperator_4 | comparisonOperator_5 | comparisonOperator_6 | comparisonOperator_7 | comparisonOperator_8;
export type comparisonOperator_1 = comparisonOperator_$0;
export type comparisonOperator_2 = comparisonOperator_$1;
export type comparisonOperator_3 = comparisonOperator_$2;
export type comparisonOperator_4 = comparisonOperator_$3;
export type comparisonOperator_5 = comparisonOperator_$4;
export type comparisonOperator_6 = comparisonOperator_$5;
export type comparisonOperator_7 = comparisonOperator_$6;
export type comparisonOperator_8 = comparisonOperator_$7;
export class comparisonOperator_$0 {
    public kind: ASTKinds.comparisonOperator_$0 = ASTKinds.comparisonOperator_$0;
    public c1: comparisonOperator_$0_$0[];
    public c2: comparisonOperator_$0_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: comparisonOperator_$0_$0[], c2: comparisonOperator_$0_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\=\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type comparisonOperator_$0_$0 = comparisonOperator_$0_$0_1 | comparisonOperator_$0_$0_2;
export type comparisonOperator_$0_$0_1 = commentLong;
export type comparisonOperator_$0_$0_2 = continueLine;
export type comparisonOperator_$0_$1 = comparisonOperator_$0_$1_1 | comparisonOperator_$0_$1_2;
export type comparisonOperator_$0_$1_1 = commentLong;
export type comparisonOperator_$0_$1_2 = continueLine;
export class comparisonOperator_$1 {
    public kind: ASTKinds.comparisonOperator_$1 = ASTKinds.comparisonOperator_$1;
    public c1: comparisonOperator_$1_$0[];
    public c2: comparisonOperator_$1_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: comparisonOperator_$1_$0[], c2: comparisonOperator_$1_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\!\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type comparisonOperator_$1_$0 = comparisonOperator_$1_$0_1 | comparisonOperator_$1_$0_2;
export type comparisonOperator_$1_$0_1 = commentLong;
export type comparisonOperator_$1_$0_2 = continueLine;
export type comparisonOperator_$1_$1 = comparisonOperator_$1_$1_1 | comparisonOperator_$1_$1_2;
export type comparisonOperator_$1_$1_1 = commentLong;
export type comparisonOperator_$1_$1_2 = continueLine;
export class comparisonOperator_$2 {
    public kind: ASTKinds.comparisonOperator_$2 = ASTKinds.comparisonOperator_$2;
    public c1: comparisonOperator_$2_$0[];
    public c2: comparisonOperator_$2_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: comparisonOperator_$2_$0[], c2: comparisonOperator_$2_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\>\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type comparisonOperator_$2_$0 = comparisonOperator_$2_$0_1 | comparisonOperator_$2_$0_2;
export type comparisonOperator_$2_$0_1 = commentLong;
export type comparisonOperator_$2_$0_2 = continueLine;
export type comparisonOperator_$2_$1 = comparisonOperator_$2_$1_1 | comparisonOperator_$2_$1_2;
export type comparisonOperator_$2_$1_1 = commentLong;
export type comparisonOperator_$2_$1_2 = continueLine;
export class comparisonOperator_$3 {
    public kind: ASTKinds.comparisonOperator_$3 = ASTKinds.comparisonOperator_$3;
    public c1: comparisonOperator_$3_$0[];
    public c2: comparisonOperator_$3_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: comparisonOperator_$3_$0[], c2: comparisonOperator_$3_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\<\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type comparisonOperator_$3_$0 = comparisonOperator_$3_$0_1 | comparisonOperator_$3_$0_2;
export type comparisonOperator_$3_$0_1 = commentLong;
export type comparisonOperator_$3_$0_2 = continueLine;
export type comparisonOperator_$3_$1 = comparisonOperator_$3_$1_1 | comparisonOperator_$3_$1_2;
export type comparisonOperator_$3_$1_1 = commentLong;
export type comparisonOperator_$3_$1_2 = continueLine;
export class comparisonOperator_$4 {
    public kind: ASTKinds.comparisonOperator_$4 = ASTKinds.comparisonOperator_$4;
    public c1: comparisonOperator_$4_$0[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: comparisonOperator_$4_$0[]){
        this.c1 = c1;
        this.body = ((): string => {
        return '\<';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1];
                return filterOutContinueLines(raw);
        })();
    }
}
export type comparisonOperator_$4_$0 = comparisonOperator_$4_$0_1 | comparisonOperator_$4_$0_2;
export type comparisonOperator_$4_$0_1 = commentLong;
export type comparisonOperator_$4_$0_2 = continueLine;
export class comparisonOperator_$5 {
    public kind: ASTKinds.comparisonOperator_$5 = ASTKinds.comparisonOperator_$5;
    public c1: comparisonOperator_$5_$0[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: comparisonOperator_$5_$0[]){
        this.c1 = c1;
        this.body = ((): string => {
        return '\>';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1];
                return filterOutContinueLines(raw);
        })();
    }
}
export type comparisonOperator_$5_$0 = comparisonOperator_$5_$0_1 | comparisonOperator_$5_$0_2;
export type comparisonOperator_$5_$0_1 = commentLong;
export type comparisonOperator_$5_$0_2 = continueLine;
export class comparisonOperator_$6 {
    public kind: ASTKinds.comparisonOperator_$6 = ASTKinds.comparisonOperator_$6;
    public c1: comparisonOperator_$6_$0[];
    public c2: comparisonOperator_$6_$1[];
    public c3: comparisonOperator_$6_$2[];
    public c4: comparisonOperator_$6_$3[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: comparisonOperator_$6_$0[], c2: comparisonOperator_$6_$1[], c3: comparisonOperator_$6_$2[], c4: comparisonOperator_$6_$3[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.body = ((): string => {
        return '\_in\_';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4];
                return filterOutContinueLines(raw);
        })();
    }
}
export type comparisonOperator_$6_$0 = comparisonOperator_$6_$0_1 | comparisonOperator_$6_$0_2;
export type comparisonOperator_$6_$0_1 = commentLong;
export type comparisonOperator_$6_$0_2 = continueLine;
export type comparisonOperator_$6_$1 = comparisonOperator_$6_$1_1 | comparisonOperator_$6_$1_2;
export type comparisonOperator_$6_$1_1 = commentLong;
export type comparisonOperator_$6_$1_2 = continueLine;
export type comparisonOperator_$6_$2 = comparisonOperator_$6_$2_1 | comparisonOperator_$6_$2_2;
export type comparisonOperator_$6_$2_1 = commentLong;
export type comparisonOperator_$6_$2_2 = continueLine;
export type comparisonOperator_$6_$3 = comparisonOperator_$6_$3_1 | comparisonOperator_$6_$3_2;
export type comparisonOperator_$6_$3_1 = commentLong;
export type comparisonOperator_$6_$3_2 = continueLine;
export class comparisonOperator_$7 {
    public kind: ASTKinds.comparisonOperator_$7 = ASTKinds.comparisonOperator_$7;
    public c1: comparisonOperator_$7_$0[];
    public c2: comparisonOperator_$7_$1[];
    public c3: comparisonOperator_$7_$2[];
    public c4: comparisonOperator_$7_$3[];
    public c5: comparisonOperator_$7_$4[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: comparisonOperator_$7_$0[], c2: comparisonOperator_$7_$1[], c3: comparisonOperator_$7_$2[], c4: comparisonOperator_$7_$3[], c5: comparisonOperator_$7_$4[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.body = ((): string => {
        return '!\_in\_';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5];
                return filterOutContinueLines(raw);
        })();
    }
}
export type comparisonOperator_$7_$0 = comparisonOperator_$7_$0_1 | comparisonOperator_$7_$0_2;
export type comparisonOperator_$7_$0_1 = commentLong;
export type comparisonOperator_$7_$0_2 = continueLine;
export type comparisonOperator_$7_$1 = comparisonOperator_$7_$1_1 | comparisonOperator_$7_$1_2;
export type comparisonOperator_$7_$1_1 = commentLong;
export type comparisonOperator_$7_$1_2 = continueLine;
export type comparisonOperator_$7_$2 = comparisonOperator_$7_$2_1 | comparisonOperator_$7_$2_2;
export type comparisonOperator_$7_$2_1 = commentLong;
export type comparisonOperator_$7_$2_2 = continueLine;
export type comparisonOperator_$7_$3 = comparisonOperator_$7_$3_1 | comparisonOperator_$7_$3_2;
export type comparisonOperator_$7_$3_1 = commentLong;
export type comparisonOperator_$7_$3_2 = continueLine;
export type comparisonOperator_$7_$4 = comparisonOperator_$7_$4_1 | comparisonOperator_$7_$4_2;
export type comparisonOperator_$7_$4_1 = commentLong;
export type comparisonOperator_$7_$4_2 = continueLine;
export interface logicalConjunction {
    kind: ASTKinds.logicalConjunction;
    operand1: expr;
    spacesLhs: logicalConjunction_$0[];
    operator: logicalConjunctionOperator;
    spacesRhs: logicalConjunction_$1[];
    operand2: expr;
}
export type logicalConjunction_$0 = logicalConjunction_$0_1 | logicalConjunction_$0_2 | logicalConjunction_$0_3;
export type logicalConjunction_$0_1 = space;
export type logicalConjunction_$0_2 = commentLong;
export type logicalConjunction_$0_3 = continueLine;
export type logicalConjunction_$1 = logicalConjunction_$1_1 | logicalConjunction_$1_2 | logicalConjunction_$1_3;
export type logicalConjunction_$1_1 = space;
export type logicalConjunction_$1_2 = commentLong;
export type logicalConjunction_$1_3 = continueLine;
export type logicalConjunctionOperator = logicalConjunctionOperator_$0;
export class logicalConjunctionOperator_$0 {
    public kind: ASTKinds.logicalConjunctionOperator_$0 = ASTKinds.logicalConjunctionOperator_$0;
    public c1: logicalConjunctionOperator_$0_$0[];
    public c2: logicalConjunctionOperator_$0_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: logicalConjunctionOperator_$0_$0[], c2: logicalConjunctionOperator_$0_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\&\&';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type logicalConjunctionOperator_$0_$0 = logicalConjunctionOperator_$0_$0_1 | logicalConjunctionOperator_$0_$0_2;
export type logicalConjunctionOperator_$0_$0_1 = commentLong;
export type logicalConjunctionOperator_$0_$0_2 = continueLine;
export type logicalConjunctionOperator_$0_$1 = logicalConjunctionOperator_$0_$1_1 | logicalConjunctionOperator_$0_$1_2;
export type logicalConjunctionOperator_$0_$1_1 = commentLong;
export type logicalConjunctionOperator_$0_$1_2 = continueLine;
export interface logicalDisjunction {
    kind: ASTKinds.logicalDisjunction;
    operand1: expr;
    spacesLhs: logicalDisjunction_$0[];
    operator: logicalDisjunctionOperator;
    spacesRhs: logicalDisjunction_$1[];
    operand2: expr;
}
export type logicalDisjunction_$0 = logicalDisjunction_$0_1 | logicalDisjunction_$0_2 | logicalDisjunction_$0_3;
export type logicalDisjunction_$0_1 = space;
export type logicalDisjunction_$0_2 = commentLong;
export type logicalDisjunction_$0_3 = continueLine;
export type logicalDisjunction_$1 = logicalDisjunction_$1_1 | logicalDisjunction_$1_2 | logicalDisjunction_$1_3;
export type logicalDisjunction_$1_1 = space;
export type logicalDisjunction_$1_2 = commentLong;
export type logicalDisjunction_$1_3 = continueLine;
export type logicalDisjunctionOperator = logicalDisjunctionOperator_$0;
export class logicalDisjunctionOperator_$0 {
    public kind: ASTKinds.logicalDisjunctionOperator_$0 = ASTKinds.logicalDisjunctionOperator_$0;
    public c1: logicalDisjunctionOperator_$0_$0[];
    public c2: logicalDisjunctionOperator_$0_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: logicalDisjunctionOperator_$0_$0[], c2: logicalDisjunctionOperator_$0_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\|\|';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type logicalDisjunctionOperator_$0_$0 = logicalDisjunctionOperator_$0_$0_1 | logicalDisjunctionOperator_$0_$0_2;
export type logicalDisjunctionOperator_$0_$0_1 = commentLong;
export type logicalDisjunctionOperator_$0_$0_2 = continueLine;
export type logicalDisjunctionOperator_$0_$1 = logicalDisjunctionOperator_$0_$1_1 | logicalDisjunctionOperator_$0_$1_2;
export type logicalDisjunctionOperator_$0_$1_1 = commentLong;
export type logicalDisjunctionOperator_$0_$1_2 = continueLine;
export interface substitution {
    kind: ASTKinds.substitution;
    operand1: substitution_$0;
    spacesLhs: substitution_$1[];
    operator: substitutionOperator;
    spacesRhs: substitution_$2[];
    operand2: expr;
}
export type substitution_$0 = substitution_$0_1 | substitution_$0_2;
export type substitution_$0_1 = arrayCall;
export type substitution_$0_2 = variable;
export type substitution_$1 = substitution_$1_1 | substitution_$1_2 | substitution_$1_3;
export type substitution_$1_1 = space;
export type substitution_$1_2 = commentLong;
export type substitution_$1_3 = continueLine;
export type substitution_$2 = substitution_$2_1 | substitution_$2_2 | substitution_$2_3;
export type substitution_$2_1 = space;
export type substitution_$2_2 = commentLong;
export type substitution_$2_3 = continueLine;
export type substitutionOperator = substitutionOperator_1 | substitutionOperator_2;
export type substitutionOperator_1 = substitutionOperator_$0;
export type substitutionOperator_2 = substitutionOperator_$1;
export class substitutionOperator_$0 {
    public kind: ASTKinds.substitutionOperator_$0 = ASTKinds.substitutionOperator_$0;
    public c1: substitutionOperator_$0_$0[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: substitutionOperator_$0_$0[]){
        this.c1 = c1;
        this.body = ((): string => {
        return '\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1];
                return filterOutContinueLines(raw);
        })();
    }
}
export type substitutionOperator_$0_$0 = substitutionOperator_$0_$0_1 | substitutionOperator_$0_$0_2;
export type substitutionOperator_$0_$0_1 = commentLong;
export type substitutionOperator_$0_$0_2 = continueLine;
export class substitutionOperator_$1 {
    public kind: ASTKinds.substitutionOperator_$1 = ASTKinds.substitutionOperator_$1;
    public c1: substitutionOperator_$1_$0[];
    public c2: substitutionOperator_$1_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: substitutionOperator_$1_$0[], c2: substitutionOperator_$1_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\:\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type substitutionOperator_$1_$0 = substitutionOperator_$1_$0_1 | substitutionOperator_$1_$0_2;
export type substitutionOperator_$1_$0_1 = commentLong;
export type substitutionOperator_$1_$0_2 = continueLine;
export type substitutionOperator_$1_$1 = substitutionOperator_$1_$1_1 | substitutionOperator_$1_$1_2;
export type substitutionOperator_$1_$1_1 = commentLong;
export type substitutionOperator_$1_$1_2 = continueLine;
export interface substitutionOperation {
    kind: ASTKinds.substitutionOperation;
    operand1: substitutionOperation_$0;
    spacesLhs: substitutionOperation_$1[];
    operator: substitutionOperationOperator;
    spacesRhs: substitutionOperation_$2[];
    operand2: expr;
}
export type substitutionOperation_$0 = substitutionOperation_$0_1 | substitutionOperation_$0_2;
export type substitutionOperation_$0_1 = arrayCall;
export type substitutionOperation_$0_2 = variable;
export type substitutionOperation_$1 = substitutionOperation_$1_1 | substitutionOperation_$1_2 | substitutionOperation_$1_3;
export type substitutionOperation_$1_1 = space;
export type substitutionOperation_$1_2 = commentLong;
export type substitutionOperation_$1_3 = continueLine;
export type substitutionOperation_$2 = substitutionOperation_$2_1 | substitutionOperation_$2_2 | substitutionOperation_$2_3;
export type substitutionOperation_$2_1 = space;
export type substitutionOperation_$2_2 = commentLong;
export type substitutionOperation_$2_3 = continueLine;
export type substitutionOperationOperator = substitutionOperationOperator_1 | substitutionOperationOperator_2 | substitutionOperationOperator_3 | substitutionOperationOperator_4 | substitutionOperationOperator_5 | substitutionOperationOperator_6 | substitutionOperationOperator_7 | substitutionOperationOperator_8 | substitutionOperationOperator_9 | substitutionOperationOperator_10 | substitutionOperationOperator_11;
export type substitutionOperationOperator_1 = substitutionOperationOperator_$0;
export type substitutionOperationOperator_2 = substitutionOperationOperator_$1;
export type substitutionOperationOperator_3 = substitutionOperationOperator_$2;
export type substitutionOperationOperator_4 = substitutionOperationOperator_$3;
export type substitutionOperationOperator_5 = substitutionOperationOperator_$4;
export type substitutionOperationOperator_6 = substitutionOperationOperator_$5;
export type substitutionOperationOperator_7 = substitutionOperationOperator_$6;
export type substitutionOperationOperator_8 = substitutionOperationOperator_$7;
export type substitutionOperationOperator_9 = substitutionOperationOperator_$8;
export type substitutionOperationOperator_10 = substitutionOperationOperator_$9;
export type substitutionOperationOperator_11 = substitutionOperationOperator_$10;
export class substitutionOperationOperator_$0 {
    public kind: ASTKinds.substitutionOperationOperator_$0 = ASTKinds.substitutionOperationOperator_$0;
    public c1: substitutionOperationOperator_$0_$0[];
    public c2: substitutionOperationOperator_$0_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: substitutionOperationOperator_$0_$0[], c2: substitutionOperationOperator_$0_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\+\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type substitutionOperationOperator_$0_$0 = substitutionOperationOperator_$0_$0_1 | substitutionOperationOperator_$0_$0_2;
export type substitutionOperationOperator_$0_$0_1 = commentLong;
export type substitutionOperationOperator_$0_$0_2 = continueLine;
export type substitutionOperationOperator_$0_$1 = substitutionOperationOperator_$0_$1_1 | substitutionOperationOperator_$0_$1_2;
export type substitutionOperationOperator_$0_$1_1 = commentLong;
export type substitutionOperationOperator_$0_$1_2 = continueLine;
export class substitutionOperationOperator_$1 {
    public kind: ASTKinds.substitutionOperationOperator_$1 = ASTKinds.substitutionOperationOperator_$1;
    public c1: substitutionOperationOperator_$1_$0[];
    public c2: substitutionOperationOperator_$1_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: substitutionOperationOperator_$1_$0[], c2: substitutionOperationOperator_$1_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\-\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type substitutionOperationOperator_$1_$0 = substitutionOperationOperator_$1_$0_1 | substitutionOperationOperator_$1_$0_2;
export type substitutionOperationOperator_$1_$0_1 = commentLong;
export type substitutionOperationOperator_$1_$0_2 = continueLine;
export type substitutionOperationOperator_$1_$1 = substitutionOperationOperator_$1_$1_1 | substitutionOperationOperator_$1_$1_2;
export type substitutionOperationOperator_$1_$1_1 = commentLong;
export type substitutionOperationOperator_$1_$1_2 = continueLine;
export class substitutionOperationOperator_$2 {
    public kind: ASTKinds.substitutionOperationOperator_$2 = ASTKinds.substitutionOperationOperator_$2;
    public c1: substitutionOperationOperator_$2_$0[];
    public c2: substitutionOperationOperator_$2_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: substitutionOperationOperator_$2_$0[], c2: substitutionOperationOperator_$2_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\*\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type substitutionOperationOperator_$2_$0 = substitutionOperationOperator_$2_$0_1 | substitutionOperationOperator_$2_$0_2;
export type substitutionOperationOperator_$2_$0_1 = commentLong;
export type substitutionOperationOperator_$2_$0_2 = continueLine;
export type substitutionOperationOperator_$2_$1 = substitutionOperationOperator_$2_$1_1 | substitutionOperationOperator_$2_$1_2;
export type substitutionOperationOperator_$2_$1_1 = commentLong;
export type substitutionOperationOperator_$2_$1_2 = continueLine;
export class substitutionOperationOperator_$3 {
    public kind: ASTKinds.substitutionOperationOperator_$3 = ASTKinds.substitutionOperationOperator_$3;
    public c1: substitutionOperationOperator_$3_$0[];
    public c2: substitutionOperationOperator_$3_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: substitutionOperationOperator_$3_$0[], c2: substitutionOperationOperator_$3_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\/\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type substitutionOperationOperator_$3_$0 = substitutionOperationOperator_$3_$0_1 | substitutionOperationOperator_$3_$0_2;
export type substitutionOperationOperator_$3_$0_1 = commentLong;
export type substitutionOperationOperator_$3_$0_2 = continueLine;
export type substitutionOperationOperator_$3_$1 = substitutionOperationOperator_$3_$1_1 | substitutionOperationOperator_$3_$1_2;
export type substitutionOperationOperator_$3_$1_1 = commentLong;
export type substitutionOperationOperator_$3_$1_2 = continueLine;
export class substitutionOperationOperator_$4 {
    public kind: ASTKinds.substitutionOperationOperator_$4 = ASTKinds.substitutionOperationOperator_$4;
    public c1: substitutionOperationOperator_$4_$0[];
    public c2: substitutionOperationOperator_$4_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: substitutionOperationOperator_$4_$0[], c2: substitutionOperationOperator_$4_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\%\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type substitutionOperationOperator_$4_$0 = substitutionOperationOperator_$4_$0_1 | substitutionOperationOperator_$4_$0_2;
export type substitutionOperationOperator_$4_$0_1 = commentLong;
export type substitutionOperationOperator_$4_$0_2 = continueLine;
export type substitutionOperationOperator_$4_$1 = substitutionOperationOperator_$4_$1_1 | substitutionOperationOperator_$4_$1_2;
export type substitutionOperationOperator_$4_$1_1 = commentLong;
export type substitutionOperationOperator_$4_$1_2 = continueLine;
export class substitutionOperationOperator_$5 {
    public kind: ASTKinds.substitutionOperationOperator_$5 = ASTKinds.substitutionOperationOperator_$5;
    public c1: substitutionOperationOperator_$5_$0[];
    public c2: substitutionOperationOperator_$5_$1[];
    public c3: substitutionOperationOperator_$5_$2[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: substitutionOperationOperator_$5_$0[], c2: substitutionOperationOperator_$5_$1[], c3: substitutionOperationOperator_$5_$2[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.body = ((): string => {
        return '\+\:\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3];
                return filterOutContinueLines(raw);
        })();
    }
}
export type substitutionOperationOperator_$5_$0 = substitutionOperationOperator_$5_$0_1 | substitutionOperationOperator_$5_$0_2;
export type substitutionOperationOperator_$5_$0_1 = commentLong;
export type substitutionOperationOperator_$5_$0_2 = continueLine;
export type substitutionOperationOperator_$5_$1 = substitutionOperationOperator_$5_$1_1 | substitutionOperationOperator_$5_$1_2;
export type substitutionOperationOperator_$5_$1_1 = commentLong;
export type substitutionOperationOperator_$5_$1_2 = continueLine;
export type substitutionOperationOperator_$5_$2 = substitutionOperationOperator_$5_$2_1 | substitutionOperationOperator_$5_$2_2;
export type substitutionOperationOperator_$5_$2_1 = commentLong;
export type substitutionOperationOperator_$5_$2_2 = continueLine;
export class substitutionOperationOperator_$6 {
    public kind: ASTKinds.substitutionOperationOperator_$6 = ASTKinds.substitutionOperationOperator_$6;
    public c1: substitutionOperationOperator_$6_$0[];
    public c2: substitutionOperationOperator_$6_$1[];
    public c3: substitutionOperationOperator_$6_$2[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: substitutionOperationOperator_$6_$0[], c2: substitutionOperationOperator_$6_$1[], c3: substitutionOperationOperator_$6_$2[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.body = ((): string => {
        return '\-\:\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3];
                return filterOutContinueLines(raw);
        })();
    }
}
export type substitutionOperationOperator_$6_$0 = substitutionOperationOperator_$6_$0_1 | substitutionOperationOperator_$6_$0_2;
export type substitutionOperationOperator_$6_$0_1 = commentLong;
export type substitutionOperationOperator_$6_$0_2 = continueLine;
export type substitutionOperationOperator_$6_$1 = substitutionOperationOperator_$6_$1_1 | substitutionOperationOperator_$6_$1_2;
export type substitutionOperationOperator_$6_$1_1 = commentLong;
export type substitutionOperationOperator_$6_$1_2 = continueLine;
export type substitutionOperationOperator_$6_$2 = substitutionOperationOperator_$6_$2_1 | substitutionOperationOperator_$6_$2_2;
export type substitutionOperationOperator_$6_$2_1 = commentLong;
export type substitutionOperationOperator_$6_$2_2 = continueLine;
export class substitutionOperationOperator_$7 {
    public kind: ASTKinds.substitutionOperationOperator_$7 = ASTKinds.substitutionOperationOperator_$7;
    public c1: substitutionOperationOperator_$7_$0[];
    public c2: substitutionOperationOperator_$7_$1[];
    public c3: substitutionOperationOperator_$7_$2[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: substitutionOperationOperator_$7_$0[], c2: substitutionOperationOperator_$7_$1[], c3: substitutionOperationOperator_$7_$2[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.body = ((): string => {
        return '\*\:\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3];
                return filterOutContinueLines(raw);
        })();
    }
}
export type substitutionOperationOperator_$7_$0 = substitutionOperationOperator_$7_$0_1 | substitutionOperationOperator_$7_$0_2;
export type substitutionOperationOperator_$7_$0_1 = commentLong;
export type substitutionOperationOperator_$7_$0_2 = continueLine;
export type substitutionOperationOperator_$7_$1 = substitutionOperationOperator_$7_$1_1 | substitutionOperationOperator_$7_$1_2;
export type substitutionOperationOperator_$7_$1_1 = commentLong;
export type substitutionOperationOperator_$7_$1_2 = continueLine;
export type substitutionOperationOperator_$7_$2 = substitutionOperationOperator_$7_$2_1 | substitutionOperationOperator_$7_$2_2;
export type substitutionOperationOperator_$7_$2_1 = commentLong;
export type substitutionOperationOperator_$7_$2_2 = continueLine;
export class substitutionOperationOperator_$8 {
    public kind: ASTKinds.substitutionOperationOperator_$8 = ASTKinds.substitutionOperationOperator_$8;
    public c1: substitutionOperationOperator_$8_$0[];
    public c2: substitutionOperationOperator_$8_$1[];
    public c3: substitutionOperationOperator_$8_$2[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: substitutionOperationOperator_$8_$0[], c2: substitutionOperationOperator_$8_$1[], c3: substitutionOperationOperator_$8_$2[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.body = ((): string => {
        return '\/\:\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3];
                return filterOutContinueLines(raw);
        })();
    }
}
export type substitutionOperationOperator_$8_$0 = substitutionOperationOperator_$8_$0_1 | substitutionOperationOperator_$8_$0_2;
export type substitutionOperationOperator_$8_$0_1 = commentLong;
export type substitutionOperationOperator_$8_$0_2 = continueLine;
export type substitutionOperationOperator_$8_$1 = substitutionOperationOperator_$8_$1_1 | substitutionOperationOperator_$8_$1_2;
export type substitutionOperationOperator_$8_$1_1 = commentLong;
export type substitutionOperationOperator_$8_$1_2 = continueLine;
export type substitutionOperationOperator_$8_$2 = substitutionOperationOperator_$8_$2_1 | substitutionOperationOperator_$8_$2_2;
export type substitutionOperationOperator_$8_$2_1 = commentLong;
export type substitutionOperationOperator_$8_$2_2 = continueLine;
export class substitutionOperationOperator_$9 {
    public kind: ASTKinds.substitutionOperationOperator_$9 = ASTKinds.substitutionOperationOperator_$9;
    public c1: substitutionOperationOperator_$9_$0[];
    public c2: substitutionOperationOperator_$9_$1[];
    public c3: substitutionOperationOperator_$9_$2[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: substitutionOperationOperator_$9_$0[], c2: substitutionOperationOperator_$9_$1[], c3: substitutionOperationOperator_$9_$2[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.body = ((): string => {
        return '\%\:\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3];
                return filterOutContinueLines(raw);
        })();
    }
}
export type substitutionOperationOperator_$9_$0 = substitutionOperationOperator_$9_$0_1 | substitutionOperationOperator_$9_$0_2;
export type substitutionOperationOperator_$9_$0_1 = commentLong;
export type substitutionOperationOperator_$9_$0_2 = continueLine;
export type substitutionOperationOperator_$9_$1 = substitutionOperationOperator_$9_$1_1 | substitutionOperationOperator_$9_$1_2;
export type substitutionOperationOperator_$9_$1_1 = commentLong;
export type substitutionOperationOperator_$9_$1_2 = continueLine;
export type substitutionOperationOperator_$9_$2 = substitutionOperationOperator_$9_$2_1 | substitutionOperationOperator_$9_$2_2;
export type substitutionOperationOperator_$9_$2_1 = commentLong;
export type substitutionOperationOperator_$9_$2_2 = continueLine;
export class substitutionOperationOperator_$10 {
    public kind: ASTKinds.substitutionOperationOperator_$10 = ASTKinds.substitutionOperationOperator_$10;
    public c1: substitutionOperationOperator_$10_$0[];
    public c2: substitutionOperationOperator_$10_$1[];
    public body: string;
    public comments: commentLong[][];
    constructor(c1: substitutionOperationOperator_$10_$0[], c2: substitutionOperationOperator_$10_$1[]){
        this.c1 = c1;
        this.c2 = c2;
        this.body = ((): string => {
        return '\,\=';
        })();
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2];
                return filterOutContinueLines(raw);
        })();
    }
}
export type substitutionOperationOperator_$10_$0 = substitutionOperationOperator_$10_$0_1 | substitutionOperationOperator_$10_$0_2;
export type substitutionOperationOperator_$10_$0_1 = commentLong;
export type substitutionOperationOperator_$10_$0_2 = continueLine;
export type substitutionOperationOperator_$10_$1 = substitutionOperationOperator_$10_$1_1 | substitutionOperationOperator_$10_$1_2;
export type substitutionOperationOperator_$10_$1_1 = commentLong;
export type substitutionOperationOperator_$10_$1_2 = continueLine;
export class commaOperation {
    public kind: ASTKinds.commaOperation = ASTKinds.commaOperation;
    public head: Nullable<expr>;
    public bodyRaw: commaOperation_$0[];
    public operands: (expr | null)[];
    public comments: commentLong[][];
    constructor(head: Nullable<expr>, bodyRaw: commaOperation_$0[]){
        this.head = head;
        this.bodyRaw = bodyRaw;
        this.operands = ((): (expr | null)[] => {
        const exprs = bodyRaw.map((b) => [b.expr]);
        const h = [head];
        return [h, ...exprs].flat();
        })();
        this.comments = ((): commentLong[][] => {
        const raw = bodyRaw.flatMap((b) => [b.spacesLhs, b.spacesRhs]);
        return raw.map((t) => {
            return t.flatMap((c) => {
                if (typeof (c) === "string") {
                    return [];
                }
                if (c.kind === ASTKinds.continueLine) {
                    return [];
                }
                return [c];
            });
        });
        })();
    }
}
export interface commaOperation_$0 {
    kind: ASTKinds.commaOperation_$0;
    spacesLhs: spaceOrContinueLineOrCommentLong[];
    expr: Nullable<expr>;
    spacesRhs: spaceOrContinueLineOrCommentLong[];
}
export interface arrayCall {
    kind: ASTKinds.arrayCall;
    target: expr;
    spacesLhs: arrayCall_$0[];
    call: Nullable<expr>;
    spacesRhs: arrayCall_$1[];
}
export type arrayCall_$0 = arrayCall_$0_1 | arrayCall_$0_2 | arrayCall_$0_3;
export type arrayCall_$0_1 = space;
export type arrayCall_$0_2 = commentLong;
export type arrayCall_$0_3 = continueLine;
export type arrayCall_$1 = arrayCall_$1_1 | arrayCall_$1_2 | arrayCall_$1_3;
export type arrayCall_$1_1 = space;
export type arrayCall_$1_2 = commentLong;
export type arrayCall_$1_3 = continueLine;
export interface functionCall {
    kind: ASTKinds.functionCall;
    target: identifer;
    spacesLhs: functionCall_$0[];
    args: Nullable<expr>;
    spacesRhs: functionCall_$1[];
}
export type functionCall_$0 = functionCall_$0_1 | functionCall_$0_2 | functionCall_$0_3;
export type functionCall_$0_1 = space;
export type functionCall_$0_2 = commentLong;
export type functionCall_$0_3 = continueLine;
export type functionCall_$1 = functionCall_$1_1 | functionCall_$1_2 | functionCall_$1_3;
export type functionCall_$1_1 = space;
export type functionCall_$1_2 = commentLong;
export type functionCall_$1_3 = continueLine;
export interface signed {
    kind: ASTKinds.signed;
    operator: signed_$0;
    operand: expr;
}
export type signed_$0 = signed_$0_1 | signed_$0_2;
export type signed_$0_1 = string;
export type signed_$0_2 = string;
export type variable = variable_1 | variable_2;
export type variable_1 = identifer;
export type variable_2 = variableLocal;
export class identifer {
    public kind: ASTKinds.identifer = ASTKinds.identifer;
    public head: identiferHeadCharacter;
    public bodyRaw: identiferBodySentence[];
    public name: string;
    constructor(head: identiferHeadCharacter, bodyRaw: identiferBodySentence[]){
        this.head = head;
        this.bodyRaw = bodyRaw;
        this.name = ((): string => {
        const target = [head, ...bodyRaw];
                return joinString(target);
        })();
    }
}
export class variableLocal {
    public kind: ASTKinds.variableLocal = ASTKinds.variableLocal;
    public spaces: continueLineOrCommentLong[];
    public head: identiferHeadCharacter;
    public bodyRaw: identiferBodySentence[];
    public name: string;
    constructor(spaces: continueLineOrCommentLong[], head: identiferHeadCharacter, bodyRaw: identiferBodySentence[]){
        this.spaces = spaces;
        this.head = head;
        this.bodyRaw = bodyRaw;
        this.name = ((): string => {
        const target = ['_', head, ...bodyRaw];
          return joinString(target);
        })();
    }
}
export type literal = literal_1 | literal_2 | literal_3 | literal_4 | literal_5 | literal_6;
export type literal_1 = heredoc;
export type literal_2 = heredocRaw;
export type literal_3 = literalString;
export type literal_4 = literalStringRaw;
export type literal_5 = real;
export type literal_6 = int;
export class heredoc {
    public kind: ASTKinds.heredoc = ASTKinds.heredoc;
    public bodyRaw: heredocInner[];
    public body: string;
    constructor(bodyRaw: heredocInner[]){
        this.bodyRaw = bodyRaw;
        this.body = ((): string => {
        const characters = bodyRaw.filter((b) => b.c !== undefined).map((b) => b.c);
        return joinString(characters);
        })();
    }
}
export type heredocInner = heredocInner_1 | heredocInner_2 | heredocInner_3;
export interface heredocInner_1 {
    kind: ASTKinds.heredocInner_1;
    c: string;
}
export interface heredocInner_2 {
    kind: ASTKinds.heredocInner_2;
    c: string;
}
export interface heredocInner_3 {
    kind: ASTKinds.heredocInner_3;
    c: string;
}
export class heredocRaw {
    public kind: ASTKinds.heredocRaw = ASTKinds.heredocRaw;
    public bodyRaw: heredocRawInner[];
    public body: string;
    constructor(bodyRaw: heredocRawInner[]){
        this.bodyRaw = bodyRaw;
        this.body = ((): string => {
        const characters = bodyRaw.filter((b) => b.c !== undefined).map((b) => b.c);
        return joinString(characters);
        })();
    }
}
export type heredocRawInner = heredocRawInner_1 | heredocRawInner_2 | heredocRawInner_3;
export interface heredocRawInner_1 {
    kind: ASTKinds.heredocRawInner_1;
    c: string;
}
export interface heredocRawInner_2 {
    kind: ASTKinds.heredocRawInner_2;
    c: string;
}
export interface heredocRawInner_3 {
    kind: ASTKinds.heredocRawInner_3;
    c: string;
}
export class literalString {
    public kind: ASTKinds.literalString = ASTKinds.literalString;
    public bodyRaw: literalStringInner[];
    public body: string;
    constructor(bodyRaw: literalStringInner[]){
        this.bodyRaw = bodyRaw;
        this.body = ((): string => {
        const characters = bodyRaw.filter((b) => typeof(b) === "string");
        return joinString(characters);
        })();
    }
}
export type literalStringInner = literalStringInner_1 | literalStringInner_2 | literalStringInner_3 | literalStringInner_4;
export type literalStringInner_1 = continueLine;
export type literalStringInner_2 = newLine;
export type literalStringInner_3 = string;
export type literalStringInner_4 = string;
export class literalStringRaw {
    public kind: ASTKinds.literalStringRaw = ASTKinds.literalStringRaw;
    public bodyRaw: literalStringRawInner[];
    public body: string;
    constructor(bodyRaw: literalStringRawInner[]){
        this.bodyRaw = bodyRaw;
        this.body = ((): string => {
        const characters = bodyRaw.filter((b) => typeof(b) === "string");
        return joinString(characters);
        })();
    }
}
export type literalStringRawInner = literalStringRawInner_1 | literalStringRawInner_2 | literalStringRawInner_3 | literalStringRawInner_4;
export type literalStringRawInner_1 = continueLine;
export type literalStringRawInner_2 = newLine;
export type literalStringRawInner_3 = string;
export type literalStringRawInner_4 = string;
export class real {
    public kind: ASTKinds.real = ASTKinds.real;
    public sign: Nullable<real_$0>;
    public head: string;
    public integerPart: int_x10Inner[];
    public fractionalPart: int_x10Inner[];
    public str: string;
    public value: number;
    constructor(sign: Nullable<real_$0>, head: string, integerPart: int_x10Inner[], fractionalPart: int_x10Inner[]){
        this.sign = sign;
        this.head = head;
        this.integerPart = integerPart;
        this.fractionalPart = fractionalPart;
        this.str = ((): string => {
        return joinString([
            sign === null ? "" : sign,
            head,
            ...integerPart,
            '.',
            ...fractionalPart,
        ])
        })();
        this.value = ((): number => {
        return parseFloat(this.str);
        })();
    }
}
export type real_$0 = real_$0_1 | real_$0_2;
export type real_$0_1 = string;
export type real_$0_2 = string;
export type int = int_1 | int_2 | int_3;
export type int_1 = int_x2;
export type int_2 = int_x16;
export type int_3 = int_x10;
export class int_x10 {
    public kind: ASTKinds.int_x10 = ASTKinds.int_x10;
    public sign: Nullable<int_x10_$0>;
    public head: string;
    public bodyRaw: int_x10Inner[];
    public str: string;
    public value: number;
    constructor(sign: Nullable<int_x10_$0>, head: string, bodyRaw: int_x10Inner[]){
        this.sign = sign;
        this.head = head;
        this.bodyRaw = bodyRaw;
        this.str = ((): string => {
        return joinString([
            sign === null ? "" : sign,
            head,
            ...bodyRaw
        ]);
        })();
        this.value = ((): number => {
        return parseInt(this.str);
        })();
    }
}
export type int_x10_$0 = int_x10_$0_1 | int_x10_$0_2;
export type int_x10_$0_1 = string;
export type int_x10_$0_2 = string;
export type int_x10Inner = int_x10Inner_1 | int_x10Inner_2;
export type int_x10Inner_1 = continueLineOrCommentLong;
export type int_x10Inner_2 = string;
export class int_x2 {
    public kind: ASTKinds.int_x2 = ASTKinds.int_x2;
    public head: string;
    public bodyRaw: int_x2Inner[];
    public str: string;
    public value: number;
    constructor(head: string, bodyRaw: int_x2Inner[]){
        this.head = head;
        this.bodyRaw = bodyRaw;
        this.str = ((): string => {
        return joinString([head, ...bodyRaw]);
        })();
        this.value = ((): number => {
        return parseInt(joinString(bodyRaw), 2);
        })();
    }
}
export type int_x2Inner = int_x2Inner_1 | int_x2Inner_2;
export type int_x2Inner_1 = continueLineOrCommentLong;
export type int_x2Inner_2 = string;
export class int_x16 {
    public kind: ASTKinds.int_x16 = ASTKinds.int_x16;
    public head: string;
    public bodyRaw: int_x16Inner[];
    public str: string;
    public value: number;
    constructor(head: string, bodyRaw: int_x16Inner[]){
        this.head = head;
        this.bodyRaw = bodyRaw;
        this.str = ((): string => {
        return joinString([head, ...bodyRaw]);
        })();
        this.value = ((): number => {
        return parseInt(joinString(bodyRaw), 16);
        })();
    }
}
export type int_x16Inner = int_x16Inner_1 | int_x16Inner_2;
export type int_x16Inner_1 = continueLineOrCommentLong;
export type int_x16Inner_2 = string;
export type preprocess = preprocess_1 | preprocess_2;
export type preprocess_1 = preprocessGlobalDefine;
export type preprocess_2 = preprocessDefine;
export class preprocessGlobalDefine {
    public kind: ASTKinds.preprocessGlobalDefine = ASTKinds.preprocessGlobalDefine;
    public nameRaw: preprocessGlobalDefineName;
    public spacesLhs: spaceOrContinueLineOrCommentLong[];
    public beforeRaw: preprocessBeforeCharacterSentence[];
    public spacesRhs: spaceOrContinueLineOrCommentLong[];
    public afterRaw: preprocessAfterCharacterSentence[];
    public newLine: newLine;
    public before: string;
    public after: string;
    constructor(nameRaw: preprocessGlobalDefineName, spacesLhs: spaceOrContinueLineOrCommentLong[], beforeRaw: preprocessBeforeCharacterSentence[], spacesRhs: spaceOrContinueLineOrCommentLong[], afterRaw: preprocessAfterCharacterSentence[], newLine: newLine){
        this.nameRaw = nameRaw;
        this.spacesLhs = spacesLhs;
        this.beforeRaw = beforeRaw;
        this.spacesRhs = spacesRhs;
        this.afterRaw = afterRaw;
        this.newLine = newLine;
        this.before = ((): string => {
        return joinString(beforeRaw);
        })();
        this.after = ((): string => {
        return joinString(afterRaw);
        })();
    }
}
export class preprocessGlobalDefineName {
    public kind: ASTKinds.preprocessGlobalDefineName = ASTKinds.preprocessGlobalDefineName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public c6: continueLineOrCommentLong[];
    public c7: continueLineOrCommentLong[];
    public c8: continueLineOrCommentLong[];
    public c9: continueLineOrCommentLong[];
    public c10: continueLineOrCommentLong[];
    public c11: continueLineOrCommentLong[];
    public c12: continueLineOrCommentLong[];
    public c13: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[], c6: continueLineOrCommentLong[], c7: continueLineOrCommentLong[], c8: continueLineOrCommentLong[], c9: continueLineOrCommentLong[], c10: continueLineOrCommentLong[], c11: continueLineOrCommentLong[], c12: continueLineOrCommentLong[], c13: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.c7 = c7;
        this.c8 = c8;
        this.c9 = c9;
        this.c10 = c10;
        this.c11 = c11;
        this.c12 = c12;
        this.c13 = c13;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13];
        return filterOutContinueLines(raw);
        })();
    }
}
export class preprocessDefine {
    public kind: ASTKinds.preprocessDefine = ASTKinds.preprocessDefine;
    public nameRaw: preprocessDefineName;
    public spacesLhs: spaceOrContinueLineOrCommentLong[];
    public beforeRaw: preprocessBeforeCharacterSentence[];
    public spacesRhs: spaceOrContinueLineOrCommentLong[];
    public afterRaw: preprocessAfterCharacterSentence[];
    public newLine: newLine;
    public before: string;
    public after: string;
    constructor(nameRaw: preprocessDefineName, spacesLhs: spaceOrContinueLineOrCommentLong[], beforeRaw: preprocessBeforeCharacterSentence[], spacesRhs: spaceOrContinueLineOrCommentLong[], afterRaw: preprocessAfterCharacterSentence[], newLine: newLine){
        this.nameRaw = nameRaw;
        this.spacesLhs = spacesLhs;
        this.beforeRaw = beforeRaw;
        this.spacesRhs = spacesRhs;
        this.afterRaw = afterRaw;
        this.newLine = newLine;
        this.before = ((): string => {
        return joinString(beforeRaw);
        })();
        this.after = ((): string => {
        return joinString(afterRaw);
        })();
    }
}
export class preprocessDefineName {
    public kind: ASTKinds.preprocessDefineName = ASTKinds.preprocessDefineName;
    public c1: continueLineOrCommentLong[];
    public c2: continueLineOrCommentLong[];
    public c3: continueLineOrCommentLong[];
    public c4: continueLineOrCommentLong[];
    public c5: continueLineOrCommentLong[];
    public c6: continueLineOrCommentLong[];
    public c7: continueLineOrCommentLong[];
    public comments: commentLong[][];
    constructor(c1: continueLineOrCommentLong[], c2: continueLineOrCommentLong[], c3: continueLineOrCommentLong[], c4: continueLineOrCommentLong[], c5: continueLineOrCommentLong[], c6: continueLineOrCommentLong[], c7: continueLineOrCommentLong[]){
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.c7 = c7;
        this.comments = ((): commentLong[][] => {
        const raw = [c1, c2, c3, c4, c5, c6, c7];
        return filterOutContinueLines(raw);
        })();
    }
}
export class maybePreprocess {
    public kind: ASTKinds.maybePreprocess = ASTKinds.maybePreprocess;
    public bodyRaw: preprocessBeforeCharacterSentence[];
    public comments: commentLong[];
    public body: string;
    constructor(bodyRaw: preprocessBeforeCharacterSentence[]){
        this.bodyRaw = bodyRaw;
        this.comments = ((): commentLong[] => {
        return bodyRaw.flatMap((b) => {
            if (typeof (b) === "string") {
                return [];
            }
            if (b.kind === ASTKinds.continueLine) {
                return [];
            }
            return [b];
        });
        })();
        this.body = ((): string => {
        return joinString(bodyRaw);
        })();
    }
}
export type preprocessBeforeCharacterSentence = preprocessBeforeCharacterSentence_1 | preprocessBeforeCharacterSentence_2;
export type preprocessBeforeCharacterSentence_1 = continueLineOrCommentLong;
export type preprocessBeforeCharacterSentence_2 = string;
export type preprocessAfterCharacterSentence = preprocessAfterCharacterSentence_1 | preprocessAfterCharacterSentence_2;
export type preprocessAfterCharacterSentence_1 = continueLineOrCommentLong;
export type preprocessAfterCharacterSentence_2 = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$expr$memo.clear();
    }
    protected $scope$expr$memo: Map<number, [Nullable<expr>, PosInfo]> = new Map();
    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {
        return this.run<start>($$dpth,
            () => {
                let $scope$contents: Nullable<content[]>;
                let $$res: Nullable<start> = null;
                if (true
                    && ($scope$contents = this.loop<content>(() => this.matchcontent($$dpth + 1, $$cr), true)) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.start, contents: $scope$contents};
                }
                return $$res;
            });
    }
    public matchcontent($$dpth: number, $$cr?: ErrorTracker): Nullable<content> {
        return this.choice<content>([
            () => this.matchcontent_1($$dpth + 1, $$cr),
            () => this.matchcontent_2($$dpth + 1, $$cr),
            () => this.matchcontent_3($$dpth + 1, $$cr),
            () => this.matchcontent_4($$dpth + 1, $$cr),
            () => this.matchcontent_5($$dpth + 1, $$cr),
            () => this.matchcontent_6($$dpth + 1, $$cr),
            () => this.matchcontent_7($$dpth + 1, $$cr),
        ]);
    }
    public matchcontent_1($$dpth: number, $$cr?: ErrorTracker): Nullable<content_1> {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    public matchcontent_2($$dpth: number, $$cr?: ErrorTracker): Nullable<content_2> {
        return this.matchsomeSpaces($$dpth + 1, $$cr);
    }
    public matchcontent_3($$dpth: number, $$cr?: ErrorTracker): Nullable<content_3> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcontent_4($$dpth: number, $$cr?: ErrorTracker): Nullable<content_4> {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    public matchcontent_5($$dpth: number, $$cr?: ErrorTracker): Nullable<content_5> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcontent_6($$dpth: number, $$cr?: ErrorTracker): Nullable<content_6> {
        return this.matchfunctionBlock($$dpth + 1, $$cr);
    }
    public matchcontent_7($$dpth: number, $$cr?: ErrorTracker): Nullable<content_7> {
        return this.matchpreprocess($$dpth + 1, $$cr);
    }
    public matchnewLine($$dpth: number, $$cr?: ErrorTracker): Nullable<newLine> {
        return this.run<newLine>($$dpth,
            () => {
                let $scope$newLine: Nullable<newLineBody>;
                let $scope$spaces: Nullable<space[]>;
                let $$res: Nullable<newLine> = null;
                if (true
                    && ($scope$newLine = this.matchnewLineBody($$dpth + 1, $$cr)) !== null
                    && ($scope$spaces = this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.newLine, newLine: $scope$newLine, spaces: $scope$spaces};
                }
                return $$res;
            });
    }
    public matchnewLineBody($$dpth: number, $$cr?: ErrorTracker): Nullable<newLineBody> {
        return this.choice<newLineBody>([
            () => this.matchnewLineBody_1($$dpth + 1, $$cr),
            () => this.matchnewLineBody_2($$dpth + 1, $$cr),
            () => this.matchnewLineBody_3($$dpth + 1, $$cr),
        ]);
    }
    public matchnewLineBody_1($$dpth: number, $$cr?: ErrorTracker): Nullable<newLineBody_1> {
        return this.regexAccept(String.raw`(?:\r\n)`, $$dpth + 1, $$cr);
    }
    public matchnewLineBody_2($$dpth: number, $$cr?: ErrorTracker): Nullable<newLineBody_2> {
        return this.regexAccept(String.raw`(?:\n)`, $$dpth + 1, $$cr);
    }
    public matchnewLineBody_3($$dpth: number, $$cr?: ErrorTracker): Nullable<newLineBody_3> {
        return this.regexAccept(String.raw`(?:\r)`, $$dpth + 1, $$cr);
    }
    public matchendOfLine($$dpth: number, $$cr?: ErrorTracker): Nullable<endOfLine> {
        return this.choice<endOfLine>([
            () => this.matchendOfLine_1($$dpth + 1, $$cr),
            () => this.matchendOfLine_2($$dpth + 1, $$cr),
        ]);
    }
    public matchendOfLine_1($$dpth: number, $$cr?: ErrorTracker): Nullable<endOfLine_1> {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    public matchendOfLine_2($$dpth: number, $$cr?: ErrorTracker): Nullable<endOfLine_2> {
        return this.match$EOF($$cr);
    }
    public matchspace($$dpth: number, $$cr?: ErrorTracker): Nullable<space> {
        return this.regexAccept(String.raw`(?:[ \t　])`, $$dpth + 1, $$cr);
    }
    public matchsomeSpaces($$dpth: number, $$cr?: ErrorTracker): Nullable<someSpaces> {
        return this.run<someSpaces>($$dpth,
            () => {
                let $scope$spaces: Nullable<space[]>;
                let $$res: Nullable<someSpaces> = null;
                if (true
                    && ($scope$spaces = this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = {kind: ASTKinds.someSpaces, spaces: $scope$spaces};
                }
                return $$res;
            });
    }
    public matchcommentLong($$dpth: number, $$cr?: ErrorTracker): Nullable<commentLong> {
        return this.run<commentLong>($$dpth,
            () => {
                let $scope$commentRaw: Nullable<commentLongBody[]>;
                let $$res: Nullable<commentLong> = null;
                if (true
                    && this.regexAccept(String.raw`(?:/\*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$commentRaw = this.loop<commentLongBody>(() => this.matchcommentLongBody($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\*/)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new commentLong($scope$commentRaw);
                }
                return $$res;
            });
    }
    public matchcommentLongBody($$dpth: number, $$cr?: ErrorTracker): Nullable<commentLongBody> {
        return this.choice<commentLongBody>([
            () => this.matchcommentLongBody_1($$dpth + 1, $$cr),
            () => this.matchcommentLongBody_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcommentLongBody_1($$dpth: number, $$cr?: ErrorTracker): Nullable<commentLongBody_1> {
        return this.run<commentLongBody_1>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<commentLongBody_1> = null;
                if (true
                    && ($scope$c = this.regexAccept(String.raw`(?:[\r\n])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.commentLongBody_1, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchcommentLongBody_2($$dpth: number, $$cr?: ErrorTracker): Nullable<commentLongBody_2> {
        return this.run<commentLongBody_2>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<commentLongBody_2> = null;
                if (true
                    && this.negate(() => this.regexAccept(String.raw`(?:\*/)`, $$dpth + 1, $$cr)) !== null
                    && ($scope$c = this.regexAccept(String.raw`(?:.)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.commentLongBody_2, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchcommentLine($$dpth: number, $$cr?: ErrorTracker): Nullable<commentLine> {
        return this.run<commentLine>($$dpth,
            () => {
                let $scope$spaces: Nullable<space[]>;
                let $scope$commentRaw: Nullable<string[]>;
                let $scope$endOfLine: Nullable<endOfLine>;
                let $$res: Nullable<commentLine> = null;
                if (true
                    && ($scope$spaces = this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?://)`, $$dpth + 1, $$cr) !== null
                    && ($scope$commentRaw = this.loop<string>(() => this.regexAccept(String.raw`(?:[^\r\n])`, $$dpth + 1, $$cr), true)) !== null
                    && ($scope$endOfLine = this.matchendOfLine($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.commentLine, spaces: $scope$spaces, commentRaw: $scope$commentRaw, endOfLine: $scope$endOfLine};
                }
                return $$res;
            });
    }
    public matchcontinueLine($$dpth: number, $$cr?: ErrorTracker): Nullable<continueLine> {
        return this.run<continueLine>($$dpth,
            () => {
                let $scope$newLine: Nullable<newLine>;
                let $$res: Nullable<continueLine> = null;
                if (true
                    && this.regexAccept(String.raw`(?:/)`, $$dpth + 1, $$cr) !== null
                    && ($scope$newLine = this.matchnewLine($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.continueLine, newLine: $scope$newLine};
                }
                return $$res;
            });
    }
    public matchcontinueLineOrCommentLong($$dpth: number, $$cr?: ErrorTracker): Nullable<continueLineOrCommentLong> {
        return this.choice<continueLineOrCommentLong>([
            () => this.matchcontinueLineOrCommentLong_1($$dpth + 1, $$cr),
            () => this.matchcontinueLineOrCommentLong_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcontinueLineOrCommentLong_1($$dpth: number, $$cr?: ErrorTracker): Nullable<continueLineOrCommentLong_1> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcontinueLineOrCommentLong_2($$dpth: number, $$cr?: ErrorTracker): Nullable<continueLineOrCommentLong_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchspaceOrContinueLineOrCommentLong($$dpth: number, $$cr?: ErrorTracker): Nullable<spaceOrContinueLineOrCommentLong> {
        return this.choice<spaceOrContinueLineOrCommentLong>([
            () => this.matchspaceOrContinueLineOrCommentLong_1($$dpth + 1, $$cr),
            () => this.matchspaceOrContinueLineOrCommentLong_2($$dpth + 1, $$cr),
            () => this.matchspaceOrContinueLineOrCommentLong_3($$dpth + 1, $$cr),
        ]);
    }
    public matchspaceOrContinueLineOrCommentLong_1($$dpth: number, $$cr?: ErrorTracker): Nullable<spaceOrContinueLineOrCommentLong_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchspaceOrContinueLineOrCommentLong_2($$dpth: number, $$cr?: ErrorTracker): Nullable<spaceOrContinueLineOrCommentLong_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchspaceOrContinueLineOrCommentLong_3($$dpth: number, $$cr?: ErrorTracker): Nullable<spaceOrContinueLineOrCommentLong_3> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchidentiferHeadCharacter($$dpth: number, $$cr?: ErrorTracker): Nullable<identiferHeadCharacter> {
        return this.regexAccept(String.raw`(?:[^ \t　!\'"#$%&\(\)\*\+\,\-/:;<\=>/?@\[\]\`{\|}0-9_\r\n])`, $$dpth + 1, $$cr);
    }
    public matchidentiferBodySentence($$dpth: number, $$cr?: ErrorTracker): Nullable<identiferBodySentence> {
        return this.choice<identiferBodySentence>([
            () => this.matchidentiferBodySentence_1($$dpth + 1, $$cr),
            () => this.matchidentiferBodySentence_2($$dpth + 1, $$cr),
        ]);
    }
    public matchidentiferBodySentence_1($$dpth: number, $$cr?: ErrorTracker): Nullable<identiferBodySentence_1> {
        return this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr);
    }
    public matchidentiferBodySentence_2($$dpth: number, $$cr?: ErrorTracker): Nullable<identiferBodySentence_2> {
        return this.matchidentiferBodyCharacter($$dpth + 1, $$cr);
    }
    public matchidentiferBodyCharacter($$dpth: number, $$cr?: ErrorTracker): Nullable<identiferBodyCharacter> {
        return this.regexAccept(String.raw`(?:[^ \t　!\'"#$%&\(\)\*\+\,\-/:;<\=>/?@\[\]\`{\|}\r\n])`, $$dpth + 1, $$cr);
    }
    public matchstatementSeparator($$dpth: number, $$cr?: ErrorTracker): Nullable<statementSeparator> {
        return this.run<statementSeparator>($$dpth,
            () => {
                let $scope$separator: Nullable<statementSeparatorBody>;
                let $$res: Nullable<statementSeparator> = null;
                if (true
                    && ($scope$separator = this.matchstatementSeparatorBody($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.statementSeparator, separator: $scope$separator};
                }
                return $$res;
            });
    }
    public matchstatementSeparatorBody($$dpth: number, $$cr?: ErrorTracker): Nullable<statementSeparatorBody> {
        return this.choice<statementSeparatorBody>([
            () => this.matchstatementSeparatorBody_1($$dpth + 1, $$cr),
            () => this.matchstatementSeparatorBody_2($$dpth + 1, $$cr),
            () => this.matchstatementSeparatorBody_3($$dpth + 1, $$cr),
        ]);
    }
    public matchstatementSeparatorBody_1($$dpth: number, $$cr?: ErrorTracker): Nullable<statementSeparatorBody_1> {
        return this.run<statementSeparatorBody_1>($$dpth,
            () => {
                let $$res: Nullable<statementSeparatorBody_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                    && ((this.matchnewLine($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.statementSeparatorBody_1, };
                }
                return $$res;
            });
    }
    public matchstatementSeparatorBody_2($$dpth: number, $$cr?: ErrorTracker): Nullable<statementSeparatorBody_2> {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    public matchstatementSeparatorBody_3($$dpth: number, $$cr?: ErrorTracker): Nullable<statementSeparatorBody_3> {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    public matchstatementTerminator($$dpth: number, $$cr?: ErrorTracker): Nullable<statementTerminator> {
        return this.choice<statementTerminator>([
            () => this.matchstatementTerminator_1($$dpth + 1, $$cr),
            () => this.matchstatementTerminator_2($$dpth + 1, $$cr),
        ]);
    }
    public matchstatementTerminator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<statementTerminator_1> {
        return this.run<statementTerminator_1>($$dpth,
            () => {
                let $scope$separator: Nullable<statementSeparator>;
                let $$res: Nullable<statementTerminator_1> = null;
                if (true
                    && ($scope$separator = this.matchstatementSeparator($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.statementTerminator_1, separator: $scope$separator};
                }
                return $$res;
            });
    }
    public matchstatementTerminator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<statementTerminator_2> {
        return this.matchstatementTerminatorBody($$dpth + 1, $$cr);
    }
    public matchstatementTerminatorBody($$dpth: number, $$cr?: ErrorTracker): Nullable<statementTerminatorBody> {
        return this.run<statementTerminatorBody>($$dpth,
            () => {
                let $$res: Nullable<statementTerminatorBody> = null;
                if (true
                    && this.noConsume<string>(() => this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.statementTerminatorBody, };
                }
                return $$res;
            });
    }
    public matchfunctionBlock($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock> {
        return this.run<functionBlock>($$dpth,
            () => {
                let $scope$name: Nullable<functionBlockName>;
                let $scope$spacesBeforeSelector: Nullable<functionBlock_$0[]>;
                let $scope$selector: Nullable<Nullable<functionBlockSelector>>;
                let $scope$spacesBeforeBody: Nullable<functionBlock_$1[]>;
                let $scope$open: Nullable<functionBlock_$2>;
                let $scope$blockInners: Nullable<blockInner[]>;
                let $scope$close: Nullable<functionBlock_$3>;
                let $$res: Nullable<functionBlock> = null;
                if (true
                    && ($scope$name = this.matchfunctionBlockName($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesBeforeSelector = this.loop<functionBlock_$0>(() => this.matchfunctionBlock_$0($$dpth + 1, $$cr), true)) !== null
                    && (($scope$selector = this.matchfunctionBlockSelector($$dpth + 1, $$cr)) || true)
                    && ($scope$spacesBeforeBody = this.loop<functionBlock_$1>(() => this.matchfunctionBlock_$1($$dpth + 1, $$cr), true)) !== null
                    && ($scope$open = this.matchfunctionBlock_$2($$dpth + 1, $$cr)) !== null
                    && ($scope$blockInners = this.loop<blockInner>(() => this.matchblockInner($$dpth + 1, $$cr), true)) !== null
                    && ($scope$close = this.matchfunctionBlock_$3($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.functionBlock, name: $scope$name, spacesBeforeSelector: $scope$spacesBeforeSelector, selector: $scope$selector, spacesBeforeBody: $scope$spacesBeforeBody, open: $scope$open, blockInners: $scope$blockInners, close: $scope$close};
                }
                return $$res;
            });
    }
    public matchfunctionBlock_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$0> {
        return this.choice<functionBlock_$0>([
            () => this.matchfunctionBlock_$0_1($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$0_2($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$0_3($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$0_4($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$0_5($$dpth + 1, $$cr),
        ]);
    }
    public matchfunctionBlock_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchfunctionBlock_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchfunctionBlock_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$0_3> {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    public matchfunctionBlock_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$0_4> {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    public matchfunctionBlock_$0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$0_5> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchfunctionBlock_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$1> {
        return this.choice<functionBlock_$1>([
            () => this.matchfunctionBlock_$1_1($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$1_2($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$1_3($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$1_4($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$1_5($$dpth + 1, $$cr),
        ]);
    }
    public matchfunctionBlock_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchfunctionBlock_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchfunctionBlock_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$1_3> {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    public matchfunctionBlock_$1_4($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$1_4> {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    public matchfunctionBlock_$1_5($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$1_5> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchfunctionBlock_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$2> {
        return this.choice<functionBlock_$2>([
            () => this.matchfunctionBlock_$2_1($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$2_2($$dpth + 1, $$cr),
        ]);
    }
    public matchfunctionBlock_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$2_1> {
        return this.regexAccept(String.raw`(?:{{CHAIN)`, $$dpth + 1, $$cr);
    }
    public matchfunctionBlock_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$2_2> {
        return this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr);
    }
    public matchfunctionBlock_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$3> {
        return this.choice<functionBlock_$3>([
            () => this.matchfunctionBlock_$3_1($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$3_2($$dpth + 1, $$cr),
        ]);
    }
    public matchfunctionBlock_$3_1($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$3_1> {
        return this.regexAccept(String.raw`(?:}}CHAIN)`, $$dpth + 1, $$cr);
    }
    public matchfunctionBlock_$3_2($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlock_$3_2> {
        return this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr);
    }
    public matchfunctionBlockName($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlockName> {
        return this.matchidentifer($$dpth + 1, $$cr);
    }
    public matchfunctionBlockSelector($$dpth: number, $$cr?: ErrorTracker): Nullable<functionBlockSelector> {
        return this.run<functionBlockSelector>($$dpth,
            () => {
                let $scope$spaceLhs: Nullable<spaceOrContinueLineOrCommentLong[]>;
                let $scope$spaceRhs: Nullable<spaceOrContinueLineOrCommentLong[]>;
                let $scope$selector: Nullable<Nullable<selector>>;
                let $$res: Nullable<functionBlockSelector> = null;
                if (true
                    && ($scope$spaceLhs = this.loop<spaceOrContinueLineOrCommentLong>(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && ($scope$spaceRhs = this.loop<spaceOrContinueLineOrCommentLong>(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && (($scope$selector = this.matchselector($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.functionBlockSelector, spaceLhs: $scope$spaceLhs, spaceRhs: $scope$spaceRhs, selector: $scope$selector};
                }
                return $$res;
            });
    }
    public matchselector($$dpth: number, $$cr?: ErrorTracker): Nullable<selector> {
        return this.run<selector>($$dpth,
            () => {
                let $scope$prefix: Nullable<Nullable<selectorPrefix>>;
                let $scope$main: Nullable<selectorMain>;
                let $scope$suffix: Nullable<Nullable<selectorSuffix>>;
                let $$res: Nullable<selector> = null;
                if (true
                    && (($scope$prefix = this.matchselectorPrefix($$dpth + 1, $$cr)) || true)
                    && ($scope$main = this.matchselectorMain($$dpth + 1, $$cr)) !== null
                    && (($scope$suffix = this.matchselectorSuffix($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.selector, prefix: $scope$prefix, main: $scope$main, suffix: $scope$suffix};
                }
                return $$res;
            });
    }
    public matchselectorPrefix($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorPrefix> {
        return this.run<selectorPrefix>($$dpth,
            () => {
                let $scope$nameRaw: Nullable<selectorPrefixName>;
                let $$res: Nullable<selectorPrefix> = null;
                if (true
                    && ($scope$nameRaw = this.matchselectorPrefixName($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:_)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.selectorPrefix, nameRaw: $scope$nameRaw};
                }
                return $$res;
            });
    }
    public matchselectorPrefixName($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorPrefixName> {
        return this.run<selectorPrefixName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<selectorPrefixName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:p)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new selectorPrefixName($scope$c1, $scope$c2, $scope$c3, $scope$c4);
                }
                return $$res;
            });
    }
    public matchselectorMain($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorMain> {
        return this.run<selectorMain>($$dpth,
            () => {
                let $scope$nameRaw: Nullable<selectorMainName>;
                let $$res: Nullable<selectorMain> = null;
                if (true
                    && ($scope$nameRaw = this.matchselectorMainName($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.selectorMain, nameRaw: $scope$nameRaw};
                }
                return $$res;
            });
    }
    public matchselectorMainName($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorMainName> {
        return this.choice<selectorMainName>([
            () => this.matchselectorMainName_1($$dpth + 1, $$cr),
            () => this.matchselectorMainName_2($$dpth + 1, $$cr),
            () => this.matchselectorMainName_3($$dpth + 1, $$cr),
            () => this.matchselectorMainName_4($$dpth + 1, $$cr),
            () => this.matchselectorMainName_5($$dpth + 1, $$cr),
            () => this.matchselectorMainName_6($$dpth + 1, $$cr),
            () => this.matchselectorMainName_7($$dpth + 1, $$cr),
        ]);
    }
    public matchselectorMainName_1($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorMainName_1> {
        return this.run<selectorMainName_1>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $scope$c6: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<selectorMainName_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:r)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:a)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:n)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:d)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:m)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c6 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new selectorMainName_1($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6);
                }
                return $$res;
            });
    }
    public matchselectorMainName_2($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorMainName_2> {
        return this.run<selectorMainName_2>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $scope$c6: Nullable<continueLineOrCommentLong[]>;
                let $scope$c7: Nullable<continueLineOrCommentLong[]>;
                let $scope$c8: Nullable<continueLineOrCommentLong[]>;
                let $scope$c9: Nullable<continueLineOrCommentLong[]>;
                let $scope$c10: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<selectorMainName_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:n)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:n)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:v)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c6 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:r)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c7 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c8 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:a)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c9 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:p)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c10 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new selectorMainName_2($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6, $scope$c7, $scope$c8, $scope$c9, $scope$c10);
                }
                return $$res;
            });
    }
    public matchselectorMainName_3($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorMainName_3> {
        return this.run<selectorMainName_3>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $scope$c6: Nullable<continueLineOrCommentLong[]>;
                let $scope$c7: Nullable<continueLineOrCommentLong[]>;
                let $scope$c8: Nullable<continueLineOrCommentLong[]>;
                let $scope$c9: Nullable<continueLineOrCommentLong[]>;
                let $scope$c10: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<selectorMainName_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:q)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:u)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:n)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c6 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:t)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c7 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:i)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c8 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:a)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c9 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c10 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new selectorMainName_3($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6, $scope$c7, $scope$c8, $scope$c9, $scope$c10);
                }
                return $$res;
            });
    }
    public matchselectorMainName_4($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorMainName_4> {
        return this.run<selectorMainName_4>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<selectorMainName_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:a)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:r)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:r)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:a)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:y)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new selectorMainName_4($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5);
                }
                return $$res;
            });
    }
    public matchselectorMainName_5($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorMainName_5> {
        return this.run<selectorMainName_5>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<selectorMainName_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:i)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:d)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new selectorMainName_5($scope$c1, $scope$c2, $scope$c3, $scope$c4);
                }
                return $$res;
            });
    }
    public matchselectorMainName_6($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorMainName_6> {
        return this.run<selectorMainName_6>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<selectorMainName_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:a)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new selectorMainName_6($scope$c1, $scope$c2, $scope$c3);
                }
                return $$res;
            });
    }
    public matchselectorMainName_7($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorMainName_7> {
        return this.run<selectorMainName_7>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<selectorMainName_7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:a)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:t)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new selectorMainName_7($scope$c1, $scope$c2, $scope$c3, $scope$c4);
                }
                return $$res;
            });
    }
    public matchselectorSuffix($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorSuffix> {
        return this.run<selectorSuffix>($$dpth,
            () => {
                let $scope$nameRaw: Nullable<selectorSuffixName>;
                let $$res: Nullable<selectorSuffix> = null;
                if (true
                    && this.regexAccept(String.raw`(?:_)`, $$dpth + 1, $$cr) !== null
                    && ($scope$nameRaw = this.matchselectorSuffixName($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.selectorSuffix, nameRaw: $scope$nameRaw};
                }
                return $$res;
            });
    }
    public matchselectorSuffixName($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorSuffixName> {
        return this.run<selectorSuffixName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<selectorSuffixName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:p)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new selectorSuffixName($scope$c1, $scope$c2, $scope$c3);
                }
                return $$res;
            });
    }
    public matchblock($$dpth: number, $$cr?: ErrorTracker): Nullable<block> {
        return this.run<block>($$dpth,
            () => {
                let $scope$spacesStart: Nullable<block_$0[]>;
                let $scope$selector: Nullable<Nullable<blockSelector>>;
                let $scope$spacesBeforeBlock: Nullable<block_$1[]>;
                let $scope$blockInners: Nullable<blockInner[]>;
                let $scope$spacesEnd: Nullable<block_$2[]>;
                let $$res: Nullable<block> = null;
                if (true
                    && ($scope$spacesStart = this.loop<block_$0>(() => this.matchblock_$0($$dpth + 1, $$cr), true)) !== null
                    && (($scope$selector = this.matchblockSelector($$dpth + 1, $$cr)) || true)
                    && ($scope$spacesBeforeBlock = this.loop<block_$1>(() => this.matchblock_$1($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && ($scope$blockInners = this.loop<blockInner>(() => this.matchblockInner($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                    && ($scope$spacesEnd = this.loop<block_$2>(() => this.matchblock_$2($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.block, spacesStart: $scope$spacesStart, selector: $scope$selector, spacesBeforeBlock: $scope$spacesBeforeBlock, blockInners: $scope$blockInners, spacesEnd: $scope$spacesEnd};
                }
                return $$res;
            });
    }
    public matchblock_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$0> {
        return this.choice<block_$0>([
            () => this.matchblock_$0_1($$dpth + 1, $$cr),
            () => this.matchblock_$0_2($$dpth + 1, $$cr),
            () => this.matchblock_$0_3($$dpth + 1, $$cr),
            () => this.matchblock_$0_4($$dpth + 1, $$cr),
            () => this.matchblock_$0_5($$dpth + 1, $$cr),
        ]);
    }
    public matchblock_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchblock_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchblock_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$0_3> {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    public matchblock_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$0_4> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchblock_$0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$0_5> {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    public matchblock_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$1> {
        return this.choice<block_$1>([
            () => this.matchblock_$1_1($$dpth + 1, $$cr),
            () => this.matchblock_$1_2($$dpth + 1, $$cr),
            () => this.matchblock_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matchblock_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchblock_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchblock_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$1_3> {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    public matchblock_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$2> {
        return this.choice<block_$2>([
            () => this.matchblock_$2_1($$dpth + 1, $$cr),
            () => this.matchblock_$2_2($$dpth + 1, $$cr),
            () => this.matchblock_$2_3($$dpth + 1, $$cr),
            () => this.matchblock_$2_4($$dpth + 1, $$cr),
            () => this.matchblock_$2_5($$dpth + 1, $$cr),
        ]);
    }
    public matchblock_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$2_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchblock_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$2_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchblock_$2_3($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$2_3> {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    public matchblock_$2_4($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$2_4> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchblock_$2_5($$dpth: number, $$cr?: ErrorTracker): Nullable<block_$2_5> {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    public matchblockSelector($$dpth: number, $$cr?: ErrorTracker): Nullable<blockSelector> {
        return this.run<blockSelector>($$dpth,
            () => {
                let $scope$selector: Nullable<Nullable<selector>>;
                let $scope$spacesLhs: Nullable<space[]>;
                let $scope$spacesRhs: Nullable<space[]>;
                let $$res: Nullable<blockSelector> = null;
                if (true
                    && (($scope$selector = this.matchselector($$dpth + 1, $$cr)) || true)
                    && ($scope$spacesLhs = this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && ($scope$spacesRhs = this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.blockSelector, selector: $scope$selector, spacesLhs: $scope$spacesLhs, spacesRhs: $scope$spacesRhs};
                }
                return $$res;
            });
    }
    public matchblockInner($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInner> {
        return this.choice<blockInner>([
            () => this.matchblockInner_1($$dpth + 1, $$cr),
            () => this.matchblockInner_2($$dpth + 1, $$cr),
            () => this.matchblockInner_3($$dpth + 1, $$cr),
            () => this.matchblockInner_4($$dpth + 1, $$cr),
            () => this.matchblockInner_5($$dpth + 1, $$cr),
            () => this.matchblockInner_6($$dpth + 1, $$cr),
            () => this.matchblockInner_7($$dpth + 1, $$cr),
            () => this.matchblockInner_8($$dpth + 1, $$cr),
        ]);
    }
    public matchblockInner_1($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInner_1> {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    public matchblockInner_2($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInner_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchblockInner_3($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInner_3> {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    public matchblockInner_4($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInner_4> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchblockInner_5($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInner_5> {
        return this.matchsomeSpaces($$dpth + 1, $$cr);
    }
    public matchblockInner_6($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInner_6> {
        return this.matchblockInnerFlow($$dpth + 1, $$cr);
    }
    public matchblockInner_7($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInner_7> {
        return this.matchblockInnerSentence($$dpth + 1, $$cr);
    }
    public matchblockInner_8($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInner_8> {
        return this.matchpreprocess($$dpth + 1, $$cr);
    }
    public matchblockInnerFlow($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerFlow> {
        return this.run<blockInnerFlow>($$dpth,
            () => {
                let $scope$body: Nullable<blockInnerFlowKind>;
                let $$res: Nullable<blockInnerFlow> = null;
                if (true
                    && ($scope$body = this.matchblockInnerFlowKind($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.blockInnerFlow, body: $scope$body};
                }
                return $$res;
            });
    }
    public matchblockInnerFlowKind($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerFlowKind> {
        return this.choice<blockInnerFlowKind>([
            () => this.matchblockInnerFlowKind_1($$dpth + 1, $$cr),
            () => this.matchblockInnerFlowKind_2($$dpth + 1, $$cr),
            () => this.matchblockInnerFlowKind_3($$dpth + 1, $$cr),
            () => this.matchblockInnerFlowKind_4($$dpth + 1, $$cr),
            () => this.matchblockInnerFlowKind_5($$dpth + 1, $$cr),
            () => this.matchblockInnerFlowKind_6($$dpth + 1, $$cr),
            () => this.matchblockInnerFlowKind_7($$dpth + 1, $$cr),
        ]);
    }
    public matchblockInnerFlowKind_1($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerFlowKind_1> {
        return this.matchflowIf($$dpth + 1, $$cr);
    }
    public matchblockInnerFlowKind_2($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerFlowKind_2> {
        return this.matchflowCase($$dpth + 1, $$cr);
    }
    public matchblockInnerFlowKind_3($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerFlowKind_3> {
        return this.matchflowSwitch($$dpth + 1, $$cr);
    }
    public matchblockInnerFlowKind_4($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerFlowKind_4> {
        return this.matchflowWhile($$dpth + 1, $$cr);
    }
    public matchblockInnerFlowKind_5($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerFlowKind_5> {
        return this.matchflowFor($$dpth + 1, $$cr);
    }
    public matchblockInnerFlowKind_6($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerFlowKind_6> {
        return this.matchflowForeach($$dpth + 1, $$cr);
    }
    public matchblockInnerFlowKind_7($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerFlowKind_7> {
        return this.matchblock($$dpth + 1, $$cr);
    }
    public matchblockInnerSentence($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerSentence> {
        return this.run<blockInnerSentence>($$dpth,
            () => {
                let $scope$body: Nullable<blockInnerSentenceKind>;
                let $scope$spaces: Nullable<blockInnerSentence_$0[]>;
                let $scope$terminator: Nullable<statementTerminator>;
                let $$res: Nullable<blockInnerSentence> = null;
                if (true
                    && ($scope$body = this.matchblockInnerSentenceKind($$dpth + 1, $$cr)) !== null
                    && ($scope$spaces = this.loop<blockInnerSentence_$0>(() => this.matchblockInnerSentence_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$terminator = this.matchstatementTerminator($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.blockInnerSentence, body: $scope$body, spaces: $scope$spaces, terminator: $scope$terminator};
                }
                return $$res;
            });
    }
    public matchblockInnerSentence_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerSentence_$0> {
        return this.choice<blockInnerSentence_$0>([
            () => this.matchblockInnerSentence_$0_1($$dpth + 1, $$cr),
            () => this.matchblockInnerSentence_$0_2($$dpth + 1, $$cr),
            () => this.matchblockInnerSentence_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchblockInnerSentence_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerSentence_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchblockInnerSentence_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerSentence_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchblockInnerSentence_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerSentence_$0_3> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchblockInnerSentenceKind($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerSentenceKind> {
        return this.choice<blockInnerSentenceKind>([
            () => this.matchblockInnerSentenceKind_1($$dpth + 1, $$cr),
            () => this.matchblockInnerSentenceKind_2($$dpth + 1, $$cr),
            () => this.matchblockInnerSentenceKind_3($$dpth + 1, $$cr),
            () => this.matchblockInnerSentenceKind_4($$dpth + 1, $$cr),
            () => this.matchblockInnerSentenceKind_5($$dpth + 1, $$cr),
            () => this.matchblockInnerSentenceKind_6($$dpth + 1, $$cr),
            () => this.matchblockInnerSentenceKind_7($$dpth + 1, $$cr),
        ]);
    }
    public matchblockInnerSentenceKind_1($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerSentenceKind_1> {
        return this.matchblockInnerBreak($$dpth + 1, $$cr);
    }
    public matchblockInnerSentenceKind_2($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerSentenceKind_2> {
        return this.matchblockInnerContinue($$dpth + 1, $$cr);
    }
    public matchblockInnerSentenceKind_3($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerSentenceKind_3> {
        return this.matchblockInnerReturn($$dpth + 1, $$cr);
    }
    public matchblockInnerSentenceKind_4($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerSentenceKind_4> {
        return this.matchblockInnerParallel($$dpth + 1, $$cr);
    }
    public matchblockInnerSentenceKind_5($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerSentenceKind_5> {
        return this.matchblockInnerVoid($$dpth + 1, $$cr);
    }
    public matchblockInnerSentenceKind_6($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerSentenceKind_6> {
        return this.matchoutputSettlement($$dpth + 1, $$cr);
    }
    public matchblockInnerSentenceKind_7($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerSentenceKind_7> {
        return this.matchexpr($$dpth + 1, $$cr);
    }
    public matchflowIf($$dpth: number, $$cr?: ErrorTracker): Nullable<flowIf> {
        return this.run<flowIf>($$dpth,
            () => {
                let $scope$name: Nullable<flowIfName>;
                let $scope$condition: Nullable<expr>;
                let $scope$block: Nullable<flowIf_$0>;
                let $scope$flowElseifs: Nullable<flowElseif[]>;
                let $scope$flowElse: Nullable<Nullable<flowElse>>;
                let $$res: Nullable<flowIf> = null;
                if (true
                    && ($scope$name = this.matchflowIfName($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && ($scope$block = this.matchflowIf_$0($$dpth + 1, $$cr)) !== null
                    && ($scope$flowElseifs = this.loop<flowElseif>(() => this.matchflowElseif($$dpth + 1, $$cr), true)) !== null
                    && (($scope$flowElse = this.matchflowElse($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.flowIf, name: $scope$name, condition: $scope$condition, block: $scope$block, flowElseifs: $scope$flowElseifs, flowElse: $scope$flowElse};
                }
                return $$res;
            });
    }
    public matchflowIf_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<flowIf_$0> {
        return this.choice<flowIf_$0>([
            () => this.matchflowIf_$0_1($$dpth + 1, $$cr),
            () => this.matchflowIf_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchflowIf_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowIf_$0_1> {
        return this.matchblock($$dpth + 1, $$cr);
    }
    public matchflowIf_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowIf_$0_2> {
        return this.matchflowIfBlock($$dpth + 1, $$cr);
    }
    public matchflowIfName($$dpth: number, $$cr?: ErrorTracker): Nullable<flowIfName> {
        return this.run<flowIfName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<flowIfName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:i)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:f)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new flowIfName($scope$c1);
                }
                return $$res;
            });
    }
    public matchflowElseif($$dpth: number, $$cr?: ErrorTracker): Nullable<flowElseif> {
        return this.run<flowElseif>($$dpth,
            () => {
                let $scope$name: Nullable<flowElseifName>;
                let $scope$condition: Nullable<expr>;
                let $scope$block: Nullable<flowElseif_$0>;
                let $$res: Nullable<flowElseif> = null;
                if (true
                    && ($scope$name = this.matchflowElseifName($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && ($scope$block = this.matchflowElseif_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.flowElseif, name: $scope$name, condition: $scope$condition, block: $scope$block};
                }
                return $$res;
            });
    }
    public matchflowElseif_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<flowElseif_$0> {
        return this.choice<flowElseif_$0>([
            () => this.matchflowElseif_$0_1($$dpth + 1, $$cr),
            () => this.matchflowElseif_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchflowElseif_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowElseif_$0_1> {
        return this.matchblock($$dpth + 1, $$cr);
    }
    public matchflowElseif_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowElseif_$0_2> {
        return this.matchflowIfBlock($$dpth + 1, $$cr);
    }
    public matchflowElseifName($$dpth: number, $$cr?: ErrorTracker): Nullable<flowElseifName> {
        return this.run<flowElseifName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $scope$c6: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<flowElseifName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:i)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:f)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c6 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new flowElseifName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6);
                }
                return $$res;
            });
    }
    public matchflowElse($$dpth: number, $$cr?: ErrorTracker): Nullable<flowElse> {
        return this.run<flowElse>($$dpth,
            () => {
                let $scope$name: Nullable<flowElseName>;
                let $scope$block: Nullable<flowElse_$0>;
                let $$res: Nullable<flowElse> = null;
                if (true
                    && ($scope$name = this.matchflowElseName($$dpth + 1, $$cr)) !== null
                    && ($scope$block = this.matchflowElse_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.flowElse, name: $scope$name, block: $scope$block};
                }
                return $$res;
            });
    }
    public matchflowElse_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<flowElse_$0> {
        return this.choice<flowElse_$0>([
            () => this.matchflowElse_$0_1($$dpth + 1, $$cr),
            () => this.matchflowElse_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchflowElse_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowElse_$0_1> {
        return this.matchblock($$dpth + 1, $$cr);
    }
    public matchflowElse_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowElse_$0_2> {
        return this.matchflowIfBlock($$dpth + 1, $$cr);
    }
    public matchflowElseName($$dpth: number, $$cr?: ErrorTracker): Nullable<flowElseName> {
        return this.run<flowElseName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<flowElseName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new flowElseName($scope$c1, $scope$c2, $scope$c3, $scope$c4);
                }
                return $$res;
            });
    }
    public matchflowIfBlock($$dpth: number, $$cr?: ErrorTracker): Nullable<flowIfBlock> {
        return this.run<flowIfBlock>($$dpth,
            () => {
                let $scope$spacesStart: Nullable<spaceOrContinueLineOrCommentLong[]>;
                let $scope$newLineFirst: Nullable<flowIfBlock_$0>;
                let $scope$inner: Nullable<blockInnerSentence>;
                let $scope$spacesEnd: Nullable<flowIfBlock_$1[]>;
                let $$res: Nullable<flowIfBlock> = null;
                if (true
                    && ($scope$spacesStart = this.loop<spaceOrContinueLineOrCommentLong>(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && ($scope$newLineFirst = this.matchflowIfBlock_$0($$dpth + 1, $$cr)) !== null
                    && ($scope$inner = this.matchblockInnerSentence($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesEnd = this.loop<flowIfBlock_$1>(() => this.matchflowIfBlock_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.flowIfBlock, spacesStart: $scope$spacesStart, newLineFirst: $scope$newLineFirst, inner: $scope$inner, spacesEnd: $scope$spacesEnd};
                }
                return $$res;
            });
    }
    public matchflowIfBlock_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<flowIfBlock_$0> {
        return this.choice<flowIfBlock_$0>([
            () => this.matchflowIfBlock_$0_1($$dpth + 1, $$cr),
            () => this.matchflowIfBlock_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchflowIfBlock_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowIfBlock_$0_1> {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    public matchflowIfBlock_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowIfBlock_$0_2> {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    public matchflowIfBlock_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowIfBlock_$1> {
        return this.choice<flowIfBlock_$1>([
            () => this.matchflowIfBlock_$1_1($$dpth + 1, $$cr),
            () => this.matchflowIfBlock_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchflowIfBlock_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowIfBlock_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchflowIfBlock_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowIfBlock_$1_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchflowCase($$dpth: number, $$cr?: ErrorTracker): Nullable<flowCase> {
        return this.run<flowCase>($$dpth,
            () => {
                let $scope$name: Nullable<flowCaseName>;
                let $scope$condition: Nullable<expr>;
                let $scope$spacesBeforeBlock: Nullable<flowCase_$0[]>;
                let $scope$firstBlockInners: Nullable<blockInner[]>;
                let $scope$flowWhens: Nullable<flowWhen[]>;
                let $scope$flowOthers: Nullable<Nullable<flowOthers>>;
                let $scope$lastBlockInners: Nullable<blockInner[]>;
                let $scope$spacesAfterBlock: Nullable<flowCase_$1[]>;
                let $$res: Nullable<flowCase> = null;
                if (true
                    && ($scope$name = this.matchflowCaseName($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesBeforeBlock = this.loop<flowCase_$0>(() => this.matchflowCase_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && ($scope$firstBlockInners = this.loop<blockInner>(() => this.matchblockInner($$dpth + 1, $$cr), true)) !== null
                    && ($scope$flowWhens = this.loop<flowWhen>(() => this.matchflowWhen($$dpth + 1, $$cr), true)) !== null
                    && (($scope$flowOthers = this.matchflowOthers($$dpth + 1, $$cr)) || true)
                    && ($scope$lastBlockInners = this.loop<blockInner>(() => this.matchblockInner($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                    && ($scope$spacesAfterBlock = this.loop<flowCase_$1>(() => this.matchflowCase_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.flowCase, name: $scope$name, condition: $scope$condition, spacesBeforeBlock: $scope$spacesBeforeBlock, firstBlockInners: $scope$firstBlockInners, flowWhens: $scope$flowWhens, flowOthers: $scope$flowOthers, lastBlockInners: $scope$lastBlockInners, spacesAfterBlock: $scope$spacesAfterBlock};
                }
                return $$res;
            });
    }
    public matchflowCase_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<flowCase_$0> {
        return this.choice<flowCase_$0>([
            () => this.matchflowCase_$0_1($$dpth + 1, $$cr),
            () => this.matchflowCase_$0_2($$dpth + 1, $$cr),
            () => this.matchflowCase_$0_3($$dpth + 1, $$cr),
            () => this.matchflowCase_$0_4($$dpth + 1, $$cr),
            () => this.matchflowCase_$0_5($$dpth + 1, $$cr),
        ]);
    }
    public matchflowCase_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowCase_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchflowCase_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowCase_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchflowCase_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<flowCase_$0_3> {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    public matchflowCase_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<flowCase_$0_4> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchflowCase_$0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<flowCase_$0_5> {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    public matchflowCase_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowCase_$1> {
        return this.choice<flowCase_$1>([
            () => this.matchflowCase_$1_1($$dpth + 1, $$cr),
            () => this.matchflowCase_$1_2($$dpth + 1, $$cr),
            () => this.matchflowCase_$1_3($$dpth + 1, $$cr),
            () => this.matchflowCase_$1_4($$dpth + 1, $$cr),
            () => this.matchflowCase_$1_5($$dpth + 1, $$cr),
        ]);
    }
    public matchflowCase_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowCase_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchflowCase_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowCase_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchflowCase_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<flowCase_$1_3> {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    public matchflowCase_$1_4($$dpth: number, $$cr?: ErrorTracker): Nullable<flowCase_$1_4> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchflowCase_$1_5($$dpth: number, $$cr?: ErrorTracker): Nullable<flowCase_$1_5> {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    public matchflowCaseName($$dpth: number, $$cr?: ErrorTracker): Nullable<flowCaseName> {
        return this.run<flowCaseName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<flowCaseName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:c)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:a)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new flowCaseName($scope$c1, $scope$c2, $scope$c3, $scope$c4);
                }
                return $$res;
            });
    }
    public matchflowWhen($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhen> {
        return this.run<flowWhen>($$dpth,
            () => {
                let $scope$name: Nullable<flowWhenName>;
                let $scope$conditions: Nullable<flowWhenConditions>;
                let $scope$block: Nullable<block>;
                let $$res: Nullable<flowWhen> = null;
                if (true
                    && ($scope$name = this.matchflowWhenName($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && ($scope$conditions = this.matchflowWhenConditions($$dpth + 1, $$cr)) !== null
                    && ($scope$block = this.matchblock($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.flowWhen, name: $scope$name, conditions: $scope$conditions, block: $scope$block};
                }
                return $$res;
            });
    }
    public matchflowWhenName($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenName> {
        return this.run<flowWhenName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<flowWhenName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:w)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:h)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:n)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new flowWhenName($scope$c1, $scope$c2, $scope$c3, $scope$c4);
                }
                return $$res;
            });
    }
    public matchflowWhenConditions($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditions> {
        return this.run<flowWhenConditions>($$dpth,
            () => {
                let $scope$conditionHead: Nullable<flowWhenCondition>;
                let $scope$conditionBodies: Nullable<flowWhenConditions_$0[]>;
                let $$res: Nullable<flowWhenConditions> = null;
                if (true
                    && ($scope$conditionHead = this.matchflowWhenCondition($$dpth + 1, $$cr)) !== null
                    && ($scope$conditionBodies = this.loop<flowWhenConditions_$0>(() => this.matchflowWhenConditions_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new flowWhenConditions($scope$conditionHead, $scope$conditionBodies);
                }
                return $$res;
            });
    }
    public matchflowWhenConditions_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditions_$0> {
        return this.run<flowWhenConditions_$0>($$dpth,
            () => {
                let $scope$body: Nullable<flowWhenCondition>;
                let $$res: Nullable<flowWhenConditions_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\,)`, $$dpth + 1, $$cr) !== null
                    && ($scope$body = this.matchflowWhenCondition($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.flowWhenConditions_$0, body: $scope$body};
                }
                return $$res;
            });
    }
    public matchflowWhenCondition($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenCondition> {
        return this.choice<flowWhenCondition>([
            () => this.matchflowWhenCondition_1($$dpth + 1, $$cr),
            () => this.matchflowWhenCondition_2($$dpth + 1, $$cr),
        ]);
    }
    public matchflowWhenCondition_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenCondition_1> {
        return this.matchflowWhenConditionRange($$dpth + 1, $$cr);
    }
    public matchflowWhenCondition_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenCondition_2> {
        return this.matchflowWhenConditionLiteral($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionLiteral($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionLiteral> {
        return this.run<flowWhenConditionLiteral>($$dpth,
            () => {
                let $scope$spacesStart: Nullable<flowWhenConditionLiteral_$0[]>;
                let $scope$body: Nullable<flowWhenConditionLiteral_$1>;
                let $scope$spacesEnd: Nullable<flowWhenConditionLiteral_$2[]>;
                let $$res: Nullable<flowWhenConditionLiteral> = null;
                if (true
                    && ($scope$spacesStart = this.loop<flowWhenConditionLiteral_$0>(() => this.matchflowWhenConditionLiteral_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$body = this.matchflowWhenConditionLiteral_$1($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesEnd = this.loop<flowWhenConditionLiteral_$2>(() => this.matchflowWhenConditionLiteral_$2($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.flowWhenConditionLiteral, spacesStart: $scope$spacesStart, body: $scope$body, spacesEnd: $scope$spacesEnd};
                }
                return $$res;
            });
    }
    public matchflowWhenConditionLiteral_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionLiteral_$0> {
        return this.choice<flowWhenConditionLiteral_$0>([
            () => this.matchflowWhenConditionLiteral_$0_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionLiteral_$0_2($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionLiteral_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchflowWhenConditionLiteral_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionLiteral_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionLiteral_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionLiteral_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionLiteral_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionLiteral_$0_3> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionLiteral_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionLiteral_$1> {
        return this.choice<flowWhenConditionLiteral_$1>([
            () => this.matchflowWhenConditionLiteral_$1_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionLiteral_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchflowWhenConditionLiteral_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionLiteral_$1_1> {
        return this.matchliteral($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionLiteral_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionLiteral_$1_2> {
        return this.matchmaybePreprocess($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionLiteral_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionLiteral_$2> {
        return this.choice<flowWhenConditionLiteral_$2>([
            () => this.matchflowWhenConditionLiteral_$2_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionLiteral_$2_2($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionLiteral_$2_3($$dpth + 1, $$cr),
        ]);
    }
    public matchflowWhenConditionLiteral_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionLiteral_$2_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionLiteral_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionLiteral_$2_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionLiteral_$2_3($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionLiteral_$2_3> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange> {
        return this.run<flowWhenConditionRange>($$dpth,
            () => {
                let $scope$spacesStart: Nullable<flowWhenConditionRange_$0[]>;
                let $scope$lhs: Nullable<flowWhenConditionRange_$1>;
                let $scope$spacesLhs: Nullable<flowWhenConditionRange_$2[]>;
                let $scope$spacesRhs: Nullable<flowWhenConditionRange_$3[]>;
                let $scope$rhs: Nullable<flowWhenConditionRange_$4>;
                let $scope$spacesEnd: Nullable<flowWhenConditionRange_$5[]>;
                let $$res: Nullable<flowWhenConditionRange> = null;
                if (true
                    && ($scope$spacesStart = this.loop<flowWhenConditionRange_$0>(() => this.matchflowWhenConditionRange_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$lhs = this.matchflowWhenConditionRange_$1($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesLhs = this.loop<flowWhenConditionRange_$2>(() => this.matchflowWhenConditionRange_$2($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\-)`, $$dpth + 1, $$cr) !== null
                    && ($scope$spacesRhs = this.loop<flowWhenConditionRange_$3>(() => this.matchflowWhenConditionRange_$3($$dpth + 1, $$cr), true)) !== null
                    && ($scope$rhs = this.matchflowWhenConditionRange_$4($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesEnd = this.loop<flowWhenConditionRange_$5>(() => this.matchflowWhenConditionRange_$5($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.flowWhenConditionRange, spacesStart: $scope$spacesStart, lhs: $scope$lhs, spacesLhs: $scope$spacesLhs, spacesRhs: $scope$spacesRhs, rhs: $scope$rhs, spacesEnd: $scope$spacesEnd};
                }
                return $$res;
            });
    }
    public matchflowWhenConditionRange_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$0> {
        return this.choice<flowWhenConditionRange_$0>([
            () => this.matchflowWhenConditionRange_$0_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$0_2($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchflowWhenConditionRange_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$0_3> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$1> {
        return this.choice<flowWhenConditionRange_$1>([
            () => this.matchflowWhenConditionRange_$1_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchflowWhenConditionRange_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$1_1> {
        return this.matchliteral($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$1_2> {
        return this.matchmaybePreprocess($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$2> {
        return this.choice<flowWhenConditionRange_$2>([
            () => this.matchflowWhenConditionRange_$2_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$2_2($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$2_3($$dpth + 1, $$cr),
        ]);
    }
    public matchflowWhenConditionRange_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$2_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$2_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$2_3($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$2_3> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$3> {
        return this.choice<flowWhenConditionRange_$3>([
            () => this.matchflowWhenConditionRange_$3_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$3_2($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$3_3($$dpth + 1, $$cr),
        ]);
    }
    public matchflowWhenConditionRange_$3_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$3_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$3_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$3_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$3_3($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$3_3> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$4($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$4> {
        return this.choice<flowWhenConditionRange_$4>([
            () => this.matchflowWhenConditionRange_$4_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$4_2($$dpth + 1, $$cr),
        ]);
    }
    public matchflowWhenConditionRange_$4_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$4_1> {
        return this.matchliteral($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$4_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$4_2> {
        return this.matchmaybePreprocess($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$5($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$5> {
        return this.choice<flowWhenConditionRange_$5>([
            () => this.matchflowWhenConditionRange_$5_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$5_2($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$5_3($$dpth + 1, $$cr),
        ]);
    }
    public matchflowWhenConditionRange_$5_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$5_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$5_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$5_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchflowWhenConditionRange_$5_3($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhenConditionRange_$5_3> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchflowOthers($$dpth: number, $$cr?: ErrorTracker): Nullable<flowOthers> {
        return this.run<flowOthers>($$dpth,
            () => {
                let $scope$spacesStart: Nullable<flowOthers_$0[]>;
                let $scope$name: Nullable<flowOthersName>;
                let $scope$block: Nullable<block>;
                let $$res: Nullable<flowOthers> = null;
                if (true
                    && ($scope$spacesStart = this.loop<flowOthers_$0>(() => this.matchflowOthers_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$name = this.matchflowOthersName($$dpth + 1, $$cr)) !== null
                    && ($scope$block = this.matchblock($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.flowOthers, spacesStart: $scope$spacesStart, name: $scope$name, block: $scope$block};
                }
                return $$res;
            });
    }
    public matchflowOthers_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<flowOthers_$0> {
        return this.choice<flowOthers_$0>([
            () => this.matchflowOthers_$0_1($$dpth + 1, $$cr),
            () => this.matchflowOthers_$0_2($$dpth + 1, $$cr),
            () => this.matchflowOthers_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchflowOthers_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowOthers_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchflowOthers_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowOthers_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchflowOthers_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<flowOthers_$0_3> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchflowOthersName($$dpth: number, $$cr?: ErrorTracker): Nullable<flowOthersName> {
        return this.run<flowOthersName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $scope$c6: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<flowOthersName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:t)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:h)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:r)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c6 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new flowOthersName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6);
                }
                return $$res;
            });
    }
    public matchflowSwitch($$dpth: number, $$cr?: ErrorTracker): Nullable<flowSwitch> {
        return this.run<flowSwitch>($$dpth,
            () => {
                let $scope$name: Nullable<flowSwitchName>;
                let $scope$condition: Nullable<expr>;
                let $scope$block: Nullable<block>;
                let $$res: Nullable<flowSwitch> = null;
                if (true
                    && ($scope$name = this.matchflowSwitchName($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && ($scope$block = this.matchblock($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.flowSwitch, name: $scope$name, condition: $scope$condition, block: $scope$block};
                }
                return $$res;
            });
    }
    public matchflowSwitchName($$dpth: number, $$cr?: ErrorTracker): Nullable<flowSwitchName> {
        return this.run<flowSwitchName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $scope$c6: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<flowSwitchName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:w)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:i)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:t)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:c)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:h)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c6 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new flowSwitchName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6);
                }
                return $$res;
            });
    }
    public matchflowWhile($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhile> {
        return this.run<flowWhile>($$dpth,
            () => {
                let $scope$name: Nullable<flowWhileName>;
                let $scope$condition: Nullable<expr>;
                let $scope$block: Nullable<block>;
                let $$res: Nullable<flowWhile> = null;
                if (true
                    && ($scope$name = this.matchflowWhileName($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && ($scope$block = this.matchblock($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.flowWhile, name: $scope$name, condition: $scope$condition, block: $scope$block};
                }
                return $$res;
            });
    }
    public matchflowWhileName($$dpth: number, $$cr?: ErrorTracker): Nullable<flowWhileName> {
        return this.run<flowWhileName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<flowWhileName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:w)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:h)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:i)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new flowWhileName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5);
                }
                return $$res;
            });
    }
    public matchflowFor($$dpth: number, $$cr?: ErrorTracker): Nullable<flowFor> {
        return this.run<flowFor>($$dpth,
            () => {
                let $scope$name: Nullable<flowForName>;
                let $scope$initializer: Nullable<expr>;
                let $scope$separator1: Nullable<statementSeparator>;
                let $scope$condition: Nullable<expr>;
                let $scope$separator2: Nullable<statementSeparator>;
                let $scope$updater: Nullable<expr>;
                let $scope$block: Nullable<block>;
                let $$res: Nullable<flowFor> = null;
                if (true
                    && ($scope$name = this.matchflowForName($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && ($scope$initializer = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                    && ($scope$separator1 = this.matchstatementSeparator($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                    && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                    && ($scope$separator2 = this.matchstatementSeparator($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                    && ($scope$updater = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && ($scope$block = this.matchblock($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.flowFor, name: $scope$name, initializer: $scope$initializer, separator1: $scope$separator1, condition: $scope$condition, separator2: $scope$separator2, updater: $scope$updater, block: $scope$block};
                }
                return $$res;
            });
    }
    public matchflowForName($$dpth: number, $$cr?: ErrorTracker): Nullable<flowForName> {
        return this.run<flowForName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<flowForName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:f)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:r)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new flowForName($scope$c1, $scope$c2, $scope$c3);
                }
                return $$res;
            });
    }
    public matchflowForeach($$dpth: number, $$cr?: ErrorTracker): Nullable<flowForeach> {
        return this.run<flowForeach>($$dpth,
            () => {
                let $scope$name: Nullable<flowForeachName>;
                let $scope$target: Nullable<expr>;
                let $scope$separator: Nullable<statementSeparator>;
                let $scope$spaceBeforeVariable: Nullable<flowForeach_$0[]>;
                let $scope$variable: Nullable<variable>;
                let $scope$block: Nullable<block>;
                let $$res: Nullable<flowForeach> = null;
                if (true
                    && ($scope$name = this.matchflowForeachName($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && ($scope$target = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                    && ($scope$separator = this.matchstatementSeparator($$dpth + 1, $$cr)) !== null
                    && ($scope$spaceBeforeVariable = this.loop<flowForeach_$0>(() => this.matchflowForeach_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$variable = this.matchvariable($$dpth + 1, $$cr)) !== null
                    && ($scope$block = this.matchblock($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.flowForeach, name: $scope$name, target: $scope$target, separator: $scope$separator, spaceBeforeVariable: $scope$spaceBeforeVariable, variable: $scope$variable, block: $scope$block};
                }
                return $$res;
            });
    }
    public matchflowForeach_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<flowForeach_$0> {
        return this.choice<flowForeach_$0>([
            () => this.matchflowForeach_$0_1($$dpth + 1, $$cr),
            () => this.matchflowForeach_$0_2($$dpth + 1, $$cr),
            () => this.matchflowForeach_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchflowForeach_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<flowForeach_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchflowForeach_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<flowForeach_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchflowForeach_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<flowForeach_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchflowForeachName($$dpth: number, $$cr?: ErrorTracker): Nullable<flowForeachName> {
        return this.run<flowForeachName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $scope$c6: Nullable<continueLineOrCommentLong[]>;
                let $scope$c7: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<flowForeachName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:f)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:r)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:a)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:c)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c6 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:h)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c7 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new flowForeachName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6, $scope$c7);
                }
                return $$res;
            });
    }
    public matchblockInnerBreak($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerBreak> {
        return this.run<blockInnerBreak>($$dpth,
            () => {
                let $scope$name: Nullable<blockInnerBreakName>;
                let $$res: Nullable<blockInnerBreak> = null;
                if (true
                    && ($scope$name = this.matchblockInnerBreakName($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.blockInnerBreak, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchblockInnerBreakName($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerBreakName> {
        return this.run<blockInnerBreakName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<blockInnerBreakName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:b)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:r)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:a)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:k)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new blockInnerBreakName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5);
                }
                return $$res;
            });
    }
    public matchblockInnerContinue($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerContinue> {
        return this.run<blockInnerContinue>($$dpth,
            () => {
                let $scope$name: Nullable<blockInnerContinueName>;
                let $$res: Nullable<blockInnerContinue> = null;
                if (true
                    && ($scope$name = this.matchblockInnerContinueName($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.blockInnerContinue, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchblockInnerContinueName($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerContinueName> {
        return this.run<blockInnerContinueName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $scope$c6: Nullable<continueLineOrCommentLong[]>;
                let $scope$c7: Nullable<continueLineOrCommentLong[]>;
                let $scope$c8: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<blockInnerContinueName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:c)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:n)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:t)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:i)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:n)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c6 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:u)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c7 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c8 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new blockInnerContinueName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6, $scope$c7, $scope$c8);
                }
                return $$res;
            });
    }
    public matchblockInnerReturn($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerReturn> {
        return this.run<blockInnerReturn>($$dpth,
            () => {
                let $scope$name: Nullable<blockInnerReturnName>;
                let $$res: Nullable<blockInnerReturn> = null;
                if (true
                    && ($scope$name = this.matchblockInnerReturnName($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.blockInnerReturn, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchblockInnerReturnName($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerReturnName> {
        return this.run<blockInnerReturnName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $scope$c6: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<blockInnerReturnName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:r)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:t)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:u)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:r)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:n)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c6 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new blockInnerReturnName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6);
                }
                return $$res;
            });
    }
    public matchblockInnerParallel($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerParallel> {
        return this.run<blockInnerParallel>($$dpth,
            () => {
                let $scope$name: Nullable<blockInnerParallelName>;
                let $scope$target: Nullable<expr>;
                let $$res: Nullable<blockInnerParallel> = null;
                if (true
                    && ($scope$name = this.matchblockInnerParallelName($$dpth + 1, $$cr)) !== null
                    && ($scope$target = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.blockInnerParallel, name: $scope$name, target: $scope$target};
                }
                return $$res;
            });
    }
    public matchblockInnerParallelName($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerParallelName> {
        return this.run<blockInnerParallelName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $scope$c6: Nullable<continueLineOrCommentLong[]>;
                let $scope$c7: Nullable<continueLineOrCommentLong[]>;
                let $scope$c8: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<blockInnerParallelName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:p)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:a)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:r)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:a)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c6 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c7 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c8 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new blockInnerParallelName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6, $scope$c7, $scope$c8);
                }
                return $$res;
            });
    }
    public matchblockInnerVoid($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerVoid> {
        return this.run<blockInnerVoid>($$dpth,
            () => {
                let $scope$name: Nullable<blockInnerVoidName>;
                let $scope$target: Nullable<expr>;
                let $$res: Nullable<blockInnerVoid> = null;
                if (true
                    && ($scope$name = this.matchblockInnerVoidName($$dpth + 1, $$cr)) !== null
                    && ($scope$target = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.blockInnerVoid, name: $scope$name, target: $scope$target};
                }
                return $$res;
            });
    }
    public matchblockInnerVoidName($$dpth: number, $$cr?: ErrorTracker): Nullable<blockInnerVoidName> {
        return this.run<blockInnerVoidName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<blockInnerVoidName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:i)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:d)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new blockInnerVoidName($scope$c1, $scope$c2, $scope$c3, $scope$c4);
                }
                return $$res;
            });
    }
    public matchoutputSettlement($$dpth: number, $$cr?: ErrorTracker): Nullable<outputSettlement> {
        return this.run<outputSettlement>($$dpth,
            () => {
                let $scope$tokens: Nullable<string>;
                let $$res: Nullable<outputSettlement> = null;
                if (true
                    && ($scope$tokens = this.regexAccept(String.raw`(?:\-\-)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.outputSettlement, tokens: $scope$tokens};
                }
                return $$res;
            });
    }
    public matchexpr($$dpth: number, $$cr?: ErrorTracker): Nullable<expr> {
        const fn = () => {
            return this.run<expr>($$dpth,
                () => {
                    let $scope$spacesLhs: Nullable<expr_$0[]>;
                    let $scope$inner: Nullable<exprInner>;
                    let $scope$spacesRhs: Nullable<expr_$1[]>;
                    let $$res: Nullable<expr> = null;
                    if (true
                        && ($scope$spacesLhs = this.loop<expr_$0>(() => this.matchexpr_$0($$dpth + 1, $$cr), true)) !== null
                        && ($scope$inner = this.matchexprInner($$dpth + 1, $$cr)) !== null
                        && ($scope$spacesRhs = this.loop<expr_$1>(() => this.matchexpr_$1($$dpth + 1, $$cr), true)) !== null
                    ) {
                        $$res = {kind: ASTKinds.expr, spacesLhs: $scope$spacesLhs, inner: $scope$inner, spacesRhs: $scope$spacesRhs};
                    }
                    return $$res;
                });
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$expr$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$expr$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<expr> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$expr$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchexpr_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_$0> {
        return this.choice<expr_$0>([
            () => this.matchexpr_$0_1($$dpth + 1, $$cr),
            () => this.matchexpr_$0_2($$dpth + 1, $$cr),
            () => this.matchexpr_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchexpr_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchexpr_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchexpr_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchexpr_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_$1> {
        return this.choice<expr_$1>([
            () => this.matchexpr_$1_1($$dpth + 1, $$cr),
            () => this.matchexpr_$1_2($$dpth + 1, $$cr),
            () => this.matchexpr_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matchexpr_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchexpr_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_$1_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchexpr_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_$1_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchexprInner($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner> {
        return this.choice<exprInner>([
            () => this.matchexprInner_1($$dpth + 1, $$cr),
            () => this.matchexprInner_2($$dpth + 1, $$cr),
            () => this.matchexprInner_3($$dpth + 1, $$cr),
            () => this.matchexprInner_4($$dpth + 1, $$cr),
            () => this.matchexprInner_5($$dpth + 1, $$cr),
            () => this.matchexprInner_6($$dpth + 1, $$cr),
            () => this.matchexprInner_7($$dpth + 1, $$cr),
            () => this.matchexprInner_8($$dpth + 1, $$cr),
            () => this.matchexprInner_9($$dpth + 1, $$cr),
            () => this.matchexprInner_10($$dpth + 1, $$cr),
            () => this.matchexprInner_11($$dpth + 1, $$cr),
            () => this.matchexprInner_12($$dpth + 1, $$cr),
            () => this.matchexprInner_13($$dpth + 1, $$cr),
            () => this.matchexprInner_14($$dpth + 1, $$cr),
            () => this.matchexprInner_15($$dpth + 1, $$cr),
            () => this.matchexprInner_16($$dpth + 1, $$cr),
            () => this.matchexprInner_17($$dpth + 1, $$cr),
            () => this.matchexprInner_18($$dpth + 1, $$cr),
            () => this.matchexprInner_19($$dpth + 1, $$cr),
        ]);
    }
    public matchexprInner_1($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_1> {
        return this.matchcommaOperation($$dpth + 1, $$cr);
    }
    public matchexprInner_2($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_2> {
        return this.matchmultiplicationOrDivisionOperation($$dpth + 1, $$cr);
    }
    public matchexprInner_3($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_3> {
        return this.matchadditionOrSubtractionOperation($$dpth + 1, $$cr);
    }
    public matchexprInner_4($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_4> {
        return this.matchlogicalConjunction($$dpth + 1, $$cr);
    }
    public matchexprInner_5($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_5> {
        return this.matchlogicalDisjunction($$dpth + 1, $$cr);
    }
    public matchexprInner_6($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_6> {
        return this.matchsubstitution($$dpth + 1, $$cr);
    }
    public matchexprInner_7($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_7> {
        return this.matchsubstitutionOperation($$dpth + 1, $$cr);
    }
    public matchexprInner_8($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_8> {
        return this.matchcomparisonOperation($$dpth + 1, $$cr);
    }
    public matchexprInner_9($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_9> {
        return this.matcharrayCall($$dpth + 1, $$cr);
    }
    public matchexprInner_10($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_10> {
        return this.matchfunctionCall($$dpth + 1, $$cr);
    }
    public matchexprInner_11($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_11> {
        return this.matchparenthesesOperation($$dpth + 1, $$cr);
    }
    public matchexprInner_12($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_12> {
        return this.matchbracketsOperation($$dpth + 1, $$cr);
    }
    public matchexprInner_13($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_13> {
        return this.matchexclamationOperation($$dpth + 1, $$cr);
    }
    public matchexprInner_14($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_14> {
        return this.matchincrementOrDecrementOperation($$dpth + 1, $$cr);
    }
    public matchexprInner_15($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_15> {
        return this.matchfeedbackOperation($$dpth + 1, $$cr);
    }
    public matchexprInner_16($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_16> {
        return this.matchliteral($$dpth + 1, $$cr);
    }
    public matchexprInner_17($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_17> {
        return this.matchvariable($$dpth + 1, $$cr);
    }
    public matchexprInner_18($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_18> {
        return this.matchsigned($$dpth + 1, $$cr);
    }
    public matchexprInner_19($$dpth: number, $$cr?: ErrorTracker): Nullable<exprInner_19> {
        return this.matchmaybePreprocess($$dpth + 1, $$cr);
    }
    public matchparenthesesOperation($$dpth: number, $$cr?: ErrorTracker): Nullable<parenthesesOperation> {
        return this.run<parenthesesOperation>($$dpth,
            () => {
                let $scope$spacesLhs: Nullable<parenthesesOperation_$0[]>;
                let $scope$operand: Nullable<Nullable<expr>>;
                let $scope$spacesRhs: Nullable<parenthesesOperation_$1[]>;
                let $$res: Nullable<parenthesesOperation> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ($scope$spacesLhs = this.loop<parenthesesOperation_$0>(() => this.matchparenthesesOperation_$0($$dpth + 1, $$cr), true)) !== null
                    && (($scope$operand = this.matchexpr($$dpth + 1, $$cr)) || true)
                    && ($scope$spacesRhs = this.loop<parenthesesOperation_$1>(() => this.matchparenthesesOperation_$1($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.parenthesesOperation, spacesLhs: $scope$spacesLhs, operand: $scope$operand, spacesRhs: $scope$spacesRhs};
                }
                return $$res;
            });
    }
    public matchparenthesesOperation_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<parenthesesOperation_$0> {
        return this.choice<parenthesesOperation_$0>([
            () => this.matchparenthesesOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchparenthesesOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchparenthesesOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchparenthesesOperation_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<parenthesesOperation_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchparenthesesOperation_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<parenthesesOperation_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchparenthesesOperation_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<parenthesesOperation_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchparenthesesOperation_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<parenthesesOperation_$1> {
        return this.choice<parenthesesOperation_$1>([
            () => this.matchparenthesesOperation_$1_1($$dpth + 1, $$cr),
            () => this.matchparenthesesOperation_$1_2($$dpth + 1, $$cr),
            () => this.matchparenthesesOperation_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matchparenthesesOperation_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<parenthesesOperation_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchparenthesesOperation_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<parenthesesOperation_$1_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchparenthesesOperation_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<parenthesesOperation_$1_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchbracketsOperation($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperation> {
        return this.run<bracketsOperation>($$dpth,
            () => {
                let $scope$spacesLhs: Nullable<bracketsOperation_$0[]>;
                let $scope$start: Nullable<expr>;
                let $scope$end: Nullable<Nullable<bracketsOperationOption>>;
                let $scope$delimiter: Nullable<Nullable<bracketsOperationOption>>;
                let $scope$spacesRhs: Nullable<bracketsOperation_$1[]>;
                let $$res: Nullable<bracketsOperation> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && ($scope$spacesLhs = this.loop<bracketsOperation_$0>(() => this.matchbracketsOperation_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$start = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && (($scope$end = this.matchbracketsOperationOption($$dpth + 1, $$cr)) || true)
                    && (($scope$delimiter = this.matchbracketsOperationOption($$dpth + 1, $$cr)) || true)
                    && ($scope$spacesRhs = this.loop<bracketsOperation_$1>(() => this.matchbracketsOperation_$1($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.bracketsOperation, spacesLhs: $scope$spacesLhs, start: $scope$start, end: $scope$end, delimiter: $scope$delimiter, spacesRhs: $scope$spacesRhs};
                }
                return $$res;
            });
    }
    public matchbracketsOperation_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperation_$0> {
        return this.choice<bracketsOperation_$0>([
            () => this.matchbracketsOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchbracketsOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchbracketsOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchbracketsOperation_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperation_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchbracketsOperation_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperation_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchbracketsOperation_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperation_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchbracketsOperation_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperation_$1> {
        return this.choice<bracketsOperation_$1>([
            () => this.matchbracketsOperation_$1_1($$dpth + 1, $$cr),
            () => this.matchbracketsOperation_$1_2($$dpth + 1, $$cr),
            () => this.matchbracketsOperation_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matchbracketsOperation_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperation_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchbracketsOperation_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperation_$1_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchbracketsOperation_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperation_$1_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchbracketsOperationOption($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperationOption> {
        return this.run<bracketsOperationOption>($$dpth,
            () => {
                let $scope$spacesLhs: Nullable<bracketsOperationOption_$0[]>;
                let $scope$spacesRhs: Nullable<bracketsOperationOption_$1[]>;
                let $scope$value: Nullable<Nullable<expr>>;
                let $$res: Nullable<bracketsOperationOption> = null;
                if (true
                    && ($scope$spacesLhs = this.loop<bracketsOperationOption_$0>(() => this.matchbracketsOperationOption_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ($scope$spacesRhs = this.loop<bracketsOperationOption_$1>(() => this.matchbracketsOperationOption_$1($$dpth + 1, $$cr), true)) !== null
                    && (($scope$value = this.matchexpr($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.bracketsOperationOption, spacesLhs: $scope$spacesLhs, spacesRhs: $scope$spacesRhs, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchbracketsOperationOption_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperationOption_$0> {
        return this.choice<bracketsOperationOption_$0>([
            () => this.matchbracketsOperationOption_$0_1($$dpth + 1, $$cr),
            () => this.matchbracketsOperationOption_$0_2($$dpth + 1, $$cr),
            () => this.matchbracketsOperationOption_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchbracketsOperationOption_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperationOption_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchbracketsOperationOption_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperationOption_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchbracketsOperationOption_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperationOption_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchbracketsOperationOption_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperationOption_$1> {
        return this.choice<bracketsOperationOption_$1>([
            () => this.matchbracketsOperationOption_$1_1($$dpth + 1, $$cr),
            () => this.matchbracketsOperationOption_$1_2($$dpth + 1, $$cr),
            () => this.matchbracketsOperationOption_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matchbracketsOperationOption_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperationOption_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchbracketsOperationOption_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperationOption_$1_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchbracketsOperationOption_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<bracketsOperationOption_$1_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchexclamationOperation($$dpth: number, $$cr?: ErrorTracker): Nullable<exclamationOperation> {
        return this.run<exclamationOperation>($$dpth,
            () => {
                let $scope$spaces: Nullable<exclamationOperation_$0[]>;
                let $scope$operand: Nullable<expr>;
                let $$res: Nullable<exclamationOperation> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\!)`, $$dpth + 1, $$cr) !== null
                    && ($scope$spaces = this.loop<exclamationOperation_$0>(() => this.matchexclamationOperation_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operand = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.exclamationOperation, spaces: $scope$spaces, operand: $scope$operand};
                }
                return $$res;
            });
    }
    public matchexclamationOperation_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<exclamationOperation_$0> {
        return this.choice<exclamationOperation_$0>([
            () => this.matchexclamationOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchexclamationOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchexclamationOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchexclamationOperation_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<exclamationOperation_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchexclamationOperation_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<exclamationOperation_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchexclamationOperation_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<exclamationOperation_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchincrementOrDecrementOperation($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperation> {
        return this.run<incrementOrDecrementOperation>($$dpth,
            () => {
                let $scope$operand: Nullable<variable>;
                let $scope$spaces: Nullable<incrementOrDecrementOperation_$0[]>;
                let $scope$operator: Nullable<incrementOrDecrementOperator>;
                let $$res: Nullable<incrementOrDecrementOperation> = null;
                if (true
                    && ($scope$operand = this.matchvariable($$dpth + 1, $$cr)) !== null
                    && ($scope$spaces = this.loop<incrementOrDecrementOperation_$0>(() => this.matchincrementOrDecrementOperation_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operator = this.matchincrementOrDecrementOperator($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.incrementOrDecrementOperation, operand: $scope$operand, spaces: $scope$spaces, operator: $scope$operator};
                }
                return $$res;
            });
    }
    public matchincrementOrDecrementOperation_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperation_$0> {
        return this.choice<incrementOrDecrementOperation_$0>([
            () => this.matchincrementOrDecrementOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchincrementOrDecrementOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchincrementOrDecrementOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchincrementOrDecrementOperation_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperation_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchincrementOrDecrementOperation_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperation_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchincrementOrDecrementOperation_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperation_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchincrementOrDecrementOperator($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator> {
        return this.choice<incrementOrDecrementOperator>([
            () => this.matchincrementOrDecrementOperator_1($$dpth + 1, $$cr),
            () => this.matchincrementOrDecrementOperator_2($$dpth + 1, $$cr),
        ]);
    }
    public matchincrementOrDecrementOperator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_1> {
        return this.matchincrementOrDecrementOperator_$0($$dpth + 1, $$cr);
    }
    public matchincrementOrDecrementOperator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_2> {
        return this.matchincrementOrDecrementOperator_$1($$dpth + 1, $$cr);
    }
    public matchincrementOrDecrementOperator_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_$0> {
        return this.run<incrementOrDecrementOperator_$0>($$dpth,
            () => {
                let $scope$c1: Nullable<incrementOrDecrementOperator_$0_$0[]>;
                let $scope$c2: Nullable<incrementOrDecrementOperator_$0_$1[]>;
                let $$res: Nullable<incrementOrDecrementOperator_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<incrementOrDecrementOperator_$0_$0>(() => this.matchincrementOrDecrementOperator_$0_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<incrementOrDecrementOperator_$0_$1>(() => this.matchincrementOrDecrementOperator_$0_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new incrementOrDecrementOperator_$0($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchincrementOrDecrementOperator_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_$0_$0> {
        return this.choice<incrementOrDecrementOperator_$0_$0>([
            () => this.matchincrementOrDecrementOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchincrementOrDecrementOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchincrementOrDecrementOperator_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_$0_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchincrementOrDecrementOperator_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_$0_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchincrementOrDecrementOperator_$0_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_$0_$1> {
        return this.choice<incrementOrDecrementOperator_$0_$1>([
            () => this.matchincrementOrDecrementOperator_$0_$1_1($$dpth + 1, $$cr),
            () => this.matchincrementOrDecrementOperator_$0_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchincrementOrDecrementOperator_$0_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_$0_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchincrementOrDecrementOperator_$0_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_$0_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchincrementOrDecrementOperator_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_$1> {
        return this.run<incrementOrDecrementOperator_$1>($$dpth,
            () => {
                let $scope$c1: Nullable<incrementOrDecrementOperator_$1_$0[]>;
                let $scope$c2: Nullable<incrementOrDecrementOperator_$1_$1[]>;
                let $$res: Nullable<incrementOrDecrementOperator_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\-)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<incrementOrDecrementOperator_$1_$0>(() => this.matchincrementOrDecrementOperator_$1_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\-)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<incrementOrDecrementOperator_$1_$1>(() => this.matchincrementOrDecrementOperator_$1_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new incrementOrDecrementOperator_$1($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchincrementOrDecrementOperator_$1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_$1_$0> {
        return this.choice<incrementOrDecrementOperator_$1_$0>([
            () => this.matchincrementOrDecrementOperator_$1_$0_1($$dpth + 1, $$cr),
            () => this.matchincrementOrDecrementOperator_$1_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchincrementOrDecrementOperator_$1_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_$1_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchincrementOrDecrementOperator_$1_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_$1_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchincrementOrDecrementOperator_$1_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_$1_$1> {
        return this.choice<incrementOrDecrementOperator_$1_$1>([
            () => this.matchincrementOrDecrementOperator_$1_$1_1($$dpth + 1, $$cr),
            () => this.matchincrementOrDecrementOperator_$1_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchincrementOrDecrementOperator_$1_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_$1_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchincrementOrDecrementOperator_$1_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<incrementOrDecrementOperator_$1_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperation($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperation> {
        return this.run<multiplicationOrDivisionOperation>($$dpth,
            () => {
                let $scope$operand1: Nullable<expr>;
                let $scope$spacesLhs: Nullable<multiplicationOrDivisionOperation_$0[]>;
                let $scope$operator: Nullable<multiplicationOrDivisionOperator>;
                let $scope$spacesRhs: Nullable<multiplicationOrDivisionOperation_$1[]>;
                let $scope$operand2: Nullable<expr>;
                let $$res: Nullable<multiplicationOrDivisionOperation> = null;
                if (true
                    && ($scope$operand1 = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesLhs = this.loop<multiplicationOrDivisionOperation_$0>(() => this.matchmultiplicationOrDivisionOperation_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operator = this.matchmultiplicationOrDivisionOperator($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesRhs = this.loop<multiplicationOrDivisionOperation_$1>(() => this.matchmultiplicationOrDivisionOperation_$1($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operand2 = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.multiplicationOrDivisionOperation, operand1: $scope$operand1, spacesLhs: $scope$spacesLhs, operator: $scope$operator, spacesRhs: $scope$spacesRhs, operand2: $scope$operand2};
                }
                return $$res;
            });
    }
    public matchmultiplicationOrDivisionOperation_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperation_$0> {
        return this.choice<multiplicationOrDivisionOperation_$0>([
            () => this.matchmultiplicationOrDivisionOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchmultiplicationOrDivisionOperation_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperation_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperation_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperation_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperation_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperation_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperation_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperation_$1> {
        return this.choice<multiplicationOrDivisionOperation_$1>([
            () => this.matchmultiplicationOrDivisionOperation_$1_1($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperation_$1_2($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperation_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matchmultiplicationOrDivisionOperation_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperation_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperation_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperation_$1_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperation_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperation_$1_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperator($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator> {
        return this.choice<multiplicationOrDivisionOperator>([
            () => this.matchmultiplicationOrDivisionOperator_1($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperator_2($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperator_3($$dpth + 1, $$cr),
        ]);
    }
    public matchmultiplicationOrDivisionOperator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_1> {
        return this.matchmultiplicationOrDivisionOperator_$0($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_2> {
        return this.matchmultiplicationOrDivisionOperator_$1($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperator_3($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_3> {
        return this.matchmultiplicationOrDivisionOperator_$2($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperator_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_$0> {
        return this.run<multiplicationOrDivisionOperator_$0>($$dpth,
            () => {
                let $scope$c1: Nullable<multiplicationOrDivisionOperator_$0_$0[]>;
                let $$res: Nullable<multiplicationOrDivisionOperator_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<multiplicationOrDivisionOperator_$0_$0>(() => this.matchmultiplicationOrDivisionOperator_$0_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new multiplicationOrDivisionOperator_$0($scope$c1);
                }
                return $$res;
            });
    }
    public matchmultiplicationOrDivisionOperator_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_$0_$0> {
        return this.choice<multiplicationOrDivisionOperator_$0_$0>([
            () => this.matchmultiplicationOrDivisionOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchmultiplicationOrDivisionOperator_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_$0_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperator_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_$0_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperator_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_$1> {
        return this.run<multiplicationOrDivisionOperator_$1>($$dpth,
            () => {
                let $scope$c1: Nullable<multiplicationOrDivisionOperator_$1_$0[]>;
                let $$res: Nullable<multiplicationOrDivisionOperator_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\/)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<multiplicationOrDivisionOperator_$1_$0>(() => this.matchmultiplicationOrDivisionOperator_$1_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new multiplicationOrDivisionOperator_$1($scope$c1);
                }
                return $$res;
            });
    }
    public matchmultiplicationOrDivisionOperator_$1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_$1_$0> {
        return this.choice<multiplicationOrDivisionOperator_$1_$0>([
            () => this.matchmultiplicationOrDivisionOperator_$1_$0_1($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperator_$1_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchmultiplicationOrDivisionOperator_$1_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_$1_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperator_$1_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_$1_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperator_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_$2> {
        return this.run<multiplicationOrDivisionOperator_$2>($$dpth,
            () => {
                let $scope$c1: Nullable<multiplicationOrDivisionOperator_$2_$0[]>;
                let $$res: Nullable<multiplicationOrDivisionOperator_$2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\%)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<multiplicationOrDivisionOperator_$2_$0>(() => this.matchmultiplicationOrDivisionOperator_$2_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new multiplicationOrDivisionOperator_$2($scope$c1);
                }
                return $$res;
            });
    }
    public matchmultiplicationOrDivisionOperator_$2_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_$2_$0> {
        return this.choice<multiplicationOrDivisionOperator_$2_$0>([
            () => this.matchmultiplicationOrDivisionOperator_$2_$0_1($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperator_$2_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchmultiplicationOrDivisionOperator_$2_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_$2_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchmultiplicationOrDivisionOperator_$2_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<multiplicationOrDivisionOperator_$2_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchadditionOrSubtractionOperation($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperation> {
        return this.run<additionOrSubtractionOperation>($$dpth,
            () => {
                let $scope$operand1: Nullable<expr>;
                let $scope$spacesLhs: Nullable<additionOrSubtractionOperation_$0[]>;
                let $scope$operator: Nullable<additionOrSubtractionOperator>;
                let $scope$spacesRhs: Nullable<additionOrSubtractionOperation_$1[]>;
                let $scope$operand2: Nullable<expr>;
                let $$res: Nullable<additionOrSubtractionOperation> = null;
                if (true
                    && ($scope$operand1 = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesLhs = this.loop<additionOrSubtractionOperation_$0>(() => this.matchadditionOrSubtractionOperation_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operator = this.matchadditionOrSubtractionOperator($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesRhs = this.loop<additionOrSubtractionOperation_$1>(() => this.matchadditionOrSubtractionOperation_$1($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operand2 = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.additionOrSubtractionOperation, operand1: $scope$operand1, spacesLhs: $scope$spacesLhs, operator: $scope$operator, spacesRhs: $scope$spacesRhs, operand2: $scope$operand2};
                }
                return $$res;
            });
    }
    public matchadditionOrSubtractionOperation_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperation_$0> {
        return this.choice<additionOrSubtractionOperation_$0>([
            () => this.matchadditionOrSubtractionOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchadditionOrSubtractionOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchadditionOrSubtractionOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchadditionOrSubtractionOperation_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperation_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchadditionOrSubtractionOperation_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperation_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchadditionOrSubtractionOperation_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperation_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchadditionOrSubtractionOperation_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperation_$1> {
        return this.choice<additionOrSubtractionOperation_$1>([
            () => this.matchadditionOrSubtractionOperation_$1_1($$dpth + 1, $$cr),
            () => this.matchadditionOrSubtractionOperation_$1_2($$dpth + 1, $$cr),
            () => this.matchadditionOrSubtractionOperation_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matchadditionOrSubtractionOperation_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperation_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchadditionOrSubtractionOperation_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperation_$1_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchadditionOrSubtractionOperation_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperation_$1_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchadditionOrSubtractionOperator($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperator> {
        return this.choice<additionOrSubtractionOperator>([
            () => this.matchadditionOrSubtractionOperator_1($$dpth + 1, $$cr),
            () => this.matchadditionOrSubtractionOperator_2($$dpth + 1, $$cr),
        ]);
    }
    public matchadditionOrSubtractionOperator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperator_1> {
        return this.matchadditionOrSubtractionOperator_$0($$dpth + 1, $$cr);
    }
    public matchadditionOrSubtractionOperator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperator_2> {
        return this.matchadditionOrSubtractionOperator_$1($$dpth + 1, $$cr);
    }
    public matchadditionOrSubtractionOperator_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperator_$0> {
        return this.run<additionOrSubtractionOperator_$0>($$dpth,
            () => {
                let $scope$c1: Nullable<additionOrSubtractionOperator_$0_$0[]>;
                let $$res: Nullable<additionOrSubtractionOperator_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<additionOrSubtractionOperator_$0_$0>(() => this.matchadditionOrSubtractionOperator_$0_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new additionOrSubtractionOperator_$0($scope$c1);
                }
                return $$res;
            });
    }
    public matchadditionOrSubtractionOperator_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperator_$0_$0> {
        return this.choice<additionOrSubtractionOperator_$0_$0>([
            () => this.matchadditionOrSubtractionOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchadditionOrSubtractionOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchadditionOrSubtractionOperator_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperator_$0_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchadditionOrSubtractionOperator_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperator_$0_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchadditionOrSubtractionOperator_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperator_$1> {
        return this.run<additionOrSubtractionOperator_$1>($$dpth,
            () => {
                let $scope$c1: Nullable<additionOrSubtractionOperator_$1_$0[]>;
                let $$res: Nullable<additionOrSubtractionOperator_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\-)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<additionOrSubtractionOperator_$1_$0>(() => this.matchadditionOrSubtractionOperator_$1_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new additionOrSubtractionOperator_$1($scope$c1);
                }
                return $$res;
            });
    }
    public matchadditionOrSubtractionOperator_$1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperator_$1_$0> {
        return this.choice<additionOrSubtractionOperator_$1_$0>([
            () => this.matchadditionOrSubtractionOperator_$1_$0_1($$dpth + 1, $$cr),
            () => this.matchadditionOrSubtractionOperator_$1_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchadditionOrSubtractionOperator_$1_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperator_$1_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchadditionOrSubtractionOperator_$1_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<additionOrSubtractionOperator_$1_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchfeedbackOperation($$dpth: number, $$cr?: ErrorTracker): Nullable<feedbackOperation> {
        return this.run<feedbackOperation>($$dpth,
            () => {
                let $scope$spaces: Nullable<feedbackOperation_$0[]>;
                let $scope$operand: Nullable<variable>;
                let $$res: Nullable<feedbackOperation> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\&)`, $$dpth + 1, $$cr) !== null
                    && ($scope$spaces = this.loop<feedbackOperation_$0>(() => this.matchfeedbackOperation_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operand = this.matchvariable($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.feedbackOperation, spaces: $scope$spaces, operand: $scope$operand};
                }
                return $$res;
            });
    }
    public matchfeedbackOperation_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<feedbackOperation_$0> {
        return this.choice<feedbackOperation_$0>([
            () => this.matchfeedbackOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchfeedbackOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchfeedbackOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchfeedbackOperation_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<feedbackOperation_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchfeedbackOperation_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<feedbackOperation_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchfeedbackOperation_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<feedbackOperation_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperation($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperation> {
        return this.run<comparisonOperation>($$dpth,
            () => {
                let $scope$operand1: Nullable<expr>;
                let $scope$spacesLhs: Nullable<comparisonOperation_$0[]>;
                let $scope$operator: Nullable<comparisonOperator>;
                let $scope$spacesRhs: Nullable<comparisonOperation_$1[]>;
                let $scope$operand2: Nullable<expr>;
                let $$res: Nullable<comparisonOperation> = null;
                if (true
                    && ($scope$operand1 = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesLhs = this.loop<comparisonOperation_$0>(() => this.matchcomparisonOperation_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operator = this.matchcomparisonOperator($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesRhs = this.loop<comparisonOperation_$1>(() => this.matchcomparisonOperation_$1($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operand2 = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.comparisonOperation, operand1: $scope$operand1, spacesLhs: $scope$spacesLhs, operator: $scope$operator, spacesRhs: $scope$spacesRhs, operand2: $scope$operand2};
                }
                return $$res;
            });
    }
    public matchcomparisonOperation_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperation_$0> {
        return this.choice<comparisonOperation_$0>([
            () => this.matchcomparisonOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchcomparisonOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperation_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperation_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchcomparisonOperation_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperation_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperation_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperation_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperation_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperation_$1> {
        return this.choice<comparisonOperation_$1>([
            () => this.matchcomparisonOperation_$1_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperation_$1_2($$dpth + 1, $$cr),
            () => this.matchcomparisonOperation_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperation_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperation_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchcomparisonOperation_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperation_$1_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperation_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperation_$1_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator> {
        return this.choice<comparisonOperator>([
            () => this.matchcomparisonOperator_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_2($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_3($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_4($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_5($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_6($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_7($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_8($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_1> {
        return this.matchcomparisonOperator_$0($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_2> {
        return this.matchcomparisonOperator_$1($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_3($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_3> {
        return this.matchcomparisonOperator_$2($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_4($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_4> {
        return this.matchcomparisonOperator_$3($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_5($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_5> {
        return this.matchcomparisonOperator_$4($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_6($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_6> {
        return this.matchcomparisonOperator_$5($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_7($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_7> {
        return this.matchcomparisonOperator_$6($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_8($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_8> {
        return this.matchcomparisonOperator_$7($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$0> {
        return this.run<comparisonOperator_$0>($$dpth,
            () => {
                let $scope$c1: Nullable<comparisonOperator_$0_$0[]>;
                let $scope$c2: Nullable<comparisonOperator_$0_$1[]>;
                let $$res: Nullable<comparisonOperator_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<comparisonOperator_$0_$0>(() => this.matchcomparisonOperator_$0_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<comparisonOperator_$0_$1>(() => this.matchcomparisonOperator_$0_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new comparisonOperator_$0($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchcomparisonOperator_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$0_$0> {
        return this.choice<comparisonOperator_$0_$0>([
            () => this.matchcomparisonOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$0_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$0_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$0_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$0_$1> {
        return this.choice<comparisonOperator_$0_$1>([
            () => this.matchcomparisonOperator_$0_$1_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$0_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$0_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$0_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$0_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$0_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$1> {
        return this.run<comparisonOperator_$1>($$dpth,
            () => {
                let $scope$c1: Nullable<comparisonOperator_$1_$0[]>;
                let $scope$c2: Nullable<comparisonOperator_$1_$1[]>;
                let $$res: Nullable<comparisonOperator_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\!)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<comparisonOperator_$1_$0>(() => this.matchcomparisonOperator_$1_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<comparisonOperator_$1_$1>(() => this.matchcomparisonOperator_$1_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new comparisonOperator_$1($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchcomparisonOperator_$1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$1_$0> {
        return this.choice<comparisonOperator_$1_$0>([
            () => this.matchcomparisonOperator_$1_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$1_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$1_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$1_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$1_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$1_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$1_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$1_$1> {
        return this.choice<comparisonOperator_$1_$1>([
            () => this.matchcomparisonOperator_$1_$1_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$1_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$1_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$1_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$1_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$1_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$2> {
        return this.run<comparisonOperator_$2>($$dpth,
            () => {
                let $scope$c1: Nullable<comparisonOperator_$2_$0[]>;
                let $scope$c2: Nullable<comparisonOperator_$2_$1[]>;
                let $$res: Nullable<comparisonOperator_$2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\>)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<comparisonOperator_$2_$0>(() => this.matchcomparisonOperator_$2_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<comparisonOperator_$2_$1>(() => this.matchcomparisonOperator_$2_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new comparisonOperator_$2($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchcomparisonOperator_$2_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$2_$0> {
        return this.choice<comparisonOperator_$2_$0>([
            () => this.matchcomparisonOperator_$2_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$2_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$2_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$2_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$2_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$2_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$2_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$2_$1> {
        return this.choice<comparisonOperator_$2_$1>([
            () => this.matchcomparisonOperator_$2_$1_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$2_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$2_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$2_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$2_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$2_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$3> {
        return this.run<comparisonOperator_$3>($$dpth,
            () => {
                let $scope$c1: Nullable<comparisonOperator_$3_$0[]>;
                let $scope$c2: Nullable<comparisonOperator_$3_$1[]>;
                let $$res: Nullable<comparisonOperator_$3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\<)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<comparisonOperator_$3_$0>(() => this.matchcomparisonOperator_$3_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<comparisonOperator_$3_$1>(() => this.matchcomparisonOperator_$3_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new comparisonOperator_$3($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchcomparisonOperator_$3_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$3_$0> {
        return this.choice<comparisonOperator_$3_$0>([
            () => this.matchcomparisonOperator_$3_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$3_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$3_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$3_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$3_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$3_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$3_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$3_$1> {
        return this.choice<comparisonOperator_$3_$1>([
            () => this.matchcomparisonOperator_$3_$1_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$3_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$3_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$3_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$3_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$3_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$4($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$4> {
        return this.run<comparisonOperator_$4>($$dpth,
            () => {
                let $scope$c1: Nullable<comparisonOperator_$4_$0[]>;
                let $$res: Nullable<comparisonOperator_$4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\<)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<comparisonOperator_$4_$0>(() => this.matchcomparisonOperator_$4_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new comparisonOperator_$4($scope$c1);
                }
                return $$res;
            });
    }
    public matchcomparisonOperator_$4_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$4_$0> {
        return this.choice<comparisonOperator_$4_$0>([
            () => this.matchcomparisonOperator_$4_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$4_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$4_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$4_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$4_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$4_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$5($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$5> {
        return this.run<comparisonOperator_$5>($$dpth,
            () => {
                let $scope$c1: Nullable<comparisonOperator_$5_$0[]>;
                let $$res: Nullable<comparisonOperator_$5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\>)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<comparisonOperator_$5_$0>(() => this.matchcomparisonOperator_$5_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new comparisonOperator_$5($scope$c1);
                }
                return $$res;
            });
    }
    public matchcomparisonOperator_$5_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$5_$0> {
        return this.choice<comparisonOperator_$5_$0>([
            () => this.matchcomparisonOperator_$5_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$5_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$5_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$5_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$5_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$5_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$6($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$6> {
        return this.run<comparisonOperator_$6>($$dpth,
            () => {
                let $scope$c1: Nullable<comparisonOperator_$6_$0[]>;
                let $scope$c2: Nullable<comparisonOperator_$6_$1[]>;
                let $scope$c3: Nullable<comparisonOperator_$6_$2[]>;
                let $scope$c4: Nullable<comparisonOperator_$6_$3[]>;
                let $$res: Nullable<comparisonOperator_$6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\_)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<comparisonOperator_$6_$0>(() => this.matchcomparisonOperator_$6_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:i)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<comparisonOperator_$6_$1>(() => this.matchcomparisonOperator_$6_$1($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:n)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<comparisonOperator_$6_$2>(() => this.matchcomparisonOperator_$6_$2($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\_)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<comparisonOperator_$6_$3>(() => this.matchcomparisonOperator_$6_$3($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new comparisonOperator_$6($scope$c1, $scope$c2, $scope$c3, $scope$c4);
                }
                return $$res;
            });
    }
    public matchcomparisonOperator_$6_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$6_$0> {
        return this.choice<comparisonOperator_$6_$0>([
            () => this.matchcomparisonOperator_$6_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$6_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$6_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$6_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$6_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$6_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$6_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$6_$1> {
        return this.choice<comparisonOperator_$6_$1>([
            () => this.matchcomparisonOperator_$6_$1_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$6_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$6_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$6_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$6_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$6_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$6_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$6_$2> {
        return this.choice<comparisonOperator_$6_$2>([
            () => this.matchcomparisonOperator_$6_$2_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$6_$2_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$6_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$6_$2_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$6_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$6_$2_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$6_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$6_$3> {
        return this.choice<comparisonOperator_$6_$3>([
            () => this.matchcomparisonOperator_$6_$3_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$6_$3_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$6_$3_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$6_$3_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$6_$3_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$6_$3_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$7($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7> {
        return this.run<comparisonOperator_$7>($$dpth,
            () => {
                let $scope$c1: Nullable<comparisonOperator_$7_$0[]>;
                let $scope$c2: Nullable<comparisonOperator_$7_$1[]>;
                let $scope$c3: Nullable<comparisonOperator_$7_$2[]>;
                let $scope$c4: Nullable<comparisonOperator_$7_$3[]>;
                let $scope$c5: Nullable<comparisonOperator_$7_$4[]>;
                let $$res: Nullable<comparisonOperator_$7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\!)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<comparisonOperator_$7_$0>(() => this.matchcomparisonOperator_$7_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\_)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<comparisonOperator_$7_$1>(() => this.matchcomparisonOperator_$7_$1($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:i)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<comparisonOperator_$7_$2>(() => this.matchcomparisonOperator_$7_$2($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:n)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<comparisonOperator_$7_$3>(() => this.matchcomparisonOperator_$7_$3($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\_)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<comparisonOperator_$7_$4>(() => this.matchcomparisonOperator_$7_$4($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new comparisonOperator_$7($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5);
                }
                return $$res;
            });
    }
    public matchcomparisonOperator_$7_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$0> {
        return this.choice<comparisonOperator_$7_$0>([
            () => this.matchcomparisonOperator_$7_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$7_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$7_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$7_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$7_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$1> {
        return this.choice<comparisonOperator_$7_$1>([
            () => this.matchcomparisonOperator_$7_$1_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$7_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$7_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$7_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$7_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$2> {
        return this.choice<comparisonOperator_$7_$2>([
            () => this.matchcomparisonOperator_$7_$2_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$7_$2_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$7_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$2_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$7_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$2_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$7_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$3> {
        return this.choice<comparisonOperator_$7_$3>([
            () => this.matchcomparisonOperator_$7_$3_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$7_$3_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$7_$3_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$3_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$7_$3_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$3_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$7_$4($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$4> {
        return this.choice<comparisonOperator_$7_$4>([
            () => this.matchcomparisonOperator_$7_$4_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$7_$4_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcomparisonOperator_$7_$4_1($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$4_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchcomparisonOperator_$7_$4_2($$dpth: number, $$cr?: ErrorTracker): Nullable<comparisonOperator_$7_$4_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchlogicalConjunction($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunction> {
        return this.run<logicalConjunction>($$dpth,
            () => {
                let $scope$operand1: Nullable<expr>;
                let $scope$spacesLhs: Nullable<logicalConjunction_$0[]>;
                let $scope$operator: Nullable<logicalConjunctionOperator>;
                let $scope$spacesRhs: Nullable<logicalConjunction_$1[]>;
                let $scope$operand2: Nullable<expr>;
                let $$res: Nullable<logicalConjunction> = null;
                if (true
                    && ($scope$operand1 = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesLhs = this.loop<logicalConjunction_$0>(() => this.matchlogicalConjunction_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operator = this.matchlogicalConjunctionOperator($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesRhs = this.loop<logicalConjunction_$1>(() => this.matchlogicalConjunction_$1($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operand2 = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.logicalConjunction, operand1: $scope$operand1, spacesLhs: $scope$spacesLhs, operator: $scope$operator, spacesRhs: $scope$spacesRhs, operand2: $scope$operand2};
                }
                return $$res;
            });
    }
    public matchlogicalConjunction_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunction_$0> {
        return this.choice<logicalConjunction_$0>([
            () => this.matchlogicalConjunction_$0_1($$dpth + 1, $$cr),
            () => this.matchlogicalConjunction_$0_2($$dpth + 1, $$cr),
            () => this.matchlogicalConjunction_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalConjunction_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunction_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchlogicalConjunction_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunction_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchlogicalConjunction_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunction_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchlogicalConjunction_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunction_$1> {
        return this.choice<logicalConjunction_$1>([
            () => this.matchlogicalConjunction_$1_1($$dpth + 1, $$cr),
            () => this.matchlogicalConjunction_$1_2($$dpth + 1, $$cr),
            () => this.matchlogicalConjunction_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalConjunction_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunction_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchlogicalConjunction_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunction_$1_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchlogicalConjunction_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunction_$1_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchlogicalConjunctionOperator($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunctionOperator> {
        return this.matchlogicalConjunctionOperator_$0($$dpth + 1, $$cr);
    }
    public matchlogicalConjunctionOperator_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunctionOperator_$0> {
        return this.run<logicalConjunctionOperator_$0>($$dpth,
            () => {
                let $scope$c1: Nullable<logicalConjunctionOperator_$0_$0[]>;
                let $scope$c2: Nullable<logicalConjunctionOperator_$0_$1[]>;
                let $$res: Nullable<logicalConjunctionOperator_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\&)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<logicalConjunctionOperator_$0_$0>(() => this.matchlogicalConjunctionOperator_$0_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\&)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<logicalConjunctionOperator_$0_$1>(() => this.matchlogicalConjunctionOperator_$0_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new logicalConjunctionOperator_$0($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchlogicalConjunctionOperator_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunctionOperator_$0_$0> {
        return this.choice<logicalConjunctionOperator_$0_$0>([
            () => this.matchlogicalConjunctionOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchlogicalConjunctionOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalConjunctionOperator_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunctionOperator_$0_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchlogicalConjunctionOperator_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunctionOperator_$0_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchlogicalConjunctionOperator_$0_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunctionOperator_$0_$1> {
        return this.choice<logicalConjunctionOperator_$0_$1>([
            () => this.matchlogicalConjunctionOperator_$0_$1_1($$dpth + 1, $$cr),
            () => this.matchlogicalConjunctionOperator_$0_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalConjunctionOperator_$0_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunctionOperator_$0_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchlogicalConjunctionOperator_$0_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalConjunctionOperator_$0_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchlogicalDisjunction($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunction> {
        return this.run<logicalDisjunction>($$dpth,
            () => {
                let $scope$operand1: Nullable<expr>;
                let $scope$spacesLhs: Nullable<logicalDisjunction_$0[]>;
                let $scope$operator: Nullable<logicalDisjunctionOperator>;
                let $scope$spacesRhs: Nullable<logicalDisjunction_$1[]>;
                let $scope$operand2: Nullable<expr>;
                let $$res: Nullable<logicalDisjunction> = null;
                if (true
                    && ($scope$operand1 = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesLhs = this.loop<logicalDisjunction_$0>(() => this.matchlogicalDisjunction_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operator = this.matchlogicalDisjunctionOperator($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesRhs = this.loop<logicalDisjunction_$1>(() => this.matchlogicalDisjunction_$1($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operand2 = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.logicalDisjunction, operand1: $scope$operand1, spacesLhs: $scope$spacesLhs, operator: $scope$operator, spacesRhs: $scope$spacesRhs, operand2: $scope$operand2};
                }
                return $$res;
            });
    }
    public matchlogicalDisjunction_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunction_$0> {
        return this.choice<logicalDisjunction_$0>([
            () => this.matchlogicalDisjunction_$0_1($$dpth + 1, $$cr),
            () => this.matchlogicalDisjunction_$0_2($$dpth + 1, $$cr),
            () => this.matchlogicalDisjunction_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalDisjunction_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunction_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchlogicalDisjunction_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunction_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchlogicalDisjunction_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunction_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchlogicalDisjunction_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunction_$1> {
        return this.choice<logicalDisjunction_$1>([
            () => this.matchlogicalDisjunction_$1_1($$dpth + 1, $$cr),
            () => this.matchlogicalDisjunction_$1_2($$dpth + 1, $$cr),
            () => this.matchlogicalDisjunction_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalDisjunction_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunction_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchlogicalDisjunction_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunction_$1_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchlogicalDisjunction_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunction_$1_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchlogicalDisjunctionOperator($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunctionOperator> {
        return this.matchlogicalDisjunctionOperator_$0($$dpth + 1, $$cr);
    }
    public matchlogicalDisjunctionOperator_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunctionOperator_$0> {
        return this.run<logicalDisjunctionOperator_$0>($$dpth,
            () => {
                let $scope$c1: Nullable<logicalDisjunctionOperator_$0_$0[]>;
                let $scope$c2: Nullable<logicalDisjunctionOperator_$0_$1[]>;
                let $$res: Nullable<logicalDisjunctionOperator_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\|)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<logicalDisjunctionOperator_$0_$0>(() => this.matchlogicalDisjunctionOperator_$0_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\|)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<logicalDisjunctionOperator_$0_$1>(() => this.matchlogicalDisjunctionOperator_$0_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new logicalDisjunctionOperator_$0($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchlogicalDisjunctionOperator_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunctionOperator_$0_$0> {
        return this.choice<logicalDisjunctionOperator_$0_$0>([
            () => this.matchlogicalDisjunctionOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchlogicalDisjunctionOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalDisjunctionOperator_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunctionOperator_$0_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchlogicalDisjunctionOperator_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunctionOperator_$0_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchlogicalDisjunctionOperator_$0_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunctionOperator_$0_$1> {
        return this.choice<logicalDisjunctionOperator_$0_$1>([
            () => this.matchlogicalDisjunctionOperator_$0_$1_1($$dpth + 1, $$cr),
            () => this.matchlogicalDisjunctionOperator_$0_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchlogicalDisjunctionOperator_$0_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunctionOperator_$0_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchlogicalDisjunctionOperator_$0_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<logicalDisjunctionOperator_$0_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitution($$dpth: number, $$cr?: ErrorTracker): Nullable<substitution> {
        return this.run<substitution>($$dpth,
            () => {
                let $scope$operand1: Nullable<substitution_$0>;
                let $scope$spacesLhs: Nullable<substitution_$1[]>;
                let $scope$operator: Nullable<substitutionOperator>;
                let $scope$spacesRhs: Nullable<substitution_$2[]>;
                let $scope$operand2: Nullable<expr>;
                let $$res: Nullable<substitution> = null;
                if (true
                    && ($scope$operand1 = this.matchsubstitution_$0($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesLhs = this.loop<substitution_$1>(() => this.matchsubstitution_$1($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operator = this.matchsubstitutionOperator($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesRhs = this.loop<substitution_$2>(() => this.matchsubstitution_$2($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operand2 = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.substitution, operand1: $scope$operand1, spacesLhs: $scope$spacesLhs, operator: $scope$operator, spacesRhs: $scope$spacesRhs, operand2: $scope$operand2};
                }
                return $$res;
            });
    }
    public matchsubstitution_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitution_$0> {
        return this.choice<substitution_$0>([
            () => this.matchsubstitution_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitution_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitution_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitution_$0_1> {
        return this.matcharrayCall($$dpth + 1, $$cr);
    }
    public matchsubstitution_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitution_$0_2> {
        return this.matchvariable($$dpth + 1, $$cr);
    }
    public matchsubstitution_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitution_$1> {
        return this.choice<substitution_$1>([
            () => this.matchsubstitution_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitution_$1_2($$dpth + 1, $$cr),
            () => this.matchsubstitution_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitution_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitution_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchsubstitution_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitution_$1_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitution_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<substitution_$1_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitution_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitution_$2> {
        return this.choice<substitution_$2>([
            () => this.matchsubstitution_$2_1($$dpth + 1, $$cr),
            () => this.matchsubstitution_$2_2($$dpth + 1, $$cr),
            () => this.matchsubstitution_$2_3($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitution_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitution_$2_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchsubstitution_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitution_$2_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitution_$2_3($$dpth: number, $$cr?: ErrorTracker): Nullable<substitution_$2_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperator($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperator> {
        return this.choice<substitutionOperator>([
            () => this.matchsubstitutionOperator_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperator_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperator_1> {
        return this.matchsubstitutionOperator_$0($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperator_2> {
        return this.matchsubstitutionOperator_$1($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperator_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperator_$0> {
        return this.run<substitutionOperator_$0>($$dpth,
            () => {
                let $scope$c1: Nullable<substitutionOperator_$0_$0[]>;
                let $$res: Nullable<substitutionOperator_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<substitutionOperator_$0_$0>(() => this.matchsubstitutionOperator_$0_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new substitutionOperator_$0($scope$c1);
                }
                return $$res;
            });
    }
    public matchsubstitutionOperator_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperator_$0_$0> {
        return this.choice<substitutionOperator_$0_$0>([
            () => this.matchsubstitutionOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperator_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperator_$0_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperator_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperator_$0_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperator_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperator_$1> {
        return this.run<substitutionOperator_$1>($$dpth,
            () => {
                let $scope$c1: Nullable<substitutionOperator_$1_$0[]>;
                let $scope$c2: Nullable<substitutionOperator_$1_$1[]>;
                let $$res: Nullable<substitutionOperator_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\:)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<substitutionOperator_$1_$0>(() => this.matchsubstitutionOperator_$1_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<substitutionOperator_$1_$1>(() => this.matchsubstitutionOperator_$1_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new substitutionOperator_$1($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchsubstitutionOperator_$1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperator_$1_$0> {
        return this.choice<substitutionOperator_$1_$0>([
            () => this.matchsubstitutionOperator_$1_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperator_$1_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperator_$1_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperator_$1_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperator_$1_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperator_$1_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperator_$1_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperator_$1_$1> {
        return this.choice<substitutionOperator_$1_$1>([
            () => this.matchsubstitutionOperator_$1_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperator_$1_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperator_$1_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperator_$1_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperator_$1_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperator_$1_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperation($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperation> {
        return this.run<substitutionOperation>($$dpth,
            () => {
                let $scope$operand1: Nullable<substitutionOperation_$0>;
                let $scope$spacesLhs: Nullable<substitutionOperation_$1[]>;
                let $scope$operator: Nullable<substitutionOperationOperator>;
                let $scope$spacesRhs: Nullable<substitutionOperation_$2[]>;
                let $scope$operand2: Nullable<expr>;
                let $$res: Nullable<substitutionOperation> = null;
                if (true
                    && ($scope$operand1 = this.matchsubstitutionOperation_$0($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesLhs = this.loop<substitutionOperation_$1>(() => this.matchsubstitutionOperation_$1($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operator = this.matchsubstitutionOperationOperator($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesRhs = this.loop<substitutionOperation_$2>(() => this.matchsubstitutionOperation_$2($$dpth + 1, $$cr), true)) !== null
                    && ($scope$operand2 = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.substitutionOperation, operand1: $scope$operand1, spacesLhs: $scope$spacesLhs, operator: $scope$operator, spacesRhs: $scope$spacesRhs, operand2: $scope$operand2};
                }
                return $$res;
            });
    }
    public matchsubstitutionOperation_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperation_$0> {
        return this.choice<substitutionOperation_$0>([
            () => this.matchsubstitutionOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperation_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperation_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperation_$0_1> {
        return this.matcharrayCall($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperation_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperation_$0_2> {
        return this.matchvariable($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperation_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperation_$1> {
        return this.choice<substitutionOperation_$1>([
            () => this.matchsubstitutionOperation_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperation_$1_2($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperation_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperation_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperation_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperation_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperation_$1_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperation_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperation_$1_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperation_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperation_$2> {
        return this.choice<substitutionOperation_$2>([
            () => this.matchsubstitutionOperation_$2_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperation_$2_2($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperation_$2_3($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperation_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperation_$2_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperation_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperation_$2_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperation_$2_3($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperation_$2_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator> {
        return this.choice<substitutionOperationOperator>([
            () => this.matchsubstitutionOperationOperator_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_2($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_3($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_4($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_5($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_6($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_7($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_8($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_9($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_10($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_11($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_1> {
        return this.matchsubstitutionOperationOperator_$0($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_2> {
        return this.matchsubstitutionOperationOperator_$1($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_3($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_3> {
        return this.matchsubstitutionOperationOperator_$2($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_4($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_4> {
        return this.matchsubstitutionOperationOperator_$3($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_5($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_5> {
        return this.matchsubstitutionOperationOperator_$4($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_6($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_6> {
        return this.matchsubstitutionOperationOperator_$5($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_7($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_7> {
        return this.matchsubstitutionOperationOperator_$6($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_8($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_8> {
        return this.matchsubstitutionOperationOperator_$7($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_9($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_9> {
        return this.matchsubstitutionOperationOperator_$8($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_10($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_10> {
        return this.matchsubstitutionOperationOperator_$9($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_11($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_11> {
        return this.matchsubstitutionOperationOperator_$10($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$0> {
        return this.run<substitutionOperationOperator_$0>($$dpth,
            () => {
                let $scope$c1: Nullable<substitutionOperationOperator_$0_$0[]>;
                let $scope$c2: Nullable<substitutionOperationOperator_$0_$1[]>;
                let $$res: Nullable<substitutionOperationOperator_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<substitutionOperationOperator_$0_$0>(() => this.matchsubstitutionOperationOperator_$0_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<substitutionOperationOperator_$0_$1>(() => this.matchsubstitutionOperationOperator_$0_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new substitutionOperationOperator_$0($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchsubstitutionOperationOperator_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$0_$0> {
        return this.choice<substitutionOperationOperator_$0_$0>([
            () => this.matchsubstitutionOperationOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$0_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$0_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$0_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$0_$1> {
        return this.choice<substitutionOperationOperator_$0_$1>([
            () => this.matchsubstitutionOperationOperator_$0_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$0_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$0_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$0_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$0_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$0_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$1> {
        return this.run<substitutionOperationOperator_$1>($$dpth,
            () => {
                let $scope$c1: Nullable<substitutionOperationOperator_$1_$0[]>;
                let $scope$c2: Nullable<substitutionOperationOperator_$1_$1[]>;
                let $$res: Nullable<substitutionOperationOperator_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\-)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<substitutionOperationOperator_$1_$0>(() => this.matchsubstitutionOperationOperator_$1_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<substitutionOperationOperator_$1_$1>(() => this.matchsubstitutionOperationOperator_$1_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new substitutionOperationOperator_$1($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchsubstitutionOperationOperator_$1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$1_$0> {
        return this.choice<substitutionOperationOperator_$1_$0>([
            () => this.matchsubstitutionOperationOperator_$1_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$1_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$1_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$1_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$1_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$1_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$1_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$1_$1> {
        return this.choice<substitutionOperationOperator_$1_$1>([
            () => this.matchsubstitutionOperationOperator_$1_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$1_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$1_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$1_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$1_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$1_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$2> {
        return this.run<substitutionOperationOperator_$2>($$dpth,
            () => {
                let $scope$c1: Nullable<substitutionOperationOperator_$2_$0[]>;
                let $scope$c2: Nullable<substitutionOperationOperator_$2_$1[]>;
                let $$res: Nullable<substitutionOperationOperator_$2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<substitutionOperationOperator_$2_$0>(() => this.matchsubstitutionOperationOperator_$2_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<substitutionOperationOperator_$2_$1>(() => this.matchsubstitutionOperationOperator_$2_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new substitutionOperationOperator_$2($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchsubstitutionOperationOperator_$2_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$2_$0> {
        return this.choice<substitutionOperationOperator_$2_$0>([
            () => this.matchsubstitutionOperationOperator_$2_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$2_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$2_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$2_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$2_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$2_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$2_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$2_$1> {
        return this.choice<substitutionOperationOperator_$2_$1>([
            () => this.matchsubstitutionOperationOperator_$2_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$2_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$2_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$2_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$2_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$2_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$3> {
        return this.run<substitutionOperationOperator_$3>($$dpth,
            () => {
                let $scope$c1: Nullable<substitutionOperationOperator_$3_$0[]>;
                let $scope$c2: Nullable<substitutionOperationOperator_$3_$1[]>;
                let $$res: Nullable<substitutionOperationOperator_$3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\/)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<substitutionOperationOperator_$3_$0>(() => this.matchsubstitutionOperationOperator_$3_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<substitutionOperationOperator_$3_$1>(() => this.matchsubstitutionOperationOperator_$3_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new substitutionOperationOperator_$3($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchsubstitutionOperationOperator_$3_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$3_$0> {
        return this.choice<substitutionOperationOperator_$3_$0>([
            () => this.matchsubstitutionOperationOperator_$3_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$3_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$3_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$3_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$3_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$3_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$3_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$3_$1> {
        return this.choice<substitutionOperationOperator_$3_$1>([
            () => this.matchsubstitutionOperationOperator_$3_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$3_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$3_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$3_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$3_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$3_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$4($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$4> {
        return this.run<substitutionOperationOperator_$4>($$dpth,
            () => {
                let $scope$c1: Nullable<substitutionOperationOperator_$4_$0[]>;
                let $scope$c2: Nullable<substitutionOperationOperator_$4_$1[]>;
                let $$res: Nullable<substitutionOperationOperator_$4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\%)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<substitutionOperationOperator_$4_$0>(() => this.matchsubstitutionOperationOperator_$4_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<substitutionOperationOperator_$4_$1>(() => this.matchsubstitutionOperationOperator_$4_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new substitutionOperationOperator_$4($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchsubstitutionOperationOperator_$4_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$4_$0> {
        return this.choice<substitutionOperationOperator_$4_$0>([
            () => this.matchsubstitutionOperationOperator_$4_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$4_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$4_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$4_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$4_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$4_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$4_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$4_$1> {
        return this.choice<substitutionOperationOperator_$4_$1>([
            () => this.matchsubstitutionOperationOperator_$4_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$4_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$4_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$4_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$4_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$4_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$5($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$5> {
        return this.run<substitutionOperationOperator_$5>($$dpth,
            () => {
                let $scope$c1: Nullable<substitutionOperationOperator_$5_$0[]>;
                let $scope$c2: Nullable<substitutionOperationOperator_$5_$1[]>;
                let $scope$c3: Nullable<substitutionOperationOperator_$5_$2[]>;
                let $$res: Nullable<substitutionOperationOperator_$5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<substitutionOperationOperator_$5_$0>(() => this.matchsubstitutionOperationOperator_$5_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\:)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<substitutionOperationOperator_$5_$1>(() => this.matchsubstitutionOperationOperator_$5_$1($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<substitutionOperationOperator_$5_$2>(() => this.matchsubstitutionOperationOperator_$5_$2($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new substitutionOperationOperator_$5($scope$c1, $scope$c2, $scope$c3);
                }
                return $$res;
            });
    }
    public matchsubstitutionOperationOperator_$5_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$5_$0> {
        return this.choice<substitutionOperationOperator_$5_$0>([
            () => this.matchsubstitutionOperationOperator_$5_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$5_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$5_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$5_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$5_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$5_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$5_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$5_$1> {
        return this.choice<substitutionOperationOperator_$5_$1>([
            () => this.matchsubstitutionOperationOperator_$5_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$5_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$5_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$5_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$5_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$5_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$5_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$5_$2> {
        return this.choice<substitutionOperationOperator_$5_$2>([
            () => this.matchsubstitutionOperationOperator_$5_$2_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$5_$2_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$5_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$5_$2_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$5_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$5_$2_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$6($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$6> {
        return this.run<substitutionOperationOperator_$6>($$dpth,
            () => {
                let $scope$c1: Nullable<substitutionOperationOperator_$6_$0[]>;
                let $scope$c2: Nullable<substitutionOperationOperator_$6_$1[]>;
                let $scope$c3: Nullable<substitutionOperationOperator_$6_$2[]>;
                let $$res: Nullable<substitutionOperationOperator_$6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\-)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<substitutionOperationOperator_$6_$0>(() => this.matchsubstitutionOperationOperator_$6_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\:)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<substitutionOperationOperator_$6_$1>(() => this.matchsubstitutionOperationOperator_$6_$1($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<substitutionOperationOperator_$6_$2>(() => this.matchsubstitutionOperationOperator_$6_$2($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new substitutionOperationOperator_$6($scope$c1, $scope$c2, $scope$c3);
                }
                return $$res;
            });
    }
    public matchsubstitutionOperationOperator_$6_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$6_$0> {
        return this.choice<substitutionOperationOperator_$6_$0>([
            () => this.matchsubstitutionOperationOperator_$6_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$6_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$6_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$6_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$6_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$6_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$6_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$6_$1> {
        return this.choice<substitutionOperationOperator_$6_$1>([
            () => this.matchsubstitutionOperationOperator_$6_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$6_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$6_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$6_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$6_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$6_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$6_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$6_$2> {
        return this.choice<substitutionOperationOperator_$6_$2>([
            () => this.matchsubstitutionOperationOperator_$6_$2_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$6_$2_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$6_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$6_$2_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$6_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$6_$2_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$7($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$7> {
        return this.run<substitutionOperationOperator_$7>($$dpth,
            () => {
                let $scope$c1: Nullable<substitutionOperationOperator_$7_$0[]>;
                let $scope$c2: Nullable<substitutionOperationOperator_$7_$1[]>;
                let $scope$c3: Nullable<substitutionOperationOperator_$7_$2[]>;
                let $$res: Nullable<substitutionOperationOperator_$7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<substitutionOperationOperator_$7_$0>(() => this.matchsubstitutionOperationOperator_$7_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\:)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<substitutionOperationOperator_$7_$1>(() => this.matchsubstitutionOperationOperator_$7_$1($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<substitutionOperationOperator_$7_$2>(() => this.matchsubstitutionOperationOperator_$7_$2($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new substitutionOperationOperator_$7($scope$c1, $scope$c2, $scope$c3);
                }
                return $$res;
            });
    }
    public matchsubstitutionOperationOperator_$7_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$7_$0> {
        return this.choice<substitutionOperationOperator_$7_$0>([
            () => this.matchsubstitutionOperationOperator_$7_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$7_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$7_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$7_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$7_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$7_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$7_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$7_$1> {
        return this.choice<substitutionOperationOperator_$7_$1>([
            () => this.matchsubstitutionOperationOperator_$7_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$7_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$7_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$7_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$7_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$7_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$7_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$7_$2> {
        return this.choice<substitutionOperationOperator_$7_$2>([
            () => this.matchsubstitutionOperationOperator_$7_$2_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$7_$2_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$7_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$7_$2_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$7_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$7_$2_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$8($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$8> {
        return this.run<substitutionOperationOperator_$8>($$dpth,
            () => {
                let $scope$c1: Nullable<substitutionOperationOperator_$8_$0[]>;
                let $scope$c2: Nullable<substitutionOperationOperator_$8_$1[]>;
                let $scope$c3: Nullable<substitutionOperationOperator_$8_$2[]>;
                let $$res: Nullable<substitutionOperationOperator_$8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\/)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<substitutionOperationOperator_$8_$0>(() => this.matchsubstitutionOperationOperator_$8_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\:)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<substitutionOperationOperator_$8_$1>(() => this.matchsubstitutionOperationOperator_$8_$1($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<substitutionOperationOperator_$8_$2>(() => this.matchsubstitutionOperationOperator_$8_$2($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new substitutionOperationOperator_$8($scope$c1, $scope$c2, $scope$c3);
                }
                return $$res;
            });
    }
    public matchsubstitutionOperationOperator_$8_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$8_$0> {
        return this.choice<substitutionOperationOperator_$8_$0>([
            () => this.matchsubstitutionOperationOperator_$8_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$8_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$8_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$8_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$8_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$8_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$8_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$8_$1> {
        return this.choice<substitutionOperationOperator_$8_$1>([
            () => this.matchsubstitutionOperationOperator_$8_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$8_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$8_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$8_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$8_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$8_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$8_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$8_$2> {
        return this.choice<substitutionOperationOperator_$8_$2>([
            () => this.matchsubstitutionOperationOperator_$8_$2_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$8_$2_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$8_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$8_$2_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$8_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$8_$2_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$9($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$9> {
        return this.run<substitutionOperationOperator_$9>($$dpth,
            () => {
                let $scope$c1: Nullable<substitutionOperationOperator_$9_$0[]>;
                let $scope$c2: Nullable<substitutionOperationOperator_$9_$1[]>;
                let $scope$c3: Nullable<substitutionOperationOperator_$9_$2[]>;
                let $$res: Nullable<substitutionOperationOperator_$9> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\%)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<substitutionOperationOperator_$9_$0>(() => this.matchsubstitutionOperationOperator_$9_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\:)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<substitutionOperationOperator_$9_$1>(() => this.matchsubstitutionOperationOperator_$9_$1($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<substitutionOperationOperator_$9_$2>(() => this.matchsubstitutionOperationOperator_$9_$2($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new substitutionOperationOperator_$9($scope$c1, $scope$c2, $scope$c3);
                }
                return $$res;
            });
    }
    public matchsubstitutionOperationOperator_$9_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$9_$0> {
        return this.choice<substitutionOperationOperator_$9_$0>([
            () => this.matchsubstitutionOperationOperator_$9_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$9_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$9_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$9_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$9_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$9_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$9_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$9_$1> {
        return this.choice<substitutionOperationOperator_$9_$1>([
            () => this.matchsubstitutionOperationOperator_$9_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$9_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$9_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$9_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$9_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$9_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$9_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$9_$2> {
        return this.choice<substitutionOperationOperator_$9_$2>([
            () => this.matchsubstitutionOperationOperator_$9_$2_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$9_$2_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$9_$2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$9_$2_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$9_$2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$9_$2_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$10($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$10> {
        return this.run<substitutionOperationOperator_$10>($$dpth,
            () => {
                let $scope$c1: Nullable<substitutionOperationOperator_$10_$0[]>;
                let $scope$c2: Nullable<substitutionOperationOperator_$10_$1[]>;
                let $$res: Nullable<substitutionOperationOperator_$10> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\,)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<substitutionOperationOperator_$10_$0>(() => this.matchsubstitutionOperationOperator_$10_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<substitutionOperationOperator_$10_$1>(() => this.matchsubstitutionOperationOperator_$10_$1($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new substitutionOperationOperator_$10($scope$c1, $scope$c2);
                }
                return $$res;
            });
    }
    public matchsubstitutionOperationOperator_$10_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$10_$0> {
        return this.choice<substitutionOperationOperator_$10_$0>([
            () => this.matchsubstitutionOperationOperator_$10_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$10_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$10_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$10_$0_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$10_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$10_$0_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$10_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$10_$1> {
        return this.choice<substitutionOperationOperator_$10_$1>([
            () => this.matchsubstitutionOperationOperator_$10_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$10_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsubstitutionOperationOperator_$10_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$10_$1_1> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchsubstitutionOperationOperator_$10_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<substitutionOperationOperator_$10_$1_2> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchcommaOperation($$dpth: number, $$cr?: ErrorTracker): Nullable<commaOperation> {
        return this.run<commaOperation>($$dpth,
            () => {
                let $scope$head: Nullable<Nullable<expr>>;
                let $scope$bodyRaw: Nullable<commaOperation_$0[]>;
                let $$res: Nullable<commaOperation> = null;
                if (true
                    && (($scope$head = this.matchexpr($$dpth + 1, $$cr)) || true)
                    && ($scope$bodyRaw = this.loop<commaOperation_$0>(() => this.matchcommaOperation_$0($$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = new commaOperation($scope$head, $scope$bodyRaw);
                }
                return $$res;
            });
    }
    public matchcommaOperation_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<commaOperation_$0> {
        return this.run<commaOperation_$0>($$dpth,
            () => {
                let $scope$spacesLhs: Nullable<spaceOrContinueLineOrCommentLong[]>;
                let $scope$expr: Nullable<Nullable<expr>>;
                let $scope$spacesRhs: Nullable<spaceOrContinueLineOrCommentLong[]>;
                let $$res: Nullable<commaOperation_$0> = null;
                if (true
                    && ($scope$spacesLhs = this.loop<spaceOrContinueLineOrCommentLong>(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\,)`, $$dpth + 1, $$cr) !== null
                    && (($scope$expr = this.matchexpr($$dpth + 1, $$cr)) || true)
                    && ($scope$spacesRhs = this.loop<spaceOrContinueLineOrCommentLong>(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.commaOperation_$0, spacesLhs: $scope$spacesLhs, expr: $scope$expr, spacesRhs: $scope$spacesRhs};
                }
                return $$res;
            });
    }
    public matcharrayCall($$dpth: number, $$cr?: ErrorTracker): Nullable<arrayCall> {
        return this.run<arrayCall>($$dpth,
            () => {
                let $scope$target: Nullable<expr>;
                let $scope$spacesLhs: Nullable<arrayCall_$0[]>;
                let $scope$call: Nullable<Nullable<expr>>;
                let $scope$spacesRhs: Nullable<arrayCall_$1[]>;
                let $$res: Nullable<arrayCall> = null;
                if (true
                    && ($scope$target = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && ($scope$spacesLhs = this.loop<arrayCall_$0>(() => this.matcharrayCall_$0($$dpth + 1, $$cr), true)) !== null
                    && (($scope$call = this.matchexpr($$dpth + 1, $$cr)) || true)
                    && ($scope$spacesRhs = this.loop<arrayCall_$1>(() => this.matcharrayCall_$1($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.arrayCall, target: $scope$target, spacesLhs: $scope$spacesLhs, call: $scope$call, spacesRhs: $scope$spacesRhs};
                }
                return $$res;
            });
    }
    public matcharrayCall_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<arrayCall_$0> {
        return this.choice<arrayCall_$0>([
            () => this.matcharrayCall_$0_1($$dpth + 1, $$cr),
            () => this.matcharrayCall_$0_2($$dpth + 1, $$cr),
            () => this.matcharrayCall_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matcharrayCall_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<arrayCall_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matcharrayCall_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<arrayCall_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matcharrayCall_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<arrayCall_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matcharrayCall_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<arrayCall_$1> {
        return this.choice<arrayCall_$1>([
            () => this.matcharrayCall_$1_1($$dpth + 1, $$cr),
            () => this.matcharrayCall_$1_2($$dpth + 1, $$cr),
            () => this.matcharrayCall_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matcharrayCall_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<arrayCall_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matcharrayCall_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<arrayCall_$1_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matcharrayCall_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<arrayCall_$1_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchfunctionCall($$dpth: number, $$cr?: ErrorTracker): Nullable<functionCall> {
        return this.run<functionCall>($$dpth,
            () => {
                let $scope$target: Nullable<identifer>;
                let $scope$spacesLhs: Nullable<functionCall_$0[]>;
                let $scope$args: Nullable<Nullable<expr>>;
                let $scope$spacesRhs: Nullable<functionCall_$1[]>;
                let $$res: Nullable<functionCall> = null;
                if (true
                    && ($scope$target = this.matchidentifer($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ($scope$spacesLhs = this.loop<functionCall_$0>(() => this.matchfunctionCall_$0($$dpth + 1, $$cr), true)) !== null
                    && (($scope$args = this.matchexpr($$dpth + 1, $$cr)) || true)
                    && ($scope$spacesRhs = this.loop<functionCall_$1>(() => this.matchfunctionCall_$1($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.functionCall, target: $scope$target, spacesLhs: $scope$spacesLhs, args: $scope$args, spacesRhs: $scope$spacesRhs};
                }
                return $$res;
            });
    }
    public matchfunctionCall_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<functionCall_$0> {
        return this.choice<functionCall_$0>([
            () => this.matchfunctionCall_$0_1($$dpth + 1, $$cr),
            () => this.matchfunctionCall_$0_2($$dpth + 1, $$cr),
            () => this.matchfunctionCall_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchfunctionCall_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<functionCall_$0_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchfunctionCall_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<functionCall_$0_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchfunctionCall_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<functionCall_$0_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchfunctionCall_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<functionCall_$1> {
        return this.choice<functionCall_$1>([
            () => this.matchfunctionCall_$1_1($$dpth + 1, $$cr),
            () => this.matchfunctionCall_$1_2($$dpth + 1, $$cr),
            () => this.matchfunctionCall_$1_3($$dpth + 1, $$cr),
        ]);
    }
    public matchfunctionCall_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<functionCall_$1_1> {
        return this.matchspace($$dpth + 1, $$cr);
    }
    public matchfunctionCall_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<functionCall_$1_2> {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    public matchfunctionCall_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<functionCall_$1_3> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchsigned($$dpth: number, $$cr?: ErrorTracker): Nullable<signed> {
        return this.run<signed>($$dpth,
            () => {
                let $scope$operator: Nullable<signed_$0>;
                let $scope$operand: Nullable<expr>;
                let $$res: Nullable<signed> = null;
                if (true
                    && ($scope$operator = this.matchsigned_$0($$dpth + 1, $$cr)) !== null
                    && ($scope$operand = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.signed, operator: $scope$operator, operand: $scope$operand};
                }
                return $$res;
            });
    }
    public matchsigned_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<signed_$0> {
        return this.choice<signed_$0>([
            () => this.matchsigned_$0_1($$dpth + 1, $$cr),
            () => this.matchsigned_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsigned_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<signed_$0_1> {
        return this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr);
    }
    public matchsigned_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<signed_$0_2> {
        return this.regexAccept(String.raw`(?:\-)`, $$dpth + 1, $$cr);
    }
    public matchvariable($$dpth: number, $$cr?: ErrorTracker): Nullable<variable> {
        return this.choice<variable>([
            () => this.matchvariable_1($$dpth + 1, $$cr),
            () => this.matchvariable_2($$dpth + 1, $$cr),
        ]);
    }
    public matchvariable_1($$dpth: number, $$cr?: ErrorTracker): Nullable<variable_1> {
        return this.matchidentifer($$dpth + 1, $$cr);
    }
    public matchvariable_2($$dpth: number, $$cr?: ErrorTracker): Nullable<variable_2> {
        return this.matchvariableLocal($$dpth + 1, $$cr);
    }
    public matchidentifer($$dpth: number, $$cr?: ErrorTracker): Nullable<identifer> {
        return this.run<identifer>($$dpth,
            () => {
                let $scope$head: Nullable<identiferHeadCharacter>;
                let $scope$bodyRaw: Nullable<identiferBodySentence[]>;
                let $$res: Nullable<identifer> = null;
                if (true
                    && ($scope$head = this.matchidentiferHeadCharacter($$dpth + 1, $$cr)) !== null
                    && ($scope$bodyRaw = this.loop<identiferBodySentence>(() => this.matchidentiferBodySentence($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new identifer($scope$head, $scope$bodyRaw);
                }
                return $$res;
            });
    }
    public matchvariableLocal($$dpth: number, $$cr?: ErrorTracker): Nullable<variableLocal> {
        return this.run<variableLocal>($$dpth,
            () => {
                let $scope$spaces: Nullable<continueLineOrCommentLong[]>;
                let $scope$head: Nullable<identiferHeadCharacter>;
                let $scope$bodyRaw: Nullable<identiferBodySentence[]>;
                let $$res: Nullable<variableLocal> = null;
                if (true
                    && this.regexAccept(String.raw`(?:_)`, $$dpth + 1, $$cr) !== null
                    && ($scope$spaces = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && ($scope$head = this.matchidentiferHeadCharacter($$dpth + 1, $$cr)) !== null
                    && ($scope$bodyRaw = this.loop<identiferBodySentence>(() => this.matchidentiferBodySentence($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new variableLocal($scope$spaces, $scope$head, $scope$bodyRaw);
                }
                return $$res;
            });
    }
    public matchliteral($$dpth: number, $$cr?: ErrorTracker): Nullable<literal> {
        return this.choice<literal>([
            () => this.matchliteral_1($$dpth + 1, $$cr),
            () => this.matchliteral_2($$dpth + 1, $$cr),
            () => this.matchliteral_3($$dpth + 1, $$cr),
            () => this.matchliteral_4($$dpth + 1, $$cr),
            () => this.matchliteral_5($$dpth + 1, $$cr),
            () => this.matchliteral_6($$dpth + 1, $$cr),
        ]);
    }
    public matchliteral_1($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_1> {
        return this.matchheredoc($$dpth + 1, $$cr);
    }
    public matchliteral_2($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_2> {
        return this.matchheredocRaw($$dpth + 1, $$cr);
    }
    public matchliteral_3($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_3> {
        return this.matchliteralString($$dpth + 1, $$cr);
    }
    public matchliteral_4($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_4> {
        return this.matchliteralStringRaw($$dpth + 1, $$cr);
    }
    public matchliteral_5($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_5> {
        return this.matchreal($$dpth + 1, $$cr);
    }
    public matchliteral_6($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_6> {
        return this.matchint($$dpth + 1, $$cr);
    }
    public matchheredoc($$dpth: number, $$cr?: ErrorTracker): Nullable<heredoc> {
        return this.run<heredoc>($$dpth,
            () => {
                let $scope$bodyRaw: Nullable<heredocInner[]>;
                let $$res: Nullable<heredoc> = null;
                if (true
                    && this.regexAccept(String.raw`(?:<<\")`, $$dpth + 1, $$cr) !== null
                    && this.matchnewLine($$dpth + 1, $$cr) !== null
                    && ($scope$bodyRaw = this.loop<heredocInner>(() => this.matchheredocInner($$dpth + 1, $$cr), false)) !== null
                    && this.regexAccept(String.raw`(?:\">>)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new heredoc($scope$bodyRaw);
                }
                return $$res;
            });
    }
    public matchheredocInner($$dpth: number, $$cr?: ErrorTracker): Nullable<heredocInner> {
        return this.choice<heredocInner>([
            () => this.matchheredocInner_1($$dpth + 1, $$cr),
            () => this.matchheredocInner_2($$dpth + 1, $$cr),
            () => this.matchheredocInner_3($$dpth + 1, $$cr),
        ]);
    }
    public matchheredocInner_1($$dpth: number, $$cr?: ErrorTracker): Nullable<heredocInner_1> {
        return this.run<heredocInner_1>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<heredocInner_1> = null;
                if (true
                    && ($scope$c = this.regexAccept(String.raw`(?:\"\">>)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.heredocInner_1, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchheredocInner_2($$dpth: number, $$cr?: ErrorTracker): Nullable<heredocInner_2> {
        return this.run<heredocInner_2>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<heredocInner_2> = null;
                if (true
                    && ($scope$c = this.regexAccept(String.raw`(?:[\r\n])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.heredocInner_2, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchheredocInner_3($$dpth: number, $$cr?: ErrorTracker): Nullable<heredocInner_3> {
        return this.run<heredocInner_3>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<heredocInner_3> = null;
                if (true
                    && this.negate(() => this.regexAccept(String.raw`(?:\">>)`, $$dpth + 1, $$cr)) !== null
                    && ($scope$c = this.regexAccept(String.raw`(?:.)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.heredocInner_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchheredocRaw($$dpth: number, $$cr?: ErrorTracker): Nullable<heredocRaw> {
        return this.run<heredocRaw>($$dpth,
            () => {
                let $scope$bodyRaw: Nullable<heredocRawInner[]>;
                let $$res: Nullable<heredocRaw> = null;
                if (true
                    && this.regexAccept(String.raw`(?:<<\')`, $$dpth + 1, $$cr) !== null
                    && this.matchnewLine($$dpth + 1, $$cr) !== null
                    && ($scope$bodyRaw = this.loop<heredocRawInner>(() => this.matchheredocRawInner($$dpth + 1, $$cr), false)) !== null
                    && this.regexAccept(String.raw`(?:\'>>)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new heredocRaw($scope$bodyRaw);
                }
                return $$res;
            });
    }
    public matchheredocRawInner($$dpth: number, $$cr?: ErrorTracker): Nullable<heredocRawInner> {
        return this.choice<heredocRawInner>([
            () => this.matchheredocRawInner_1($$dpth + 1, $$cr),
            () => this.matchheredocRawInner_2($$dpth + 1, $$cr),
            () => this.matchheredocRawInner_3($$dpth + 1, $$cr),
        ]);
    }
    public matchheredocRawInner_1($$dpth: number, $$cr?: ErrorTracker): Nullable<heredocRawInner_1> {
        return this.run<heredocRawInner_1>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<heredocRawInner_1> = null;
                if (true
                    && ($scope$c = this.regexAccept(String.raw`(?:\'\'>>)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.heredocRawInner_1, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchheredocRawInner_2($$dpth: number, $$cr?: ErrorTracker): Nullable<heredocRawInner_2> {
        return this.run<heredocRawInner_2>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<heredocRawInner_2> = null;
                if (true
                    && ($scope$c = this.regexAccept(String.raw`(?:[\r\n])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.heredocRawInner_2, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchheredocRawInner_3($$dpth: number, $$cr?: ErrorTracker): Nullable<heredocRawInner_3> {
        return this.run<heredocRawInner_3>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<heredocRawInner_3> = null;
                if (true
                    && this.negate(() => this.regexAccept(String.raw`(?:\'>>)`, $$dpth + 1, $$cr)) !== null
                    && ($scope$c = this.regexAccept(String.raw`(?:.)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.heredocRawInner_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchliteralString($$dpth: number, $$cr?: ErrorTracker): Nullable<literalString> {
        return this.run<literalString>($$dpth,
            () => {
                let $scope$bodyRaw: Nullable<literalStringInner[]>;
                let $$res: Nullable<literalString> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\")`, $$dpth + 1, $$cr) !== null
                    && ($scope$bodyRaw = this.loop<literalStringInner>(() => this.matchliteralStringInner($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\")`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new literalString($scope$bodyRaw);
                }
                return $$res;
            });
    }
    public matchliteralStringInner($$dpth: number, $$cr?: ErrorTracker): Nullable<literalStringInner> {
        return this.choice<literalStringInner>([
            () => this.matchliteralStringInner_1($$dpth + 1, $$cr),
            () => this.matchliteralStringInner_2($$dpth + 1, $$cr),
            () => this.matchliteralStringInner_3($$dpth + 1, $$cr),
            () => this.matchliteralStringInner_4($$dpth + 1, $$cr),
        ]);
    }
    public matchliteralStringInner_1($$dpth: number, $$cr?: ErrorTracker): Nullable<literalStringInner_1> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchliteralStringInner_2($$dpth: number, $$cr?: ErrorTracker): Nullable<literalStringInner_2> {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    public matchliteralStringInner_3($$dpth: number, $$cr?: ErrorTracker): Nullable<literalStringInner_3> {
        return this.regexAccept(String.raw`(?:\"\")`, $$dpth + 1, $$cr);
    }
    public matchliteralStringInner_4($$dpth: number, $$cr?: ErrorTracker): Nullable<literalStringInner_4> {
        return this.regexAccept(String.raw`(?:[^\r\n\"])`, $$dpth + 1, $$cr);
    }
    public matchliteralStringRaw($$dpth: number, $$cr?: ErrorTracker): Nullable<literalStringRaw> {
        return this.run<literalStringRaw>($$dpth,
            () => {
                let $scope$bodyRaw: Nullable<literalStringRawInner[]>;
                let $$res: Nullable<literalStringRaw> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\')`, $$dpth + 1, $$cr) !== null
                    && ($scope$bodyRaw = this.loop<literalStringRawInner>(() => this.matchliteralStringRawInner($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\')`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new literalStringRaw($scope$bodyRaw);
                }
                return $$res;
            });
    }
    public matchliteralStringRawInner($$dpth: number, $$cr?: ErrorTracker): Nullable<literalStringRawInner> {
        return this.choice<literalStringRawInner>([
            () => this.matchliteralStringRawInner_1($$dpth + 1, $$cr),
            () => this.matchliteralStringRawInner_2($$dpth + 1, $$cr),
            () => this.matchliteralStringRawInner_3($$dpth + 1, $$cr),
            () => this.matchliteralStringRawInner_4($$dpth + 1, $$cr),
        ]);
    }
    public matchliteralStringRawInner_1($$dpth: number, $$cr?: ErrorTracker): Nullable<literalStringRawInner_1> {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    public matchliteralStringRawInner_2($$dpth: number, $$cr?: ErrorTracker): Nullable<literalStringRawInner_2> {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    public matchliteralStringRawInner_3($$dpth: number, $$cr?: ErrorTracker): Nullable<literalStringRawInner_3> {
        return this.regexAccept(String.raw`(?:\'\')`, $$dpth + 1, $$cr);
    }
    public matchliteralStringRawInner_4($$dpth: number, $$cr?: ErrorTracker): Nullable<literalStringRawInner_4> {
        return this.regexAccept(String.raw`(?:[^\r\n\'])`, $$dpth + 1, $$cr);
    }
    public matchreal($$dpth: number, $$cr?: ErrorTracker): Nullable<real> {
        return this.run<real>($$dpth,
            () => {
                let $scope$sign: Nullable<Nullable<real_$0>>;
                let $scope$head: Nullable<string>;
                let $scope$integerPart: Nullable<int_x10Inner[]>;
                let $scope$fractionalPart: Nullable<int_x10Inner[]>;
                let $$res: Nullable<real> = null;
                if (true
                    && (($scope$sign = this.matchreal_$0($$dpth + 1, $$cr)) || true)
                    && ($scope$head = this.regexAccept(String.raw`(?:[0-9])`, $$dpth + 1, $$cr)) !== null
                    && ($scope$integerPart = this.loop<int_x10Inner>(() => this.matchint_x10Inner($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr) !== null
                    && ($scope$fractionalPart = this.loop<int_x10Inner>(() => this.matchint_x10Inner($$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = new real($scope$sign, $scope$head, $scope$integerPart, $scope$fractionalPart);
                }
                return $$res;
            });
    }
    public matchreal_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<real_$0> {
        return this.choice<real_$0>([
            () => this.matchreal_$0_1($$dpth + 1, $$cr),
            () => this.matchreal_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchreal_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<real_$0_1> {
        return this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr);
    }
    public matchreal_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<real_$0_2> {
        return this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr);
    }
    public matchint($$dpth: number, $$cr?: ErrorTracker): Nullable<int> {
        return this.choice<int>([
            () => this.matchint_1($$dpth + 1, $$cr),
            () => this.matchint_2($$dpth + 1, $$cr),
            () => this.matchint_3($$dpth + 1, $$cr),
        ]);
    }
    public matchint_1($$dpth: number, $$cr?: ErrorTracker): Nullable<int_1> {
        return this.matchint_x2($$dpth + 1, $$cr);
    }
    public matchint_2($$dpth: number, $$cr?: ErrorTracker): Nullable<int_2> {
        return this.matchint_x16($$dpth + 1, $$cr);
    }
    public matchint_3($$dpth: number, $$cr?: ErrorTracker): Nullable<int_3> {
        return this.matchint_x10($$dpth + 1, $$cr);
    }
    public matchint_x10($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x10> {
        return this.run<int_x10>($$dpth,
            () => {
                let $scope$sign: Nullable<Nullable<int_x10_$0>>;
                let $scope$head: Nullable<string>;
                let $scope$bodyRaw: Nullable<int_x10Inner[]>;
                let $$res: Nullable<int_x10> = null;
                if (true
                    && (($scope$sign = this.matchint_x10_$0($$dpth + 1, $$cr)) || true)
                    && ($scope$head = this.regexAccept(String.raw`(?:[0-9])`, $$dpth + 1, $$cr)) !== null
                    && ($scope$bodyRaw = this.loop<int_x10Inner>(() => this.matchint_x10Inner($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new int_x10($scope$sign, $scope$head, $scope$bodyRaw);
                }
                return $$res;
            });
    }
    public matchint_x10_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x10_$0> {
        return this.choice<int_x10_$0>([
            () => this.matchint_x10_$0_1($$dpth + 1, $$cr),
            () => this.matchint_x10_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchint_x10_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x10_$0_1> {
        return this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr);
    }
    public matchint_x10_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x10_$0_2> {
        return this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr);
    }
    public matchint_x10Inner($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x10Inner> {
        return this.choice<int_x10Inner>([
            () => this.matchint_x10Inner_1($$dpth + 1, $$cr),
            () => this.matchint_x10Inner_2($$dpth + 1, $$cr),
        ]);
    }
    public matchint_x10Inner_1($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x10Inner_1> {
        return this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr);
    }
    public matchint_x10Inner_2($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x10Inner_2> {
        return this.regexAccept(String.raw`(?:[0-9])`, $$dpth + 1, $$cr);
    }
    public matchint_x2($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x2> {
        return this.run<int_x2>($$dpth,
            () => {
                let $scope$head: Nullable<string>;
                let $scope$bodyRaw: Nullable<int_x2Inner[]>;
                let $$res: Nullable<int_x2> = null;
                if (true
                    && ($scope$head = this.regexAccept(String.raw`(?:0b)`, $$dpth + 1, $$cr)) !== null
                    && ($scope$bodyRaw = this.loop<int_x2Inner>(() => this.matchint_x2Inner($$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = new int_x2($scope$head, $scope$bodyRaw);
                }
                return $$res;
            });
    }
    public matchint_x2Inner($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x2Inner> {
        return this.choice<int_x2Inner>([
            () => this.matchint_x2Inner_1($$dpth + 1, $$cr),
            () => this.matchint_x2Inner_2($$dpth + 1, $$cr),
        ]);
    }
    public matchint_x2Inner_1($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x2Inner_1> {
        return this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr);
    }
    public matchint_x2Inner_2($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x2Inner_2> {
        return this.regexAccept(String.raw`(?:[01])`, $$dpth + 1, $$cr);
    }
    public matchint_x16($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x16> {
        return this.run<int_x16>($$dpth,
            () => {
                let $scope$head: Nullable<string>;
                let $scope$bodyRaw: Nullable<int_x16Inner[]>;
                let $$res: Nullable<int_x16> = null;
                if (true
                    && ($scope$head = this.regexAccept(String.raw`(?:0x)`, $$dpth + 1, $$cr)) !== null
                    && ($scope$bodyRaw = this.loop<int_x16Inner>(() => this.matchint_x16Inner($$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = new int_x16($scope$head, $scope$bodyRaw);
                }
                return $$res;
            });
    }
    public matchint_x16Inner($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x16Inner> {
        return this.choice<int_x16Inner>([
            () => this.matchint_x16Inner_1($$dpth + 1, $$cr),
            () => this.matchint_x16Inner_2($$dpth + 1, $$cr),
        ]);
    }
    public matchint_x16Inner_1($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x16Inner_1> {
        return this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr);
    }
    public matchint_x16Inner_2($$dpth: number, $$cr?: ErrorTracker): Nullable<int_x16Inner_2> {
        return this.regexAccept(String.raw`(?:[0-9a-fA-F])`, $$dpth + 1, $$cr);
    }
    public matchpreprocess($$dpth: number, $$cr?: ErrorTracker): Nullable<preprocess> {
        return this.choice<preprocess>([
            () => this.matchpreprocess_1($$dpth + 1, $$cr),
            () => this.matchpreprocess_2($$dpth + 1, $$cr),
        ]);
    }
    public matchpreprocess_1($$dpth: number, $$cr?: ErrorTracker): Nullable<preprocess_1> {
        return this.matchpreprocessGlobalDefine($$dpth + 1, $$cr);
    }
    public matchpreprocess_2($$dpth: number, $$cr?: ErrorTracker): Nullable<preprocess_2> {
        return this.matchpreprocessDefine($$dpth + 1, $$cr);
    }
    public matchpreprocessGlobalDefine($$dpth: number, $$cr?: ErrorTracker): Nullable<preprocessGlobalDefine> {
        return this.run<preprocessGlobalDefine>($$dpth,
            () => {
                let $scope$nameRaw: Nullable<preprocessGlobalDefineName>;
                let $scope$spacesLhs: Nullable<spaceOrContinueLineOrCommentLong[]>;
                let $scope$beforeRaw: Nullable<preprocessBeforeCharacterSentence[]>;
                let $scope$spacesRhs: Nullable<spaceOrContinueLineOrCommentLong[]>;
                let $scope$afterRaw: Nullable<preprocessAfterCharacterSentence[]>;
                let $scope$newLine: Nullable<newLine>;
                let $$res: Nullable<preprocessGlobalDefine> = null;
                if (true
                    && ($scope$nameRaw = this.matchpreprocessGlobalDefineName($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesLhs = this.loop<spaceOrContinueLineOrCommentLong>(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), false)) !== null
                    && ($scope$beforeRaw = this.loop<preprocessBeforeCharacterSentence>(() => this.matchpreprocessBeforeCharacterSentence($$dpth + 1, $$cr), false)) !== null
                    && ($scope$spacesRhs = this.loop<spaceOrContinueLineOrCommentLong>(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), false)) !== null
                    && ($scope$afterRaw = this.loop<preprocessAfterCharacterSentence>(() => this.matchpreprocessAfterCharacterSentence($$dpth + 1, $$cr), false)) !== null
                    && ($scope$newLine = this.matchnewLine($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new preprocessGlobalDefine($scope$nameRaw, $scope$spacesLhs, $scope$beforeRaw, $scope$spacesRhs, $scope$afterRaw, $scope$newLine);
                }
                return $$res;
            });
    }
    public matchpreprocessGlobalDefineName($$dpth: number, $$cr?: ErrorTracker): Nullable<preprocessGlobalDefineName> {
        return this.run<preprocessGlobalDefineName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $scope$c6: Nullable<continueLineOrCommentLong[]>;
                let $scope$c7: Nullable<continueLineOrCommentLong[]>;
                let $scope$c8: Nullable<continueLineOrCommentLong[]>;
                let $scope$c9: Nullable<continueLineOrCommentLong[]>;
                let $scope$c10: Nullable<continueLineOrCommentLong[]>;
                let $scope$c11: Nullable<continueLineOrCommentLong[]>;
                let $scope$c12: Nullable<continueLineOrCommentLong[]>;
                let $scope$c13: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<preprocessGlobalDefineName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:#)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:g)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:b)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:a)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c6 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:l)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c7 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:d)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c8 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c9 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:f)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c10 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:i)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c11 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:n)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c12 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c13 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new preprocessGlobalDefineName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6, $scope$c7, $scope$c8, $scope$c9, $scope$c10, $scope$c11, $scope$c12, $scope$c13);
                }
                return $$res;
            });
    }
    public matchpreprocessDefine($$dpth: number, $$cr?: ErrorTracker): Nullable<preprocessDefine> {
        return this.run<preprocessDefine>($$dpth,
            () => {
                let $scope$nameRaw: Nullable<preprocessDefineName>;
                let $scope$spacesLhs: Nullable<spaceOrContinueLineOrCommentLong[]>;
                let $scope$beforeRaw: Nullable<preprocessBeforeCharacterSentence[]>;
                let $scope$spacesRhs: Nullable<spaceOrContinueLineOrCommentLong[]>;
                let $scope$afterRaw: Nullable<preprocessAfterCharacterSentence[]>;
                let $scope$newLine: Nullable<newLine>;
                let $$res: Nullable<preprocessDefine> = null;
                if (true
                    && ($scope$nameRaw = this.matchpreprocessDefineName($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesLhs = this.loop<spaceOrContinueLineOrCommentLong>(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), false)) !== null
                    && ($scope$beforeRaw = this.loop<preprocessBeforeCharacterSentence>(() => this.matchpreprocessBeforeCharacterSentence($$dpth + 1, $$cr), false)) !== null
                    && ($scope$spacesRhs = this.loop<spaceOrContinueLineOrCommentLong>(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), false)) !== null
                    && ($scope$afterRaw = this.loop<preprocessAfterCharacterSentence>(() => this.matchpreprocessAfterCharacterSentence($$dpth + 1, $$cr), false)) !== null
                    && ($scope$newLine = this.matchnewLine($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new preprocessDefine($scope$nameRaw, $scope$spacesLhs, $scope$beforeRaw, $scope$spacesRhs, $scope$afterRaw, $scope$newLine);
                }
                return $$res;
            });
    }
    public matchpreprocessDefineName($$dpth: number, $$cr?: ErrorTracker): Nullable<preprocessDefineName> {
        return this.run<preprocessDefineName>($$dpth,
            () => {
                let $scope$c1: Nullable<continueLineOrCommentLong[]>;
                let $scope$c2: Nullable<continueLineOrCommentLong[]>;
                let $scope$c3: Nullable<continueLineOrCommentLong[]>;
                let $scope$c4: Nullable<continueLineOrCommentLong[]>;
                let $scope$c5: Nullable<continueLineOrCommentLong[]>;
                let $scope$c6: Nullable<continueLineOrCommentLong[]>;
                let $scope$c7: Nullable<continueLineOrCommentLong[]>;
                let $$res: Nullable<preprocessDefineName> = null;
                if (true
                    && this.regexAccept(String.raw`(?:#)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c1 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:d)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c2 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c3 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:f)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c4 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:i)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c5 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:n)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c6 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:e)`, $$dpth + 1, $$cr) !== null
                    && ($scope$c7 = this.loop<continueLineOrCommentLong>(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new preprocessDefineName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6, $scope$c7);
                }
                return $$res;
            });
    }
    public matchmaybePreprocess($$dpth: number, $$cr?: ErrorTracker): Nullable<maybePreprocess> {
        return this.run<maybePreprocess>($$dpth,
            () => {
                let $scope$bodyRaw: Nullable<preprocessBeforeCharacterSentence[]>;
                let $$res: Nullable<maybePreprocess> = null;
                if (true
                    && ($scope$bodyRaw = this.loop<preprocessBeforeCharacterSentence>(() => this.matchpreprocessBeforeCharacterSentence($$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = new maybePreprocess($scope$bodyRaw);
                }
                return $$res;
            });
    }
    public matchpreprocessBeforeCharacterSentence($$dpth: number, $$cr?: ErrorTracker): Nullable<preprocessBeforeCharacterSentence> {
        return this.choice<preprocessBeforeCharacterSentence>([
            () => this.matchpreprocessBeforeCharacterSentence_1($$dpth + 1, $$cr),
            () => this.matchpreprocessBeforeCharacterSentence_2($$dpth + 1, $$cr),
        ]);
    }
    public matchpreprocessBeforeCharacterSentence_1($$dpth: number, $$cr?: ErrorTracker): Nullable<preprocessBeforeCharacterSentence_1> {
        return this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr);
    }
    public matchpreprocessBeforeCharacterSentence_2($$dpth: number, $$cr?: ErrorTracker): Nullable<preprocessBeforeCharacterSentence_2> {
        return this.regexAccept(String.raw`(?:[^ \t　!\'\"%&\(\)\*\+\,\-\/;<\=>/\[\]{\|}\r\n])`, $$dpth + 1, $$cr);
    }
    public matchpreprocessAfterCharacterSentence($$dpth: number, $$cr?: ErrorTracker): Nullable<preprocessAfterCharacterSentence> {
        return this.choice<preprocessAfterCharacterSentence>([
            () => this.matchpreprocessAfterCharacterSentence_1($$dpth + 1, $$cr),
            () => this.matchpreprocessAfterCharacterSentence_2($$dpth + 1, $$cr),
        ]);
    }
    public matchpreprocessAfterCharacterSentence_1($$dpth: number, $$cr?: ErrorTracker): Nullable<preprocessAfterCharacterSentence_1> {
        return this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr);
    }
    public matchpreprocessAfterCharacterSentence_2($$dpth: number, $$cr?: ErrorTracker): Nullable<preprocessAfterCharacterSentence_2> {
        return this.regexAccept(String.raw`(?:[^\r\n])`, $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchstart(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<start>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}