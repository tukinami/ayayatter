"use strict";
/* AutoGenerated Code, changes may be overwritten
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.substitutionOperationOperator_$3 = exports.substitutionOperationOperator_$2 = exports.substitutionOperationOperator_$1 = exports.substitutionOperationOperator_$0 = exports.substitutionOperator_$1 = exports.substitutionOperator_$0 = exports.logicalDisjunctionOperator_$0 = exports.logicalConjunctionOperator_$0 = exports.comparisonOperator_$7 = exports.comparisonOperator_$6 = exports.comparisonOperator_$5 = exports.comparisonOperator_$4 = exports.comparisonOperator_$3 = exports.comparisonOperator_$2 = exports.comparisonOperator_$1 = exports.comparisonOperator_$0 = exports.additionOrSubtractionOperator_$1 = exports.additionOrSubtractionOperator_$0 = exports.multiplicationOrDivisionOperator_$2 = exports.multiplicationOrDivisionOperator_$1 = exports.multiplicationOrDivisionOperator_$0 = exports.incrementOrDecrementOperator_$1 = exports.incrementOrDecrementOperator_$0 = exports.blockInnerVoidName = exports.blockInnerParallelName = exports.blockInnerReturnName = exports.blockInnerContinueName = exports.blockInnerBreakName = exports.flowForeachName = exports.flowForName = exports.flowWhileName = exports.flowSwitchName = exports.flowOthersName = exports.flowWhenConditions = exports.flowWhenName = exports.flowCaseName = exports.flowElseName = exports.flowElseifName = exports.flowIfName = exports.selectorSuffixName = exports.selectorMainName_7 = exports.selectorMainName_6 = exports.selectorMainName_5 = exports.selectorMainName_4 = exports.selectorMainName_3 = exports.selectorMainName_2 = exports.selectorMainName_1 = exports.selectorPrefixName = exports.commentLong = exports.ASTKinds = void 0;
exports.SyntaxErr = exports.parse = exports.Parser = exports.maybePreprocess = exports.preprocessDefineName = exports.preprocessDefine = exports.preprocessGlobalDefineName = exports.preprocessGlobalDefine = exports.int_x16 = exports.int_x2 = exports.int_x10 = exports.real = exports.literalStringRaw = exports.literalString = exports.heredocRaw = exports.heredoc = exports.variableLocal = exports.identifer = exports.commaOperation = exports.substitutionOperationOperator_$10 = exports.substitutionOperationOperator_$9 = exports.substitutionOperationOperator_$8 = exports.substitutionOperationOperator_$7 = exports.substitutionOperationOperator_$6 = exports.substitutionOperationOperator_$5 = exports.substitutionOperationOperator_$4 = void 0;
const util_1 = require("./util");
var ASTKinds;
(function (ASTKinds) {
    ASTKinds["start"] = "start";
    ASTKinds["content_1"] = "content_1";
    ASTKinds["content_2"] = "content_2";
    ASTKinds["content_3"] = "content_3";
    ASTKinds["content_4"] = "content_4";
    ASTKinds["content_5"] = "content_5";
    ASTKinds["content_6"] = "content_6";
    ASTKinds["content_7"] = "content_7";
    ASTKinds["newLine"] = "newLine";
    ASTKinds["newLineBody_1"] = "newLineBody_1";
    ASTKinds["newLineBody_2"] = "newLineBody_2";
    ASTKinds["newLineBody_3"] = "newLineBody_3";
    ASTKinds["endOfLine_1"] = "endOfLine_1";
    ASTKinds["endOfLine_2"] = "endOfLine_2";
    ASTKinds["space"] = "space";
    ASTKinds["someSpaces"] = "someSpaces";
    ASTKinds["commentLong"] = "commentLong";
    ASTKinds["commentLongBody_1"] = "commentLongBody_1";
    ASTKinds["commentLongBody_2"] = "commentLongBody_2";
    ASTKinds["commentLine"] = "commentLine";
    ASTKinds["continueLine"] = "continueLine";
    ASTKinds["continueLineOrCommentLong_1"] = "continueLineOrCommentLong_1";
    ASTKinds["continueLineOrCommentLong_2"] = "continueLineOrCommentLong_2";
    ASTKinds["spaceOrContinueLineOrCommentLong_1"] = "spaceOrContinueLineOrCommentLong_1";
    ASTKinds["spaceOrContinueLineOrCommentLong_2"] = "spaceOrContinueLineOrCommentLong_2";
    ASTKinds["spaceOrContinueLineOrCommentLong_3"] = "spaceOrContinueLineOrCommentLong_3";
    ASTKinds["identiferHeadCharacter"] = "identiferHeadCharacter";
    ASTKinds["identiferBodySentence_1"] = "identiferBodySentence_1";
    ASTKinds["identiferBodySentence_2"] = "identiferBodySentence_2";
    ASTKinds["identiferBodyCharacter"] = "identiferBodyCharacter";
    ASTKinds["statementSeparator"] = "statementSeparator";
    ASTKinds["statementSeparatorBody_1"] = "statementSeparatorBody_1";
    ASTKinds["statementSeparatorBody_2"] = "statementSeparatorBody_2";
    ASTKinds["statementSeparatorBody_3"] = "statementSeparatorBody_3";
    ASTKinds["statementTerminator_1"] = "statementTerminator_1";
    ASTKinds["statementTerminator_2"] = "statementTerminator_2";
    ASTKinds["statementTerminatorBody"] = "statementTerminatorBody";
    ASTKinds["functionBlock"] = "functionBlock";
    ASTKinds["functionBlock_$0_1"] = "functionBlock_$0_1";
    ASTKinds["functionBlock_$0_2"] = "functionBlock_$0_2";
    ASTKinds["functionBlock_$0_3"] = "functionBlock_$0_3";
    ASTKinds["functionBlock_$0_4"] = "functionBlock_$0_4";
    ASTKinds["functionBlock_$0_5"] = "functionBlock_$0_5";
    ASTKinds["functionBlock_$1_1"] = "functionBlock_$1_1";
    ASTKinds["functionBlock_$1_2"] = "functionBlock_$1_2";
    ASTKinds["functionBlock_$1_3"] = "functionBlock_$1_3";
    ASTKinds["functionBlock_$1_4"] = "functionBlock_$1_4";
    ASTKinds["functionBlock_$1_5"] = "functionBlock_$1_5";
    ASTKinds["functionBlock_$2_1"] = "functionBlock_$2_1";
    ASTKinds["functionBlock_$2_2"] = "functionBlock_$2_2";
    ASTKinds["functionBlock_$3_1"] = "functionBlock_$3_1";
    ASTKinds["functionBlock_$3_2"] = "functionBlock_$3_2";
    ASTKinds["functionBlockName"] = "functionBlockName";
    ASTKinds["functionBlockSelector"] = "functionBlockSelector";
    ASTKinds["selector"] = "selector";
    ASTKinds["selectorPrefix"] = "selectorPrefix";
    ASTKinds["selectorPrefixName"] = "selectorPrefixName";
    ASTKinds["selectorMain"] = "selectorMain";
    ASTKinds["selectorMainName_1"] = "selectorMainName_1";
    ASTKinds["selectorMainName_2"] = "selectorMainName_2";
    ASTKinds["selectorMainName_3"] = "selectorMainName_3";
    ASTKinds["selectorMainName_4"] = "selectorMainName_4";
    ASTKinds["selectorMainName_5"] = "selectorMainName_5";
    ASTKinds["selectorMainName_6"] = "selectorMainName_6";
    ASTKinds["selectorMainName_7"] = "selectorMainName_7";
    ASTKinds["selectorSuffix"] = "selectorSuffix";
    ASTKinds["selectorSuffixName"] = "selectorSuffixName";
    ASTKinds["block"] = "block";
    ASTKinds["block_$0_1"] = "block_$0_1";
    ASTKinds["block_$0_2"] = "block_$0_2";
    ASTKinds["block_$0_3"] = "block_$0_3";
    ASTKinds["block_$0_4"] = "block_$0_4";
    ASTKinds["block_$0_5"] = "block_$0_5";
    ASTKinds["block_$1_1"] = "block_$1_1";
    ASTKinds["block_$1_2"] = "block_$1_2";
    ASTKinds["block_$1_3"] = "block_$1_3";
    ASTKinds["block_$2_1"] = "block_$2_1";
    ASTKinds["block_$2_2"] = "block_$2_2";
    ASTKinds["block_$2_3"] = "block_$2_3";
    ASTKinds["block_$2_4"] = "block_$2_4";
    ASTKinds["block_$2_5"] = "block_$2_5";
    ASTKinds["blockSelector"] = "blockSelector";
    ASTKinds["blockInner_1"] = "blockInner_1";
    ASTKinds["blockInner_2"] = "blockInner_2";
    ASTKinds["blockInner_3"] = "blockInner_3";
    ASTKinds["blockInner_4"] = "blockInner_4";
    ASTKinds["blockInner_5"] = "blockInner_5";
    ASTKinds["blockInner_6"] = "blockInner_6";
    ASTKinds["blockInner_7"] = "blockInner_7";
    ASTKinds["blockInner_8"] = "blockInner_8";
    ASTKinds["blockInnerFlow"] = "blockInnerFlow";
    ASTKinds["blockInnerFlowKind_1"] = "blockInnerFlowKind_1";
    ASTKinds["blockInnerFlowKind_2"] = "blockInnerFlowKind_2";
    ASTKinds["blockInnerFlowKind_3"] = "blockInnerFlowKind_3";
    ASTKinds["blockInnerFlowKind_4"] = "blockInnerFlowKind_4";
    ASTKinds["blockInnerFlowKind_5"] = "blockInnerFlowKind_5";
    ASTKinds["blockInnerFlowKind_6"] = "blockInnerFlowKind_6";
    ASTKinds["blockInnerFlowKind_7"] = "blockInnerFlowKind_7";
    ASTKinds["blockInnerSentence"] = "blockInnerSentence";
    ASTKinds["blockInnerSentence_$0_1"] = "blockInnerSentence_$0_1";
    ASTKinds["blockInnerSentence_$0_2"] = "blockInnerSentence_$0_2";
    ASTKinds["blockInnerSentence_$0_3"] = "blockInnerSentence_$0_3";
    ASTKinds["blockInnerSentenceKind_1"] = "blockInnerSentenceKind_1";
    ASTKinds["blockInnerSentenceKind_2"] = "blockInnerSentenceKind_2";
    ASTKinds["blockInnerSentenceKind_3"] = "blockInnerSentenceKind_3";
    ASTKinds["blockInnerSentenceKind_4"] = "blockInnerSentenceKind_4";
    ASTKinds["blockInnerSentenceKind_5"] = "blockInnerSentenceKind_5";
    ASTKinds["blockInnerSentenceKind_6"] = "blockInnerSentenceKind_6";
    ASTKinds["blockInnerSentenceKind_7"] = "blockInnerSentenceKind_7";
    ASTKinds["flowIf"] = "flowIf";
    ASTKinds["flowIf_$0_1"] = "flowIf_$0_1";
    ASTKinds["flowIf_$0_2"] = "flowIf_$0_2";
    ASTKinds["flowIfName"] = "flowIfName";
    ASTKinds["flowElseif"] = "flowElseif";
    ASTKinds["flowElseif_$0_1"] = "flowElseif_$0_1";
    ASTKinds["flowElseif_$0_2"] = "flowElseif_$0_2";
    ASTKinds["flowElseifName"] = "flowElseifName";
    ASTKinds["flowElse"] = "flowElse";
    ASTKinds["flowElse_$0_1"] = "flowElse_$0_1";
    ASTKinds["flowElse_$0_2"] = "flowElse_$0_2";
    ASTKinds["flowElseName"] = "flowElseName";
    ASTKinds["flowIfBlock"] = "flowIfBlock";
    ASTKinds["flowIfBlock_$0_1"] = "flowIfBlock_$0_1";
    ASTKinds["flowIfBlock_$0_2"] = "flowIfBlock_$0_2";
    ASTKinds["flowIfBlock_$1_1"] = "flowIfBlock_$1_1";
    ASTKinds["flowIfBlock_$1_2"] = "flowIfBlock_$1_2";
    ASTKinds["flowCase"] = "flowCase";
    ASTKinds["flowCase_$0_1"] = "flowCase_$0_1";
    ASTKinds["flowCase_$0_2"] = "flowCase_$0_2";
    ASTKinds["flowCase_$0_3"] = "flowCase_$0_3";
    ASTKinds["flowCase_$0_4"] = "flowCase_$0_4";
    ASTKinds["flowCase_$0_5"] = "flowCase_$0_5";
    ASTKinds["flowCase_$1_1"] = "flowCase_$1_1";
    ASTKinds["flowCase_$1_2"] = "flowCase_$1_2";
    ASTKinds["flowCase_$1_3"] = "flowCase_$1_3";
    ASTKinds["flowCase_$1_4"] = "flowCase_$1_4";
    ASTKinds["flowCase_$1_5"] = "flowCase_$1_5";
    ASTKinds["flowCaseName"] = "flowCaseName";
    ASTKinds["flowWhen"] = "flowWhen";
    ASTKinds["flowWhenName"] = "flowWhenName";
    ASTKinds["flowWhenConditions"] = "flowWhenConditions";
    ASTKinds["flowWhenConditions_$0"] = "flowWhenConditions_$0";
    ASTKinds["flowWhenCondition_1"] = "flowWhenCondition_1";
    ASTKinds["flowWhenCondition_2"] = "flowWhenCondition_2";
    ASTKinds["flowWhenConditionLiteral"] = "flowWhenConditionLiteral";
    ASTKinds["flowWhenConditionLiteral_$0_1"] = "flowWhenConditionLiteral_$0_1";
    ASTKinds["flowWhenConditionLiteral_$0_2"] = "flowWhenConditionLiteral_$0_2";
    ASTKinds["flowWhenConditionLiteral_$0_3"] = "flowWhenConditionLiteral_$0_3";
    ASTKinds["flowWhenConditionLiteral_$1_1"] = "flowWhenConditionLiteral_$1_1";
    ASTKinds["flowWhenConditionLiteral_$1_2"] = "flowWhenConditionLiteral_$1_2";
    ASTKinds["flowWhenConditionLiteral_$2_1"] = "flowWhenConditionLiteral_$2_1";
    ASTKinds["flowWhenConditionLiteral_$2_2"] = "flowWhenConditionLiteral_$2_2";
    ASTKinds["flowWhenConditionLiteral_$2_3"] = "flowWhenConditionLiteral_$2_3";
    ASTKinds["flowWhenConditionRange"] = "flowWhenConditionRange";
    ASTKinds["flowWhenConditionRange_$0_1"] = "flowWhenConditionRange_$0_1";
    ASTKinds["flowWhenConditionRange_$0_2"] = "flowWhenConditionRange_$0_2";
    ASTKinds["flowWhenConditionRange_$0_3"] = "flowWhenConditionRange_$0_3";
    ASTKinds["flowWhenConditionRange_$1_1"] = "flowWhenConditionRange_$1_1";
    ASTKinds["flowWhenConditionRange_$1_2"] = "flowWhenConditionRange_$1_2";
    ASTKinds["flowWhenConditionRange_$2_1"] = "flowWhenConditionRange_$2_1";
    ASTKinds["flowWhenConditionRange_$2_2"] = "flowWhenConditionRange_$2_2";
    ASTKinds["flowWhenConditionRange_$2_3"] = "flowWhenConditionRange_$2_3";
    ASTKinds["flowWhenConditionRange_$3_1"] = "flowWhenConditionRange_$3_1";
    ASTKinds["flowWhenConditionRange_$3_2"] = "flowWhenConditionRange_$3_2";
    ASTKinds["flowWhenConditionRange_$3_3"] = "flowWhenConditionRange_$3_3";
    ASTKinds["flowWhenConditionRange_$4_1"] = "flowWhenConditionRange_$4_1";
    ASTKinds["flowWhenConditionRange_$4_2"] = "flowWhenConditionRange_$4_2";
    ASTKinds["flowWhenConditionRange_$5_1"] = "flowWhenConditionRange_$5_1";
    ASTKinds["flowWhenConditionRange_$5_2"] = "flowWhenConditionRange_$5_2";
    ASTKinds["flowWhenConditionRange_$5_3"] = "flowWhenConditionRange_$5_3";
    ASTKinds["flowOthers"] = "flowOthers";
    ASTKinds["flowOthers_$0_1"] = "flowOthers_$0_1";
    ASTKinds["flowOthers_$0_2"] = "flowOthers_$0_2";
    ASTKinds["flowOthers_$0_3"] = "flowOthers_$0_3";
    ASTKinds["flowOthersName"] = "flowOthersName";
    ASTKinds["flowSwitch"] = "flowSwitch";
    ASTKinds["flowSwitchName"] = "flowSwitchName";
    ASTKinds["flowWhile"] = "flowWhile";
    ASTKinds["flowWhileName"] = "flowWhileName";
    ASTKinds["flowFor"] = "flowFor";
    ASTKinds["flowForName"] = "flowForName";
    ASTKinds["flowForeach"] = "flowForeach";
    ASTKinds["flowForeach_$0_1"] = "flowForeach_$0_1";
    ASTKinds["flowForeach_$0_2"] = "flowForeach_$0_2";
    ASTKinds["flowForeach_$0_3"] = "flowForeach_$0_3";
    ASTKinds["flowForeachName"] = "flowForeachName";
    ASTKinds["blockInnerBreak"] = "blockInnerBreak";
    ASTKinds["blockInnerBreakName"] = "blockInnerBreakName";
    ASTKinds["blockInnerContinue"] = "blockInnerContinue";
    ASTKinds["blockInnerContinueName"] = "blockInnerContinueName";
    ASTKinds["blockInnerReturn"] = "blockInnerReturn";
    ASTKinds["blockInnerReturnName"] = "blockInnerReturnName";
    ASTKinds["blockInnerParallel"] = "blockInnerParallel";
    ASTKinds["blockInnerParallelName"] = "blockInnerParallelName";
    ASTKinds["blockInnerVoid"] = "blockInnerVoid";
    ASTKinds["blockInnerVoidName"] = "blockInnerVoidName";
    ASTKinds["outputSettlement"] = "outputSettlement";
    ASTKinds["expr"] = "expr";
    ASTKinds["expr_$0_1"] = "expr_$0_1";
    ASTKinds["expr_$0_2"] = "expr_$0_2";
    ASTKinds["expr_$0_3"] = "expr_$0_3";
    ASTKinds["expr_$1_1"] = "expr_$1_1";
    ASTKinds["expr_$1_2"] = "expr_$1_2";
    ASTKinds["expr_$1_3"] = "expr_$1_3";
    ASTKinds["exprInner_1"] = "exprInner_1";
    ASTKinds["exprInner_2"] = "exprInner_2";
    ASTKinds["exprInner_3"] = "exprInner_3";
    ASTKinds["exprInner_4"] = "exprInner_4";
    ASTKinds["exprInner_5"] = "exprInner_5";
    ASTKinds["exprInner_6"] = "exprInner_6";
    ASTKinds["exprInner_7"] = "exprInner_7";
    ASTKinds["exprInner_8"] = "exprInner_8";
    ASTKinds["exprInner_9"] = "exprInner_9";
    ASTKinds["exprInner_10"] = "exprInner_10";
    ASTKinds["exprInner_11"] = "exprInner_11";
    ASTKinds["exprInner_12"] = "exprInner_12";
    ASTKinds["exprInner_13"] = "exprInner_13";
    ASTKinds["exprInner_14"] = "exprInner_14";
    ASTKinds["exprInner_15"] = "exprInner_15";
    ASTKinds["exprInner_16"] = "exprInner_16";
    ASTKinds["exprInner_17"] = "exprInner_17";
    ASTKinds["exprInner_18"] = "exprInner_18";
    ASTKinds["exprInner_19"] = "exprInner_19";
    ASTKinds["parenthesesOperation"] = "parenthesesOperation";
    ASTKinds["parenthesesOperation_$0_1"] = "parenthesesOperation_$0_1";
    ASTKinds["parenthesesOperation_$0_2"] = "parenthesesOperation_$0_2";
    ASTKinds["parenthesesOperation_$0_3"] = "parenthesesOperation_$0_3";
    ASTKinds["parenthesesOperation_$1_1"] = "parenthesesOperation_$1_1";
    ASTKinds["parenthesesOperation_$1_2"] = "parenthesesOperation_$1_2";
    ASTKinds["parenthesesOperation_$1_3"] = "parenthesesOperation_$1_3";
    ASTKinds["bracketsOperation"] = "bracketsOperation";
    ASTKinds["bracketsOperation_$0_1"] = "bracketsOperation_$0_1";
    ASTKinds["bracketsOperation_$0_2"] = "bracketsOperation_$0_2";
    ASTKinds["bracketsOperation_$0_3"] = "bracketsOperation_$0_3";
    ASTKinds["bracketsOperation_$1_1"] = "bracketsOperation_$1_1";
    ASTKinds["bracketsOperation_$1_2"] = "bracketsOperation_$1_2";
    ASTKinds["bracketsOperation_$1_3"] = "bracketsOperation_$1_3";
    ASTKinds["bracketsOperationOption"] = "bracketsOperationOption";
    ASTKinds["bracketsOperationOption_$0_1"] = "bracketsOperationOption_$0_1";
    ASTKinds["bracketsOperationOption_$0_2"] = "bracketsOperationOption_$0_2";
    ASTKinds["bracketsOperationOption_$0_3"] = "bracketsOperationOption_$0_3";
    ASTKinds["bracketsOperationOption_$1_1"] = "bracketsOperationOption_$1_1";
    ASTKinds["bracketsOperationOption_$1_2"] = "bracketsOperationOption_$1_2";
    ASTKinds["bracketsOperationOption_$1_3"] = "bracketsOperationOption_$1_3";
    ASTKinds["exclamationOperation"] = "exclamationOperation";
    ASTKinds["exclamationOperation_$0_1"] = "exclamationOperation_$0_1";
    ASTKinds["exclamationOperation_$0_2"] = "exclamationOperation_$0_2";
    ASTKinds["exclamationOperation_$0_3"] = "exclamationOperation_$0_3";
    ASTKinds["incrementOrDecrementOperation"] = "incrementOrDecrementOperation";
    ASTKinds["incrementOrDecrementOperation_$0_1"] = "incrementOrDecrementOperation_$0_1";
    ASTKinds["incrementOrDecrementOperation_$0_2"] = "incrementOrDecrementOperation_$0_2";
    ASTKinds["incrementOrDecrementOperation_$0_3"] = "incrementOrDecrementOperation_$0_3";
    ASTKinds["incrementOrDecrementOperator_1"] = "incrementOrDecrementOperator_1";
    ASTKinds["incrementOrDecrementOperator_2"] = "incrementOrDecrementOperator_2";
    ASTKinds["incrementOrDecrementOperator_$0"] = "incrementOrDecrementOperator_$0";
    ASTKinds["incrementOrDecrementOperator_$0_$0_1"] = "incrementOrDecrementOperator_$0_$0_1";
    ASTKinds["incrementOrDecrementOperator_$0_$0_2"] = "incrementOrDecrementOperator_$0_$0_2";
    ASTKinds["incrementOrDecrementOperator_$0_$1_1"] = "incrementOrDecrementOperator_$0_$1_1";
    ASTKinds["incrementOrDecrementOperator_$0_$1_2"] = "incrementOrDecrementOperator_$0_$1_2";
    ASTKinds["incrementOrDecrementOperator_$1"] = "incrementOrDecrementOperator_$1";
    ASTKinds["incrementOrDecrementOperator_$1_$0_1"] = "incrementOrDecrementOperator_$1_$0_1";
    ASTKinds["incrementOrDecrementOperator_$1_$0_2"] = "incrementOrDecrementOperator_$1_$0_2";
    ASTKinds["incrementOrDecrementOperator_$1_$1_1"] = "incrementOrDecrementOperator_$1_$1_1";
    ASTKinds["incrementOrDecrementOperator_$1_$1_2"] = "incrementOrDecrementOperator_$1_$1_2";
    ASTKinds["multiplicationOrDivisionOperation"] = "multiplicationOrDivisionOperation";
    ASTKinds["multiplicationOrDivisionOperation_$0_1"] = "multiplicationOrDivisionOperation_$0_1";
    ASTKinds["multiplicationOrDivisionOperation_$0_2"] = "multiplicationOrDivisionOperation_$0_2";
    ASTKinds["multiplicationOrDivisionOperation_$0_3"] = "multiplicationOrDivisionOperation_$0_3";
    ASTKinds["multiplicationOrDivisionOperation_$1_1"] = "multiplicationOrDivisionOperation_$1_1";
    ASTKinds["multiplicationOrDivisionOperation_$1_2"] = "multiplicationOrDivisionOperation_$1_2";
    ASTKinds["multiplicationOrDivisionOperation_$1_3"] = "multiplicationOrDivisionOperation_$1_3";
    ASTKinds["multiplicationOrDivisionOperator_1"] = "multiplicationOrDivisionOperator_1";
    ASTKinds["multiplicationOrDivisionOperator_2"] = "multiplicationOrDivisionOperator_2";
    ASTKinds["multiplicationOrDivisionOperator_3"] = "multiplicationOrDivisionOperator_3";
    ASTKinds["multiplicationOrDivisionOperator_$0"] = "multiplicationOrDivisionOperator_$0";
    ASTKinds["multiplicationOrDivisionOperator_$0_$0_1"] = "multiplicationOrDivisionOperator_$0_$0_1";
    ASTKinds["multiplicationOrDivisionOperator_$0_$0_2"] = "multiplicationOrDivisionOperator_$0_$0_2";
    ASTKinds["multiplicationOrDivisionOperator_$1"] = "multiplicationOrDivisionOperator_$1";
    ASTKinds["multiplicationOrDivisionOperator_$1_$0_1"] = "multiplicationOrDivisionOperator_$1_$0_1";
    ASTKinds["multiplicationOrDivisionOperator_$1_$0_2"] = "multiplicationOrDivisionOperator_$1_$0_2";
    ASTKinds["multiplicationOrDivisionOperator_$2"] = "multiplicationOrDivisionOperator_$2";
    ASTKinds["multiplicationOrDivisionOperator_$2_$0_1"] = "multiplicationOrDivisionOperator_$2_$0_1";
    ASTKinds["multiplicationOrDivisionOperator_$2_$0_2"] = "multiplicationOrDivisionOperator_$2_$0_2";
    ASTKinds["additionOrSubtractionOperation"] = "additionOrSubtractionOperation";
    ASTKinds["additionOrSubtractionOperation_$0_1"] = "additionOrSubtractionOperation_$0_1";
    ASTKinds["additionOrSubtractionOperation_$0_2"] = "additionOrSubtractionOperation_$0_2";
    ASTKinds["additionOrSubtractionOperation_$0_3"] = "additionOrSubtractionOperation_$0_3";
    ASTKinds["additionOrSubtractionOperation_$1_1"] = "additionOrSubtractionOperation_$1_1";
    ASTKinds["additionOrSubtractionOperation_$1_2"] = "additionOrSubtractionOperation_$1_2";
    ASTKinds["additionOrSubtractionOperation_$1_3"] = "additionOrSubtractionOperation_$1_3";
    ASTKinds["additionOrSubtractionOperator_1"] = "additionOrSubtractionOperator_1";
    ASTKinds["additionOrSubtractionOperator_2"] = "additionOrSubtractionOperator_2";
    ASTKinds["additionOrSubtractionOperator_$0"] = "additionOrSubtractionOperator_$0";
    ASTKinds["additionOrSubtractionOperator_$0_$0_1"] = "additionOrSubtractionOperator_$0_$0_1";
    ASTKinds["additionOrSubtractionOperator_$0_$0_2"] = "additionOrSubtractionOperator_$0_$0_2";
    ASTKinds["additionOrSubtractionOperator_$1"] = "additionOrSubtractionOperator_$1";
    ASTKinds["additionOrSubtractionOperator_$1_$0_1"] = "additionOrSubtractionOperator_$1_$0_1";
    ASTKinds["additionOrSubtractionOperator_$1_$0_2"] = "additionOrSubtractionOperator_$1_$0_2";
    ASTKinds["feedbackOperation"] = "feedbackOperation";
    ASTKinds["feedbackOperation_$0_1"] = "feedbackOperation_$0_1";
    ASTKinds["feedbackOperation_$0_2"] = "feedbackOperation_$0_2";
    ASTKinds["feedbackOperation_$0_3"] = "feedbackOperation_$0_3";
    ASTKinds["comparisonOperation"] = "comparisonOperation";
    ASTKinds["comparisonOperation_$0_1"] = "comparisonOperation_$0_1";
    ASTKinds["comparisonOperation_$0_2"] = "comparisonOperation_$0_2";
    ASTKinds["comparisonOperation_$0_3"] = "comparisonOperation_$0_3";
    ASTKinds["comparisonOperation_$1_1"] = "comparisonOperation_$1_1";
    ASTKinds["comparisonOperation_$1_2"] = "comparisonOperation_$1_2";
    ASTKinds["comparisonOperation_$1_3"] = "comparisonOperation_$1_3";
    ASTKinds["comparisonOperator_1"] = "comparisonOperator_1";
    ASTKinds["comparisonOperator_2"] = "comparisonOperator_2";
    ASTKinds["comparisonOperator_3"] = "comparisonOperator_3";
    ASTKinds["comparisonOperator_4"] = "comparisonOperator_4";
    ASTKinds["comparisonOperator_5"] = "comparisonOperator_5";
    ASTKinds["comparisonOperator_6"] = "comparisonOperator_6";
    ASTKinds["comparisonOperator_7"] = "comparisonOperator_7";
    ASTKinds["comparisonOperator_8"] = "comparisonOperator_8";
    ASTKinds["comparisonOperator_$0"] = "comparisonOperator_$0";
    ASTKinds["comparisonOperator_$0_$0_1"] = "comparisonOperator_$0_$0_1";
    ASTKinds["comparisonOperator_$0_$0_2"] = "comparisonOperator_$0_$0_2";
    ASTKinds["comparisonOperator_$0_$1_1"] = "comparisonOperator_$0_$1_1";
    ASTKinds["comparisonOperator_$0_$1_2"] = "comparisonOperator_$0_$1_2";
    ASTKinds["comparisonOperator_$1"] = "comparisonOperator_$1";
    ASTKinds["comparisonOperator_$1_$0_1"] = "comparisonOperator_$1_$0_1";
    ASTKinds["comparisonOperator_$1_$0_2"] = "comparisonOperator_$1_$0_2";
    ASTKinds["comparisonOperator_$1_$1_1"] = "comparisonOperator_$1_$1_1";
    ASTKinds["comparisonOperator_$1_$1_2"] = "comparisonOperator_$1_$1_2";
    ASTKinds["comparisonOperator_$2"] = "comparisonOperator_$2";
    ASTKinds["comparisonOperator_$2_$0_1"] = "comparisonOperator_$2_$0_1";
    ASTKinds["comparisonOperator_$2_$0_2"] = "comparisonOperator_$2_$0_2";
    ASTKinds["comparisonOperator_$2_$1_1"] = "comparisonOperator_$2_$1_1";
    ASTKinds["comparisonOperator_$2_$1_2"] = "comparisonOperator_$2_$1_2";
    ASTKinds["comparisonOperator_$3"] = "comparisonOperator_$3";
    ASTKinds["comparisonOperator_$3_$0_1"] = "comparisonOperator_$3_$0_1";
    ASTKinds["comparisonOperator_$3_$0_2"] = "comparisonOperator_$3_$0_2";
    ASTKinds["comparisonOperator_$3_$1_1"] = "comparisonOperator_$3_$1_1";
    ASTKinds["comparisonOperator_$3_$1_2"] = "comparisonOperator_$3_$1_2";
    ASTKinds["comparisonOperator_$4"] = "comparisonOperator_$4";
    ASTKinds["comparisonOperator_$4_$0_1"] = "comparisonOperator_$4_$0_1";
    ASTKinds["comparisonOperator_$4_$0_2"] = "comparisonOperator_$4_$0_2";
    ASTKinds["comparisonOperator_$5"] = "comparisonOperator_$5";
    ASTKinds["comparisonOperator_$5_$0_1"] = "comparisonOperator_$5_$0_1";
    ASTKinds["comparisonOperator_$5_$0_2"] = "comparisonOperator_$5_$0_2";
    ASTKinds["comparisonOperator_$6"] = "comparisonOperator_$6";
    ASTKinds["comparisonOperator_$6_$0_1"] = "comparisonOperator_$6_$0_1";
    ASTKinds["comparisonOperator_$6_$0_2"] = "comparisonOperator_$6_$0_2";
    ASTKinds["comparisonOperator_$6_$1_1"] = "comparisonOperator_$6_$1_1";
    ASTKinds["comparisonOperator_$6_$1_2"] = "comparisonOperator_$6_$1_2";
    ASTKinds["comparisonOperator_$6_$2_1"] = "comparisonOperator_$6_$2_1";
    ASTKinds["comparisonOperator_$6_$2_2"] = "comparisonOperator_$6_$2_2";
    ASTKinds["comparisonOperator_$6_$3_1"] = "comparisonOperator_$6_$3_1";
    ASTKinds["comparisonOperator_$6_$3_2"] = "comparisonOperator_$6_$3_2";
    ASTKinds["comparisonOperator_$7"] = "comparisonOperator_$7";
    ASTKinds["comparisonOperator_$7_$0_1"] = "comparisonOperator_$7_$0_1";
    ASTKinds["comparisonOperator_$7_$0_2"] = "comparisonOperator_$7_$0_2";
    ASTKinds["comparisonOperator_$7_$1_1"] = "comparisonOperator_$7_$1_1";
    ASTKinds["comparisonOperator_$7_$1_2"] = "comparisonOperator_$7_$1_2";
    ASTKinds["comparisonOperator_$7_$2_1"] = "comparisonOperator_$7_$2_1";
    ASTKinds["comparisonOperator_$7_$2_2"] = "comparisonOperator_$7_$2_2";
    ASTKinds["comparisonOperator_$7_$3_1"] = "comparisonOperator_$7_$3_1";
    ASTKinds["comparisonOperator_$7_$3_2"] = "comparisonOperator_$7_$3_2";
    ASTKinds["comparisonOperator_$7_$4_1"] = "comparisonOperator_$7_$4_1";
    ASTKinds["comparisonOperator_$7_$4_2"] = "comparisonOperator_$7_$4_2";
    ASTKinds["logicalConjunction"] = "logicalConjunction";
    ASTKinds["logicalConjunction_$0_1"] = "logicalConjunction_$0_1";
    ASTKinds["logicalConjunction_$0_2"] = "logicalConjunction_$0_2";
    ASTKinds["logicalConjunction_$0_3"] = "logicalConjunction_$0_3";
    ASTKinds["logicalConjunction_$1_1"] = "logicalConjunction_$1_1";
    ASTKinds["logicalConjunction_$1_2"] = "logicalConjunction_$1_2";
    ASTKinds["logicalConjunction_$1_3"] = "logicalConjunction_$1_3";
    ASTKinds["logicalConjunctionOperator"] = "logicalConjunctionOperator";
    ASTKinds["logicalConjunctionOperator_$0"] = "logicalConjunctionOperator_$0";
    ASTKinds["logicalConjunctionOperator_$0_$0_1"] = "logicalConjunctionOperator_$0_$0_1";
    ASTKinds["logicalConjunctionOperator_$0_$0_2"] = "logicalConjunctionOperator_$0_$0_2";
    ASTKinds["logicalConjunctionOperator_$0_$1_1"] = "logicalConjunctionOperator_$0_$1_1";
    ASTKinds["logicalConjunctionOperator_$0_$1_2"] = "logicalConjunctionOperator_$0_$1_2";
    ASTKinds["logicalDisjunction"] = "logicalDisjunction";
    ASTKinds["logicalDisjunction_$0_1"] = "logicalDisjunction_$0_1";
    ASTKinds["logicalDisjunction_$0_2"] = "logicalDisjunction_$0_2";
    ASTKinds["logicalDisjunction_$0_3"] = "logicalDisjunction_$0_3";
    ASTKinds["logicalDisjunction_$1_1"] = "logicalDisjunction_$1_1";
    ASTKinds["logicalDisjunction_$1_2"] = "logicalDisjunction_$1_2";
    ASTKinds["logicalDisjunction_$1_3"] = "logicalDisjunction_$1_3";
    ASTKinds["logicalDisjunctionOperator"] = "logicalDisjunctionOperator";
    ASTKinds["logicalDisjunctionOperator_$0"] = "logicalDisjunctionOperator_$0";
    ASTKinds["logicalDisjunctionOperator_$0_$0_1"] = "logicalDisjunctionOperator_$0_$0_1";
    ASTKinds["logicalDisjunctionOperator_$0_$0_2"] = "logicalDisjunctionOperator_$0_$0_2";
    ASTKinds["logicalDisjunctionOperator_$0_$1_1"] = "logicalDisjunctionOperator_$0_$1_1";
    ASTKinds["logicalDisjunctionOperator_$0_$1_2"] = "logicalDisjunctionOperator_$0_$1_2";
    ASTKinds["substitution"] = "substitution";
    ASTKinds["substitution_$0_1"] = "substitution_$0_1";
    ASTKinds["substitution_$0_2"] = "substitution_$0_2";
    ASTKinds["substitution_$1_1"] = "substitution_$1_1";
    ASTKinds["substitution_$1_2"] = "substitution_$1_2";
    ASTKinds["substitution_$1_3"] = "substitution_$1_3";
    ASTKinds["substitution_$2_1"] = "substitution_$2_1";
    ASTKinds["substitution_$2_2"] = "substitution_$2_2";
    ASTKinds["substitution_$2_3"] = "substitution_$2_3";
    ASTKinds["substitutionOperator_1"] = "substitutionOperator_1";
    ASTKinds["substitutionOperator_2"] = "substitutionOperator_2";
    ASTKinds["substitutionOperator_$0"] = "substitutionOperator_$0";
    ASTKinds["substitutionOperator_$0_$0_1"] = "substitutionOperator_$0_$0_1";
    ASTKinds["substitutionOperator_$0_$0_2"] = "substitutionOperator_$0_$0_2";
    ASTKinds["substitutionOperator_$1"] = "substitutionOperator_$1";
    ASTKinds["substitutionOperator_$1_$0_1"] = "substitutionOperator_$1_$0_1";
    ASTKinds["substitutionOperator_$1_$0_2"] = "substitutionOperator_$1_$0_2";
    ASTKinds["substitutionOperator_$1_$1_1"] = "substitutionOperator_$1_$1_1";
    ASTKinds["substitutionOperator_$1_$1_2"] = "substitutionOperator_$1_$1_2";
    ASTKinds["substitutionOperation"] = "substitutionOperation";
    ASTKinds["substitutionOperation_$0_1"] = "substitutionOperation_$0_1";
    ASTKinds["substitutionOperation_$0_2"] = "substitutionOperation_$0_2";
    ASTKinds["substitutionOperation_$1_1"] = "substitutionOperation_$1_1";
    ASTKinds["substitutionOperation_$1_2"] = "substitutionOperation_$1_2";
    ASTKinds["substitutionOperation_$1_3"] = "substitutionOperation_$1_3";
    ASTKinds["substitutionOperation_$2_1"] = "substitutionOperation_$2_1";
    ASTKinds["substitutionOperation_$2_2"] = "substitutionOperation_$2_2";
    ASTKinds["substitutionOperation_$2_3"] = "substitutionOperation_$2_3";
    ASTKinds["substitutionOperationOperator_1"] = "substitutionOperationOperator_1";
    ASTKinds["substitutionOperationOperator_2"] = "substitutionOperationOperator_2";
    ASTKinds["substitutionOperationOperator_3"] = "substitutionOperationOperator_3";
    ASTKinds["substitutionOperationOperator_4"] = "substitutionOperationOperator_4";
    ASTKinds["substitutionOperationOperator_5"] = "substitutionOperationOperator_5";
    ASTKinds["substitutionOperationOperator_6"] = "substitutionOperationOperator_6";
    ASTKinds["substitutionOperationOperator_7"] = "substitutionOperationOperator_7";
    ASTKinds["substitutionOperationOperator_8"] = "substitutionOperationOperator_8";
    ASTKinds["substitutionOperationOperator_9"] = "substitutionOperationOperator_9";
    ASTKinds["substitutionOperationOperator_10"] = "substitutionOperationOperator_10";
    ASTKinds["substitutionOperationOperator_11"] = "substitutionOperationOperator_11";
    ASTKinds["substitutionOperationOperator_$0"] = "substitutionOperationOperator_$0";
    ASTKinds["substitutionOperationOperator_$0_$0_1"] = "substitutionOperationOperator_$0_$0_1";
    ASTKinds["substitutionOperationOperator_$0_$0_2"] = "substitutionOperationOperator_$0_$0_2";
    ASTKinds["substitutionOperationOperator_$0_$1_1"] = "substitutionOperationOperator_$0_$1_1";
    ASTKinds["substitutionOperationOperator_$0_$1_2"] = "substitutionOperationOperator_$0_$1_2";
    ASTKinds["substitutionOperationOperator_$1"] = "substitutionOperationOperator_$1";
    ASTKinds["substitutionOperationOperator_$1_$0_1"] = "substitutionOperationOperator_$1_$0_1";
    ASTKinds["substitutionOperationOperator_$1_$0_2"] = "substitutionOperationOperator_$1_$0_2";
    ASTKinds["substitutionOperationOperator_$1_$1_1"] = "substitutionOperationOperator_$1_$1_1";
    ASTKinds["substitutionOperationOperator_$1_$1_2"] = "substitutionOperationOperator_$1_$1_2";
    ASTKinds["substitutionOperationOperator_$2"] = "substitutionOperationOperator_$2";
    ASTKinds["substitutionOperationOperator_$2_$0_1"] = "substitutionOperationOperator_$2_$0_1";
    ASTKinds["substitutionOperationOperator_$2_$0_2"] = "substitutionOperationOperator_$2_$0_2";
    ASTKinds["substitutionOperationOperator_$2_$1_1"] = "substitutionOperationOperator_$2_$1_1";
    ASTKinds["substitutionOperationOperator_$2_$1_2"] = "substitutionOperationOperator_$2_$1_2";
    ASTKinds["substitutionOperationOperator_$3"] = "substitutionOperationOperator_$3";
    ASTKinds["substitutionOperationOperator_$3_$0_1"] = "substitutionOperationOperator_$3_$0_1";
    ASTKinds["substitutionOperationOperator_$3_$0_2"] = "substitutionOperationOperator_$3_$0_2";
    ASTKinds["substitutionOperationOperator_$3_$1_1"] = "substitutionOperationOperator_$3_$1_1";
    ASTKinds["substitutionOperationOperator_$3_$1_2"] = "substitutionOperationOperator_$3_$1_2";
    ASTKinds["substitutionOperationOperator_$4"] = "substitutionOperationOperator_$4";
    ASTKinds["substitutionOperationOperator_$4_$0_1"] = "substitutionOperationOperator_$4_$0_1";
    ASTKinds["substitutionOperationOperator_$4_$0_2"] = "substitutionOperationOperator_$4_$0_2";
    ASTKinds["substitutionOperationOperator_$4_$1_1"] = "substitutionOperationOperator_$4_$1_1";
    ASTKinds["substitutionOperationOperator_$4_$1_2"] = "substitutionOperationOperator_$4_$1_2";
    ASTKinds["substitutionOperationOperator_$5"] = "substitutionOperationOperator_$5";
    ASTKinds["substitutionOperationOperator_$5_$0_1"] = "substitutionOperationOperator_$5_$0_1";
    ASTKinds["substitutionOperationOperator_$5_$0_2"] = "substitutionOperationOperator_$5_$0_2";
    ASTKinds["substitutionOperationOperator_$5_$1_1"] = "substitutionOperationOperator_$5_$1_1";
    ASTKinds["substitutionOperationOperator_$5_$1_2"] = "substitutionOperationOperator_$5_$1_2";
    ASTKinds["substitutionOperationOperator_$5_$2_1"] = "substitutionOperationOperator_$5_$2_1";
    ASTKinds["substitutionOperationOperator_$5_$2_2"] = "substitutionOperationOperator_$5_$2_2";
    ASTKinds["substitutionOperationOperator_$6"] = "substitutionOperationOperator_$6";
    ASTKinds["substitutionOperationOperator_$6_$0_1"] = "substitutionOperationOperator_$6_$0_1";
    ASTKinds["substitutionOperationOperator_$6_$0_2"] = "substitutionOperationOperator_$6_$0_2";
    ASTKinds["substitutionOperationOperator_$6_$1_1"] = "substitutionOperationOperator_$6_$1_1";
    ASTKinds["substitutionOperationOperator_$6_$1_2"] = "substitutionOperationOperator_$6_$1_2";
    ASTKinds["substitutionOperationOperator_$6_$2_1"] = "substitutionOperationOperator_$6_$2_1";
    ASTKinds["substitutionOperationOperator_$6_$2_2"] = "substitutionOperationOperator_$6_$2_2";
    ASTKinds["substitutionOperationOperator_$7"] = "substitutionOperationOperator_$7";
    ASTKinds["substitutionOperationOperator_$7_$0_1"] = "substitutionOperationOperator_$7_$0_1";
    ASTKinds["substitutionOperationOperator_$7_$0_2"] = "substitutionOperationOperator_$7_$0_2";
    ASTKinds["substitutionOperationOperator_$7_$1_1"] = "substitutionOperationOperator_$7_$1_1";
    ASTKinds["substitutionOperationOperator_$7_$1_2"] = "substitutionOperationOperator_$7_$1_2";
    ASTKinds["substitutionOperationOperator_$7_$2_1"] = "substitutionOperationOperator_$7_$2_1";
    ASTKinds["substitutionOperationOperator_$7_$2_2"] = "substitutionOperationOperator_$7_$2_2";
    ASTKinds["substitutionOperationOperator_$8"] = "substitutionOperationOperator_$8";
    ASTKinds["substitutionOperationOperator_$8_$0_1"] = "substitutionOperationOperator_$8_$0_1";
    ASTKinds["substitutionOperationOperator_$8_$0_2"] = "substitutionOperationOperator_$8_$0_2";
    ASTKinds["substitutionOperationOperator_$8_$1_1"] = "substitutionOperationOperator_$8_$1_1";
    ASTKinds["substitutionOperationOperator_$8_$1_2"] = "substitutionOperationOperator_$8_$1_2";
    ASTKinds["substitutionOperationOperator_$8_$2_1"] = "substitutionOperationOperator_$8_$2_1";
    ASTKinds["substitutionOperationOperator_$8_$2_2"] = "substitutionOperationOperator_$8_$2_2";
    ASTKinds["substitutionOperationOperator_$9"] = "substitutionOperationOperator_$9";
    ASTKinds["substitutionOperationOperator_$9_$0_1"] = "substitutionOperationOperator_$9_$0_1";
    ASTKinds["substitutionOperationOperator_$9_$0_2"] = "substitutionOperationOperator_$9_$0_2";
    ASTKinds["substitutionOperationOperator_$9_$1_1"] = "substitutionOperationOperator_$9_$1_1";
    ASTKinds["substitutionOperationOperator_$9_$1_2"] = "substitutionOperationOperator_$9_$1_2";
    ASTKinds["substitutionOperationOperator_$9_$2_1"] = "substitutionOperationOperator_$9_$2_1";
    ASTKinds["substitutionOperationOperator_$9_$2_2"] = "substitutionOperationOperator_$9_$2_2";
    ASTKinds["substitutionOperationOperator_$10"] = "substitutionOperationOperator_$10";
    ASTKinds["substitutionOperationOperator_$10_$0_1"] = "substitutionOperationOperator_$10_$0_1";
    ASTKinds["substitutionOperationOperator_$10_$0_2"] = "substitutionOperationOperator_$10_$0_2";
    ASTKinds["substitutionOperationOperator_$10_$1_1"] = "substitutionOperationOperator_$10_$1_1";
    ASTKinds["substitutionOperationOperator_$10_$1_2"] = "substitutionOperationOperator_$10_$1_2";
    ASTKinds["commaOperation"] = "commaOperation";
    ASTKinds["commaOperation_$0"] = "commaOperation_$0";
    ASTKinds["arrayCall"] = "arrayCall";
    ASTKinds["arrayCall_$0_1"] = "arrayCall_$0_1";
    ASTKinds["arrayCall_$0_2"] = "arrayCall_$0_2";
    ASTKinds["arrayCall_$0_3"] = "arrayCall_$0_3";
    ASTKinds["arrayCall_$1_1"] = "arrayCall_$1_1";
    ASTKinds["arrayCall_$1_2"] = "arrayCall_$1_2";
    ASTKinds["arrayCall_$1_3"] = "arrayCall_$1_3";
    ASTKinds["functionCall"] = "functionCall";
    ASTKinds["functionCall_$0_1"] = "functionCall_$0_1";
    ASTKinds["functionCall_$0_2"] = "functionCall_$0_2";
    ASTKinds["functionCall_$0_3"] = "functionCall_$0_3";
    ASTKinds["functionCall_$1_1"] = "functionCall_$1_1";
    ASTKinds["functionCall_$1_2"] = "functionCall_$1_2";
    ASTKinds["functionCall_$1_3"] = "functionCall_$1_3";
    ASTKinds["signed"] = "signed";
    ASTKinds["signed_$0_1"] = "signed_$0_1";
    ASTKinds["signed_$0_2"] = "signed_$0_2";
    ASTKinds["variable_1"] = "variable_1";
    ASTKinds["variable_2"] = "variable_2";
    ASTKinds["identifer"] = "identifer";
    ASTKinds["variableLocal"] = "variableLocal";
    ASTKinds["literal_1"] = "literal_1";
    ASTKinds["literal_2"] = "literal_2";
    ASTKinds["literal_3"] = "literal_3";
    ASTKinds["literal_4"] = "literal_4";
    ASTKinds["literal_5"] = "literal_5";
    ASTKinds["literal_6"] = "literal_6";
    ASTKinds["heredoc"] = "heredoc";
    ASTKinds["heredocInner_1"] = "heredocInner_1";
    ASTKinds["heredocInner_2"] = "heredocInner_2";
    ASTKinds["heredocInner_3"] = "heredocInner_3";
    ASTKinds["heredocRaw"] = "heredocRaw";
    ASTKinds["heredocRawInner_1"] = "heredocRawInner_1";
    ASTKinds["heredocRawInner_2"] = "heredocRawInner_2";
    ASTKinds["heredocRawInner_3"] = "heredocRawInner_3";
    ASTKinds["literalString"] = "literalString";
    ASTKinds["literalStringInner_1"] = "literalStringInner_1";
    ASTKinds["literalStringInner_2"] = "literalStringInner_2";
    ASTKinds["literalStringInner_3"] = "literalStringInner_3";
    ASTKinds["literalStringInner_4"] = "literalStringInner_4";
    ASTKinds["literalStringRaw"] = "literalStringRaw";
    ASTKinds["literalStringRawInner_1"] = "literalStringRawInner_1";
    ASTKinds["literalStringRawInner_2"] = "literalStringRawInner_2";
    ASTKinds["literalStringRawInner_3"] = "literalStringRawInner_3";
    ASTKinds["literalStringRawInner_4"] = "literalStringRawInner_4";
    ASTKinds["real"] = "real";
    ASTKinds["real_$0_1"] = "real_$0_1";
    ASTKinds["real_$0_2"] = "real_$0_2";
    ASTKinds["int_1"] = "int_1";
    ASTKinds["int_2"] = "int_2";
    ASTKinds["int_3"] = "int_3";
    ASTKinds["int_x10"] = "int_x10";
    ASTKinds["int_x10_$0_1"] = "int_x10_$0_1";
    ASTKinds["int_x10_$0_2"] = "int_x10_$0_2";
    ASTKinds["int_x10Inner_1"] = "int_x10Inner_1";
    ASTKinds["int_x10Inner_2"] = "int_x10Inner_2";
    ASTKinds["int_x2"] = "int_x2";
    ASTKinds["int_x2Inner_1"] = "int_x2Inner_1";
    ASTKinds["int_x2Inner_2"] = "int_x2Inner_2";
    ASTKinds["int_x16"] = "int_x16";
    ASTKinds["int_x16Inner_1"] = "int_x16Inner_1";
    ASTKinds["int_x16Inner_2"] = "int_x16Inner_2";
    ASTKinds["preprocess_1"] = "preprocess_1";
    ASTKinds["preprocess_2"] = "preprocess_2";
    ASTKinds["preprocessGlobalDefine"] = "preprocessGlobalDefine";
    ASTKinds["preprocessGlobalDefineName"] = "preprocessGlobalDefineName";
    ASTKinds["preprocessDefine"] = "preprocessDefine";
    ASTKinds["preprocessDefineName"] = "preprocessDefineName";
    ASTKinds["maybePreprocess"] = "maybePreprocess";
    ASTKinds["preprocessBeforeCharacterSentence_1"] = "preprocessBeforeCharacterSentence_1";
    ASTKinds["preprocessBeforeCharacterSentence_2"] = "preprocessBeforeCharacterSentence_2";
    ASTKinds["preprocessAfterCharacterSentence_1"] = "preprocessAfterCharacterSentence_1";
    ASTKinds["preprocessAfterCharacterSentence_2"] = "preprocessAfterCharacterSentence_2";
    ASTKinds["$EOF"] = "$EOF";
})(ASTKinds = exports.ASTKinds || (exports.ASTKinds = {}));
class commentLong {
    constructor(commentRaw) {
        this.kind = ASTKinds.commentLong;
        this.commentRaw = commentRaw;
        this.comment = (() => {
            const s = commentRaw.map((c) => c.c);
            return (0, util_1.joinString)(s);
        })();
    }
}
exports.commentLong = commentLong;
class selectorPrefixName {
    constructor(c1, c2, c3, c4) {
        this.kind = ASTKinds.selectorPrefixName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.name = (() => {
            return 'pool';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3, c4];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.selectorPrefixName = selectorPrefixName;
class selectorMainName_1 {
    constructor(c1, c2, c3, c4, c5, c6) {
        this.kind = ASTKinds.selectorMainName_1;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.name = (() => {
            return 'random';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5, c6];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.selectorMainName_1 = selectorMainName_1;
class selectorMainName_2 {
    constructor(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10) {
        this.kind = ASTKinds.selectorMainName_2;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.c7 = c7;
        this.c8 = c8;
        this.c9 = c9;
        this.c10 = c10;
        this.name = (() => {
            return 'nonoverlap';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.selectorMainName_2 = selectorMainName_2;
class selectorMainName_3 {
    constructor(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10) {
        this.kind = ASTKinds.selectorMainName_3;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.c7 = c7;
        this.c8 = c8;
        this.c9 = c9;
        this.c10 = c10;
        this.name = (() => {
            return 'sequential';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.selectorMainName_3 = selectorMainName_3;
class selectorMainName_4 {
    constructor(c1, c2, c3, c4, c5) {
        this.kind = ASTKinds.selectorMainName_4;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.name = (() => {
            return 'array';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.selectorMainName_4 = selectorMainName_4;
class selectorMainName_5 {
    constructor(c1, c2, c3, c4) {
        this.kind = ASTKinds.selectorMainName_5;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.name = (() => {
            return 'void';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3, c4];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.selectorMainName_5 = selectorMainName_5;
class selectorMainName_6 {
    constructor(c1, c2, c3) {
        this.kind = ASTKinds.selectorMainName_6;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.name = (() => {
            return 'all';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.selectorMainName_6 = selectorMainName_6;
class selectorMainName_7 {
    constructor(c1, c2, c3, c4) {
        this.kind = ASTKinds.selectorMainName_7;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.name = (() => {
            return 'last';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3, c4];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.selectorMainName_7 = selectorMainName_7;
class selectorSuffixName {
    constructor(c1, c2, c3) {
        this.kind = ASTKinds.selectorSuffixName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.name = (() => {
            return 'pool';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.selectorSuffixName = selectorSuffixName;
class flowIfName {
    constructor(c1) {
        this.kind = ASTKinds.flowIfName;
        this.c1 = c1;
        this.comments = (() => {
            const raw = [c1];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.flowIfName = flowIfName;
class flowElseifName {
    constructor(c1, c2, c3, c4, c5, c6) {
        this.kind = ASTKinds.flowElseifName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5, c6];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.flowElseifName = flowElseifName;
class flowElseName {
    constructor(c1, c2, c3, c4) {
        this.kind = ASTKinds.flowElseName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.flowElseName = flowElseName;
class flowCaseName {
    constructor(c1, c2, c3, c4) {
        this.kind = ASTKinds.flowCaseName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.flowCaseName = flowCaseName;
class flowWhenName {
    constructor(c1, c2, c3, c4) {
        this.kind = ASTKinds.flowWhenName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.flowWhenName = flowWhenName;
class flowWhenConditions {
    constructor(conditionHead, conditionBodies) {
        this.kind = ASTKinds.flowWhenConditions;
        this.conditionHead = conditionHead;
        this.conditionBodies = conditionBodies;
        this.conditions = (() => {
            const bodies = conditionBodies.map((b) => b.body);
            return [conditionHead, ...bodies];
        })();
    }
}
exports.flowWhenConditions = flowWhenConditions;
class flowOthersName {
    constructor(c1, c2, c3, c4, c5, c6) {
        this.kind = ASTKinds.flowOthersName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5, c6];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.flowOthersName = flowOthersName;
class flowSwitchName {
    constructor(c1, c2, c3, c4, c5, c6) {
        this.kind = ASTKinds.flowSwitchName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5, c6];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.flowSwitchName = flowSwitchName;
class flowWhileName {
    constructor(c1, c2, c3, c4, c5) {
        this.kind = ASTKinds.flowWhileName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.flowWhileName = flowWhileName;
class flowForName {
    constructor(c1, c2, c3) {
        this.kind = ASTKinds.flowForName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.comments = (() => {
            const raw = [c1, c2, c3];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.flowForName = flowForName;
class flowForeachName {
    constructor(c1, c2, c3, c4, c5, c6, c7) {
        this.kind = ASTKinds.flowForeachName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.c7 = c7;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5, c6, c7];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.flowForeachName = flowForeachName;
class blockInnerBreakName {
    constructor(c1, c2, c3, c4, c5) {
        this.kind = ASTKinds.blockInnerBreakName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.blockInnerBreakName = blockInnerBreakName;
class blockInnerContinueName {
    constructor(c1, c2, c3, c4, c5, c6, c7, c8) {
        this.kind = ASTKinds.blockInnerContinueName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.c7 = c7;
        this.c8 = c8;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5, c6, c7, c8];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.blockInnerContinueName = blockInnerContinueName;
class blockInnerReturnName {
    constructor(c1, c2, c3, c4, c5, c6) {
        this.kind = ASTKinds.blockInnerReturnName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5, c6];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.blockInnerReturnName = blockInnerReturnName;
class blockInnerParallelName {
    constructor(c1, c2, c3, c4, c5, c6, c7, c8) {
        this.kind = ASTKinds.blockInnerParallelName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.c7 = c7;
        this.c8 = c8;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5, c6, c7, c8];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.blockInnerParallelName = blockInnerParallelName;
class blockInnerVoidName {
    constructor(c1, c2, c3, c4) {
        this.kind = ASTKinds.blockInnerVoidName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.blockInnerVoidName = blockInnerVoidName;
class incrementOrDecrementOperator_$0 {
    constructor(c1, c2) {
        this.kind = ASTKinds.incrementOrDecrementOperator_$0;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\+\+';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.incrementOrDecrementOperator_$0 = incrementOrDecrementOperator_$0;
class incrementOrDecrementOperator_$1 {
    constructor(c1, c2) {
        this.kind = ASTKinds.incrementOrDecrementOperator_$1;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\-\-';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.incrementOrDecrementOperator_$1 = incrementOrDecrementOperator_$1;
class multiplicationOrDivisionOperator_$0 {
    constructor(c1) {
        this.kind = ASTKinds.multiplicationOrDivisionOperator_$0;
        this.c1 = c1;
        this.body = (() => {
            return '\*';
        })();
        this.comments = (() => {
            const raw = [c1];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.multiplicationOrDivisionOperator_$0 = multiplicationOrDivisionOperator_$0;
class multiplicationOrDivisionOperator_$1 {
    constructor(c1) {
        this.kind = ASTKinds.multiplicationOrDivisionOperator_$1;
        this.c1 = c1;
        this.body = (() => {
            return '\/';
        })();
        this.comments = (() => {
            const raw = [c1];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.multiplicationOrDivisionOperator_$1 = multiplicationOrDivisionOperator_$1;
class multiplicationOrDivisionOperator_$2 {
    constructor(c1) {
        this.kind = ASTKinds.multiplicationOrDivisionOperator_$2;
        this.c1 = c1;
        this.body = (() => {
            return '\%';
        })();
        this.comments = (() => {
            const raw = [c1];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.multiplicationOrDivisionOperator_$2 = multiplicationOrDivisionOperator_$2;
class additionOrSubtractionOperator_$0 {
    constructor(c1) {
        this.kind = ASTKinds.additionOrSubtractionOperator_$0;
        this.c1 = c1;
        this.body = (() => {
            return '\+';
        })();
        this.comments = (() => {
            const raw = [c1];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.additionOrSubtractionOperator_$0 = additionOrSubtractionOperator_$0;
class additionOrSubtractionOperator_$1 {
    constructor(c1) {
        this.kind = ASTKinds.additionOrSubtractionOperator_$1;
        this.c1 = c1;
        this.body = (() => {
            return '\-';
        })();
        this.comments = (() => {
            const raw = [c1];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.additionOrSubtractionOperator_$1 = additionOrSubtractionOperator_$1;
class comparisonOperator_$0 {
    constructor(c1, c2) {
        this.kind = ASTKinds.comparisonOperator_$0;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\=\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.comparisonOperator_$0 = comparisonOperator_$0;
class comparisonOperator_$1 {
    constructor(c1, c2) {
        this.kind = ASTKinds.comparisonOperator_$1;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\!\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.comparisonOperator_$1 = comparisonOperator_$1;
class comparisonOperator_$2 {
    constructor(c1, c2) {
        this.kind = ASTKinds.comparisonOperator_$2;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\>\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.comparisonOperator_$2 = comparisonOperator_$2;
class comparisonOperator_$3 {
    constructor(c1, c2) {
        this.kind = ASTKinds.comparisonOperator_$3;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\<\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.comparisonOperator_$3 = comparisonOperator_$3;
class comparisonOperator_$4 {
    constructor(c1) {
        this.kind = ASTKinds.comparisonOperator_$4;
        this.c1 = c1;
        this.body = (() => {
            return '\<';
        })();
        this.comments = (() => {
            const raw = [c1];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.comparisonOperator_$4 = comparisonOperator_$4;
class comparisonOperator_$5 {
    constructor(c1) {
        this.kind = ASTKinds.comparisonOperator_$5;
        this.c1 = c1;
        this.body = (() => {
            return '\>';
        })();
        this.comments = (() => {
            const raw = [c1];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.comparisonOperator_$5 = comparisonOperator_$5;
class comparisonOperator_$6 {
    constructor(c1, c2, c3, c4) {
        this.kind = ASTKinds.comparisonOperator_$6;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.body = (() => {
            return '\_in\_';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3, c4];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.comparisonOperator_$6 = comparisonOperator_$6;
class comparisonOperator_$7 {
    constructor(c1, c2, c3, c4, c5) {
        this.kind = ASTKinds.comparisonOperator_$7;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.body = (() => {
            return '!\_in\_';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.comparisonOperator_$7 = comparisonOperator_$7;
class logicalConjunctionOperator_$0 {
    constructor(c1, c2) {
        this.kind = ASTKinds.logicalConjunctionOperator_$0;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\&\&';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.logicalConjunctionOperator_$0 = logicalConjunctionOperator_$0;
class logicalDisjunctionOperator_$0 {
    constructor(c1, c2) {
        this.kind = ASTKinds.logicalDisjunctionOperator_$0;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\|\|';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.logicalDisjunctionOperator_$0 = logicalDisjunctionOperator_$0;
class substitutionOperator_$0 {
    constructor(c1) {
        this.kind = ASTKinds.substitutionOperator_$0;
        this.c1 = c1;
        this.body = (() => {
            return '\=';
        })();
        this.comments = (() => {
            const raw = [c1];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.substitutionOperator_$0 = substitutionOperator_$0;
class substitutionOperator_$1 {
    constructor(c1, c2) {
        this.kind = ASTKinds.substitutionOperator_$1;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\:\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.substitutionOperator_$1 = substitutionOperator_$1;
class substitutionOperationOperator_$0 {
    constructor(c1, c2) {
        this.kind = ASTKinds.substitutionOperationOperator_$0;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\+\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.substitutionOperationOperator_$0 = substitutionOperationOperator_$0;
class substitutionOperationOperator_$1 {
    constructor(c1, c2) {
        this.kind = ASTKinds.substitutionOperationOperator_$1;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\-\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.substitutionOperationOperator_$1 = substitutionOperationOperator_$1;
class substitutionOperationOperator_$2 {
    constructor(c1, c2) {
        this.kind = ASTKinds.substitutionOperationOperator_$2;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\*\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.substitutionOperationOperator_$2 = substitutionOperationOperator_$2;
class substitutionOperationOperator_$3 {
    constructor(c1, c2) {
        this.kind = ASTKinds.substitutionOperationOperator_$3;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\/\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.substitutionOperationOperator_$3 = substitutionOperationOperator_$3;
class substitutionOperationOperator_$4 {
    constructor(c1, c2) {
        this.kind = ASTKinds.substitutionOperationOperator_$4;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\%\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.substitutionOperationOperator_$4 = substitutionOperationOperator_$4;
class substitutionOperationOperator_$5 {
    constructor(c1, c2, c3) {
        this.kind = ASTKinds.substitutionOperationOperator_$5;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.body = (() => {
            return '\+\:\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.substitutionOperationOperator_$5 = substitutionOperationOperator_$5;
class substitutionOperationOperator_$6 {
    constructor(c1, c2, c3) {
        this.kind = ASTKinds.substitutionOperationOperator_$6;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.body = (() => {
            return '\-\:\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.substitutionOperationOperator_$6 = substitutionOperationOperator_$6;
class substitutionOperationOperator_$7 {
    constructor(c1, c2, c3) {
        this.kind = ASTKinds.substitutionOperationOperator_$7;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.body = (() => {
            return '\*\:\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.substitutionOperationOperator_$7 = substitutionOperationOperator_$7;
class substitutionOperationOperator_$8 {
    constructor(c1, c2, c3) {
        this.kind = ASTKinds.substitutionOperationOperator_$8;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.body = (() => {
            return '\/\:\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.substitutionOperationOperator_$8 = substitutionOperationOperator_$8;
class substitutionOperationOperator_$9 {
    constructor(c1, c2, c3) {
        this.kind = ASTKinds.substitutionOperationOperator_$9;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.body = (() => {
            return '\%\:\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2, c3];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.substitutionOperationOperator_$9 = substitutionOperationOperator_$9;
class substitutionOperationOperator_$10 {
    constructor(c1, c2) {
        this.kind = ASTKinds.substitutionOperationOperator_$10;
        this.c1 = c1;
        this.c2 = c2;
        this.body = (() => {
            return '\,\=';
        })();
        this.comments = (() => {
            const raw = [c1, c2];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.substitutionOperationOperator_$10 = substitutionOperationOperator_$10;
class commaOperation {
    constructor(head, bodyRaw) {
        this.kind = ASTKinds.commaOperation;
        this.head = head;
        this.bodyRaw = bodyRaw;
        this.operands = (() => {
            const exprs = bodyRaw.map((b) => [b.expr]);
            const h = [head];
            return [h, ...exprs].flat();
        })();
        this.comments = (() => {
            const raw = bodyRaw.flatMap((b) => [b.spacesLhs, b.spacesRhs]);
            return raw.map((t) => {
                return t.flatMap((c) => {
                    if (typeof (c) === "string") {
                        return [];
                    }
                    if (c.kind === ASTKinds.continueLine) {
                        return [];
                    }
                    return [c];
                });
            });
        })();
    }
}
exports.commaOperation = commaOperation;
class identifer {
    constructor(head, bodyRaw) {
        this.kind = ASTKinds.identifer;
        this.head = head;
        this.bodyRaw = bodyRaw;
        this.name = (() => {
            const target = [head, ...bodyRaw];
            return (0, util_1.joinString)(target);
        })();
    }
}
exports.identifer = identifer;
class variableLocal {
    constructor(spaces, head, bodyRaw) {
        this.kind = ASTKinds.variableLocal;
        this.spaces = spaces;
        this.head = head;
        this.bodyRaw = bodyRaw;
        this.name = (() => {
            const target = ['_', head, ...bodyRaw];
            return (0, util_1.joinString)(target);
        })();
    }
}
exports.variableLocal = variableLocal;
class heredoc {
    constructor(bodyRaw) {
        this.kind = ASTKinds.heredoc;
        this.bodyRaw = bodyRaw;
        this.body = (() => {
            const characters = bodyRaw.filter((b) => b.c !== undefined).map((b) => b.c);
            return (0, util_1.joinString)(characters);
        })();
    }
}
exports.heredoc = heredoc;
class heredocRaw {
    constructor(bodyRaw) {
        this.kind = ASTKinds.heredocRaw;
        this.bodyRaw = bodyRaw;
        this.body = (() => {
            const characters = bodyRaw.filter((b) => b.c !== undefined).map((b) => b.c);
            return (0, util_1.joinString)(characters);
        })();
    }
}
exports.heredocRaw = heredocRaw;
class literalString {
    constructor(bodyRaw) {
        this.kind = ASTKinds.literalString;
        this.bodyRaw = bodyRaw;
        this.body = (() => {
            const characters = bodyRaw.filter((b) => typeof (b) === "string");
            return (0, util_1.joinString)(characters);
        })();
    }
}
exports.literalString = literalString;
class literalStringRaw {
    constructor(bodyRaw) {
        this.kind = ASTKinds.literalStringRaw;
        this.bodyRaw = bodyRaw;
        this.body = (() => {
            const characters = bodyRaw.filter((b) => typeof (b) === "string");
            return (0, util_1.joinString)(characters);
        })();
    }
}
exports.literalStringRaw = literalStringRaw;
class real {
    constructor(sign, head, integerPart, fractionalPart) {
        this.kind = ASTKinds.real;
        this.sign = sign;
        this.head = head;
        this.integerPart = integerPart;
        this.fractionalPart = fractionalPart;
        this.str = (() => {
            return (0, util_1.joinString)([
                sign === null ? "" : sign,
                head,
                ...integerPart,
                '.',
                ...fractionalPart,
            ]);
        })();
        this.value = (() => {
            return parseFloat(this.str);
        })();
    }
}
exports.real = real;
class int_x10 {
    constructor(sign, head, bodyRaw) {
        this.kind = ASTKinds.int_x10;
        this.sign = sign;
        this.head = head;
        this.bodyRaw = bodyRaw;
        this.str = (() => {
            return (0, util_1.joinString)([
                sign === null ? "" : sign,
                head,
                ...bodyRaw
            ]);
        })();
        this.value = (() => {
            return parseInt(this.str);
        })();
    }
}
exports.int_x10 = int_x10;
class int_x2 {
    constructor(head, bodyRaw) {
        this.kind = ASTKinds.int_x2;
        this.head = head;
        this.bodyRaw = bodyRaw;
        this.str = (() => {
            return (0, util_1.joinString)([head, ...bodyRaw]);
        })();
        this.value = (() => {
            return parseInt((0, util_1.joinString)(bodyRaw), 2);
        })();
    }
}
exports.int_x2 = int_x2;
class int_x16 {
    constructor(head, bodyRaw) {
        this.kind = ASTKinds.int_x16;
        this.head = head;
        this.bodyRaw = bodyRaw;
        this.str = (() => {
            return (0, util_1.joinString)([head, ...bodyRaw]);
        })();
        this.value = (() => {
            return parseInt((0, util_1.joinString)(bodyRaw), 16);
        })();
    }
}
exports.int_x16 = int_x16;
class preprocessGlobalDefine {
    constructor(nameRaw, spacesLhs, beforeRaw, spacesRhs, afterRaw, newLine) {
        this.kind = ASTKinds.preprocessGlobalDefine;
        this.nameRaw = nameRaw;
        this.spacesLhs = spacesLhs;
        this.beforeRaw = beforeRaw;
        this.spacesRhs = spacesRhs;
        this.afterRaw = afterRaw;
        this.newLine = newLine;
        this.before = (() => {
            return (0, util_1.joinString)(beforeRaw);
        })();
        this.after = (() => {
            return (0, util_1.joinString)(afterRaw);
        })();
    }
}
exports.preprocessGlobalDefine = preprocessGlobalDefine;
class preprocessGlobalDefineName {
    constructor(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13) {
        this.kind = ASTKinds.preprocessGlobalDefineName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.c7 = c7;
        this.c8 = c8;
        this.c9 = c9;
        this.c10 = c10;
        this.c11 = c11;
        this.c12 = c12;
        this.c13 = c13;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.preprocessGlobalDefineName = preprocessGlobalDefineName;
class preprocessDefine {
    constructor(nameRaw, spacesLhs, beforeRaw, spacesRhs, afterRaw, newLine) {
        this.kind = ASTKinds.preprocessDefine;
        this.nameRaw = nameRaw;
        this.spacesLhs = spacesLhs;
        this.beforeRaw = beforeRaw;
        this.spacesRhs = spacesRhs;
        this.afterRaw = afterRaw;
        this.newLine = newLine;
        this.before = (() => {
            return (0, util_1.joinString)(beforeRaw);
        })();
        this.after = (() => {
            return (0, util_1.joinString)(afterRaw);
        })();
    }
}
exports.preprocessDefine = preprocessDefine;
class preprocessDefineName {
    constructor(c1, c2, c3, c4, c5, c6, c7) {
        this.kind = ASTKinds.preprocessDefineName;
        this.c1 = c1;
        this.c2 = c2;
        this.c3 = c3;
        this.c4 = c4;
        this.c5 = c5;
        this.c6 = c6;
        this.c7 = c7;
        this.comments = (() => {
            const raw = [c1, c2, c3, c4, c5, c6, c7];
            return (0, util_1.filterOutContinueLines)(raw);
        })();
    }
}
exports.preprocessDefineName = preprocessDefineName;
class maybePreprocess {
    constructor(bodyRaw) {
        this.kind = ASTKinds.maybePreprocess;
        this.bodyRaw = bodyRaw;
        this.comments = (() => {
            return bodyRaw.flatMap((b) => {
                if (typeof (b) === "string") {
                    return [];
                }
                if (b.kind === ASTKinds.continueLine) {
                    return [];
                }
                return [b];
            });
        })();
        this.body = (() => {
            return (0, util_1.joinString)(bodyRaw);
        })();
    }
}
exports.maybePreprocess = maybePreprocess;
class Parser {
    constructor(input) {
        this.negating = false;
        this.memoSafe = true;
        this.$scope$expr$memo = new Map();
        this.pos = { overallPos: 0, line: 1, offset: 0 };
        this.input = input;
    }
    reset(pos) {
        this.pos = pos;
    }
    finished() {
        return this.pos.overallPos === this.input.length;
    }
    clearMemos() {
        this.$scope$expr$memo.clear();
    }
    matchstart($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$contents;
            let $$res = null;
            if (true
                && ($scope$contents = this.loop(() => this.matchcontent($$dpth + 1, $$cr), true)) !== null
                && this.match$EOF($$cr) !== null) {
                $$res = { kind: ASTKinds.start, contents: $scope$contents };
            }
            return $$res;
        });
    }
    matchcontent($$dpth, $$cr) {
        return this.choice([
            () => this.matchcontent_1($$dpth + 1, $$cr),
            () => this.matchcontent_2($$dpth + 1, $$cr),
            () => this.matchcontent_3($$dpth + 1, $$cr),
            () => this.matchcontent_4($$dpth + 1, $$cr),
            () => this.matchcontent_5($$dpth + 1, $$cr),
            () => this.matchcontent_6($$dpth + 1, $$cr),
            () => this.matchcontent_7($$dpth + 1, $$cr),
        ]);
    }
    matchcontent_1($$dpth, $$cr) {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    matchcontent_2($$dpth, $$cr) {
        return this.matchsomeSpaces($$dpth + 1, $$cr);
    }
    matchcontent_3($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcontent_4($$dpth, $$cr) {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    matchcontent_5($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcontent_6($$dpth, $$cr) {
        return this.matchfunctionBlock($$dpth + 1, $$cr);
    }
    matchcontent_7($$dpth, $$cr) {
        return this.matchpreprocess($$dpth + 1, $$cr);
    }
    matchnewLine($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$newLine;
            let $scope$spaces;
            let $$res = null;
            if (true
                && ($scope$newLine = this.matchnewLineBody($$dpth + 1, $$cr)) !== null
                && ($scope$spaces = this.loop(() => this.matchspace($$dpth + 1, $$cr), true)) !== null) {
                $$res = { kind: ASTKinds.newLine, newLine: $scope$newLine, spaces: $scope$spaces };
            }
            return $$res;
        });
    }
    matchnewLineBody($$dpth, $$cr) {
        return this.choice([
            () => this.matchnewLineBody_1($$dpth + 1, $$cr),
            () => this.matchnewLineBody_2($$dpth + 1, $$cr),
            () => this.matchnewLineBody_3($$dpth + 1, $$cr),
        ]);
    }
    matchnewLineBody_1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:\r\n)`, $$dpth + 1, $$cr);
    }
    matchnewLineBody_2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:\n)`, $$dpth + 1, $$cr);
    }
    matchnewLineBody_3($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:\r)`, $$dpth + 1, $$cr);
    }
    matchendOfLine($$dpth, $$cr) {
        return this.choice([
            () => this.matchendOfLine_1($$dpth + 1, $$cr),
            () => this.matchendOfLine_2($$dpth + 1, $$cr),
        ]);
    }
    matchendOfLine_1($$dpth, $$cr) {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    matchendOfLine_2($$dpth, $$cr) {
        return this.match$EOF($$cr);
    }
    matchspace($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[ \t　])`, $$dpth + 1, $$cr);
    }
    matchsomeSpaces($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spaces;
            let $$res = null;
            if (true
                && ($scope$spaces = this.loop(() => this.matchspace($$dpth + 1, $$cr), false)) !== null) {
                $$res = { kind: ASTKinds.someSpaces, spaces: $scope$spaces };
            }
            return $$res;
        });
    }
    matchcommentLong($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$commentRaw;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:/\*)`, $$dpth + 1, $$cr) !== null
                && ($scope$commentRaw = this.loop(() => this.matchcommentLongBody($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\*/)`, $$dpth + 1, $$cr) !== null) {
                $$res = new commentLong($scope$commentRaw);
            }
            return $$res;
        });
    }
    matchcommentLongBody($$dpth, $$cr) {
        return this.choice([
            () => this.matchcommentLongBody_1($$dpth + 1, $$cr),
            () => this.matchcommentLongBody_2($$dpth + 1, $$cr),
        ]);
    }
    matchcommentLongBody_1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c;
            let $$res = null;
            if (true
                && ($scope$c = this.regexAccept(String.raw `(?:[\r\n])`, $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.commentLongBody_1, c: $scope$c };
            }
            return $$res;
        });
    }
    matchcommentLongBody_2($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c;
            let $$res = null;
            if (true
                && this.negate(() => this.regexAccept(String.raw `(?:\*/)`, $$dpth + 1, $$cr)) !== null
                && ($scope$c = this.regexAccept(String.raw `(?:.)`, $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.commentLongBody_2, c: $scope$c };
            }
            return $$res;
        });
    }
    matchcommentLine($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spaces;
            let $scope$commentRaw;
            let $scope$endOfLine;
            let $$res = null;
            if (true
                && ($scope$spaces = this.loop(() => this.matchspace($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?://)`, $$dpth + 1, $$cr) !== null
                && ($scope$commentRaw = this.loop(() => this.regexAccept(String.raw `(?:[^\r\n])`, $$dpth + 1, $$cr), true)) !== null
                && ($scope$endOfLine = this.matchendOfLine($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.commentLine, spaces: $scope$spaces, commentRaw: $scope$commentRaw, endOfLine: $scope$endOfLine };
            }
            return $$res;
        });
    }
    matchcontinueLine($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$newLine;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:/)`, $$dpth + 1, $$cr) !== null
                && ($scope$newLine = this.matchnewLine($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.continueLine, newLine: $scope$newLine };
            }
            return $$res;
        });
    }
    matchcontinueLineOrCommentLong($$dpth, $$cr) {
        return this.choice([
            () => this.matchcontinueLineOrCommentLong_1($$dpth + 1, $$cr),
            () => this.matchcontinueLineOrCommentLong_2($$dpth + 1, $$cr),
        ]);
    }
    matchcontinueLineOrCommentLong_1($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcontinueLineOrCommentLong_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchspaceOrContinueLineOrCommentLong($$dpth, $$cr) {
        return this.choice([
            () => this.matchspaceOrContinueLineOrCommentLong_1($$dpth + 1, $$cr),
            () => this.matchspaceOrContinueLineOrCommentLong_2($$dpth + 1, $$cr),
            () => this.matchspaceOrContinueLineOrCommentLong_3($$dpth + 1, $$cr),
        ]);
    }
    matchspaceOrContinueLineOrCommentLong_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchspaceOrContinueLineOrCommentLong_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchspaceOrContinueLineOrCommentLong_3($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchidentiferHeadCharacter($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[^ \t　!\'"#$%&\(\)\*\+\,\-/:;<\=>/?@\[\]\`{\|}0-9_\r\n])`, $$dpth + 1, $$cr);
    }
    matchidentiferBodySentence($$dpth, $$cr) {
        return this.choice([
            () => this.matchidentiferBodySentence_1($$dpth + 1, $$cr),
            () => this.matchidentiferBodySentence_2($$dpth + 1, $$cr),
        ]);
    }
    matchidentiferBodySentence_1($$dpth, $$cr) {
        return this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr);
    }
    matchidentiferBodySentence_2($$dpth, $$cr) {
        return this.matchidentiferBodyCharacter($$dpth + 1, $$cr);
    }
    matchidentiferBodyCharacter($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[^ \t　!\'"#$%&\(\)\*\+\,\-/:;<\=>/?@\[\]\`{\|}\r\n])`, $$dpth + 1, $$cr);
    }
    matchstatementSeparator($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$separator;
            let $$res = null;
            if (true
                && ($scope$separator = this.matchstatementSeparatorBody($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.statementSeparator, separator: $scope$separator };
            }
            return $$res;
        });
    }
    matchstatementSeparatorBody($$dpth, $$cr) {
        return this.choice([
            () => this.matchstatementSeparatorBody_1($$dpth + 1, $$cr),
            () => this.matchstatementSeparatorBody_2($$dpth + 1, $$cr),
            () => this.matchstatementSeparatorBody_3($$dpth + 1, $$cr),
        ]);
    }
    matchstatementSeparatorBody_1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:;)`, $$dpth + 1, $$cr) !== null
                && ((this.matchnewLine($$dpth + 1, $$cr)) || true)) {
                $$res = { kind: ASTKinds.statementSeparatorBody_1, };
            }
            return $$res;
        });
    }
    matchstatementSeparatorBody_2($$dpth, $$cr) {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    matchstatementSeparatorBody_3($$dpth, $$cr) {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    matchstatementTerminator($$dpth, $$cr) {
        return this.choice([
            () => this.matchstatementTerminator_1($$dpth + 1, $$cr),
            () => this.matchstatementTerminator_2($$dpth + 1, $$cr),
        ]);
    }
    matchstatementTerminator_1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$separator;
            let $$res = null;
            if (true
                && ($scope$separator = this.matchstatementSeparator($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.statementTerminator_1, separator: $scope$separator };
            }
            return $$res;
        });
    }
    matchstatementTerminator_2($$dpth, $$cr) {
        return this.matchstatementTerminatorBody($$dpth + 1, $$cr);
    }
    matchstatementTerminatorBody($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.noConsume(() => this.regexAccept(String.raw `(?:})`, $$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:)`, $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.statementTerminatorBody, };
            }
            return $$res;
        });
    }
    matchfunctionBlock($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$spacesBeforeSelector;
            let $scope$selector;
            let $scope$spacesBeforeBody;
            let $scope$open;
            let $scope$blockInners;
            let $scope$close;
            let $$res = null;
            if (true
                && ($scope$name = this.matchfunctionBlockName($$dpth + 1, $$cr)) !== null
                && ($scope$spacesBeforeSelector = this.loop(() => this.matchfunctionBlock_$0($$dpth + 1, $$cr), true)) !== null
                && (($scope$selector = this.matchfunctionBlockSelector($$dpth + 1, $$cr)) || true)
                && ($scope$spacesBeforeBody = this.loop(() => this.matchfunctionBlock_$1($$dpth + 1, $$cr), true)) !== null
                && ($scope$open = this.matchfunctionBlock_$2($$dpth + 1, $$cr)) !== null
                && ($scope$blockInners = this.loop(() => this.matchblockInner($$dpth + 1, $$cr), true)) !== null
                && ($scope$close = this.matchfunctionBlock_$3($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.functionBlock, name: $scope$name, spacesBeforeSelector: $scope$spacesBeforeSelector, selector: $scope$selector, spacesBeforeBody: $scope$spacesBeforeBody, open: $scope$open, blockInners: $scope$blockInners, close: $scope$close };
            }
            return $$res;
        });
    }
    matchfunctionBlock_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchfunctionBlock_$0_1($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$0_2($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$0_3($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$0_4($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$0_5($$dpth + 1, $$cr),
        ]);
    }
    matchfunctionBlock_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchfunctionBlock_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchfunctionBlock_$0_3($$dpth, $$cr) {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    matchfunctionBlock_$0_4($$dpth, $$cr) {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    matchfunctionBlock_$0_5($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchfunctionBlock_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchfunctionBlock_$1_1($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$1_2($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$1_3($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$1_4($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$1_5($$dpth + 1, $$cr),
        ]);
    }
    matchfunctionBlock_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchfunctionBlock_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchfunctionBlock_$1_3($$dpth, $$cr) {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    matchfunctionBlock_$1_4($$dpth, $$cr) {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    matchfunctionBlock_$1_5($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchfunctionBlock_$2($$dpth, $$cr) {
        return this.choice([
            () => this.matchfunctionBlock_$2_1($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$2_2($$dpth + 1, $$cr),
        ]);
    }
    matchfunctionBlock_$2_1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:{{CHAIN)`, $$dpth + 1, $$cr);
    }
    matchfunctionBlock_$2_2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:{)`, $$dpth + 1, $$cr);
    }
    matchfunctionBlock_$3($$dpth, $$cr) {
        return this.choice([
            () => this.matchfunctionBlock_$3_1($$dpth + 1, $$cr),
            () => this.matchfunctionBlock_$3_2($$dpth + 1, $$cr),
        ]);
    }
    matchfunctionBlock_$3_1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:}}CHAIN)`, $$dpth + 1, $$cr);
    }
    matchfunctionBlock_$3_2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:})`, $$dpth + 1, $$cr);
    }
    matchfunctionBlockName($$dpth, $$cr) {
        return this.matchidentifer($$dpth + 1, $$cr);
    }
    matchfunctionBlockSelector($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spaceLhs;
            let $scope$spaceRhs;
            let $scope$selector;
            let $$res = null;
            if (true
                && ($scope$spaceLhs = this.loop(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?::)`, $$dpth + 1, $$cr) !== null
                && ($scope$spaceRhs = this.loop(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && (($scope$selector = this.matchselector($$dpth + 1, $$cr)) || true)) {
                $$res = { kind: ASTKinds.functionBlockSelector, spaceLhs: $scope$spaceLhs, spaceRhs: $scope$spaceRhs, selector: $scope$selector };
            }
            return $$res;
        });
    }
    matchselector($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$prefix;
            let $scope$main;
            let $scope$suffix;
            let $$res = null;
            if (true
                && (($scope$prefix = this.matchselectorPrefix($$dpth + 1, $$cr)) || true)
                && ($scope$main = this.matchselectorMain($$dpth + 1, $$cr)) !== null
                && (($scope$suffix = this.matchselectorSuffix($$dpth + 1, $$cr)) || true)) {
                $$res = { kind: ASTKinds.selector, prefix: $scope$prefix, main: $scope$main, suffix: $scope$suffix };
            }
            return $$res;
        });
    }
    matchselectorPrefix($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$nameRaw;
            let $$res = null;
            if (true
                && ($scope$nameRaw = this.matchselectorPrefixName($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:_)`, $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.selectorPrefix, nameRaw: $scope$nameRaw };
            }
            return $$res;
        });
    }
    matchselectorPrefixName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:p)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:o)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:o)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new selectorPrefixName($scope$c1, $scope$c2, $scope$c3, $scope$c4);
            }
            return $$res;
        });
    }
    matchselectorMain($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$nameRaw;
            let $$res = null;
            if (true
                && ($scope$nameRaw = this.matchselectorMainName($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.selectorMain, nameRaw: $scope$nameRaw };
            }
            return $$res;
        });
    }
    matchselectorMainName($$dpth, $$cr) {
        return this.choice([
            () => this.matchselectorMainName_1($$dpth + 1, $$cr),
            () => this.matchselectorMainName_2($$dpth + 1, $$cr),
            () => this.matchselectorMainName_3($$dpth + 1, $$cr),
            () => this.matchselectorMainName_4($$dpth + 1, $$cr),
            () => this.matchselectorMainName_5($$dpth + 1, $$cr),
            () => this.matchselectorMainName_6($$dpth + 1, $$cr),
            () => this.matchselectorMainName_7($$dpth + 1, $$cr),
        ]);
    }
    matchselectorMainName_1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $scope$c6;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:r)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:a)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:n)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:d)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:o)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:m)`, $$dpth + 1, $$cr) !== null
                && ($scope$c6 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new selectorMainName_1($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6);
            }
            return $$res;
        });
    }
    matchselectorMainName_2($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $scope$c6;
            let $scope$c7;
            let $scope$c8;
            let $scope$c9;
            let $scope$c10;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:n)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:o)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:n)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:o)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:v)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c6 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:r)`, $$dpth + 1, $$cr) !== null
                && ($scope$c7 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null
                && ($scope$c8 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:a)`, $$dpth + 1, $$cr) !== null
                && ($scope$c9 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:p)`, $$dpth + 1, $$cr) !== null
                && ($scope$c10 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new selectorMainName_2($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6, $scope$c7, $scope$c8, $scope$c9, $scope$c10);
            }
            return $$res;
        });
    }
    matchselectorMainName_3($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $scope$c6;
            let $scope$c7;
            let $scope$c8;
            let $scope$c9;
            let $scope$c10;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:s)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:q)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:u)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:n)`, $$dpth + 1, $$cr) !== null
                && ($scope$c6 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:t)`, $$dpth + 1, $$cr) !== null
                && ($scope$c7 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:i)`, $$dpth + 1, $$cr) !== null
                && ($scope$c8 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:a)`, $$dpth + 1, $$cr) !== null
                && ($scope$c9 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null
                && ($scope$c10 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new selectorMainName_3($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6, $scope$c7, $scope$c8, $scope$c9, $scope$c10);
            }
            return $$res;
        });
    }
    matchselectorMainName_4($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:a)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:r)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:r)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:a)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:y)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new selectorMainName_4($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5);
            }
            return $$res;
        });
    }
    matchselectorMainName_5($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:v)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:o)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:i)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:d)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new selectorMainName_5($scope$c1, $scope$c2, $scope$c3, $scope$c4);
            }
            return $$res;
        });
    }
    matchselectorMainName_6($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:a)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new selectorMainName_6($scope$c1, $scope$c2, $scope$c3);
            }
            return $$res;
        });
    }
    matchselectorMainName_7($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:a)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:s)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:t)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new selectorMainName_7($scope$c1, $scope$c2, $scope$c3, $scope$c4);
            }
            return $$res;
        });
    }
    matchselectorSuffix($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$nameRaw;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:_)`, $$dpth + 1, $$cr) !== null
                && ($scope$nameRaw = this.matchselectorSuffixName($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.selectorSuffix, nameRaw: $scope$nameRaw };
            }
            return $$res;
        });
    }
    matchselectorSuffixName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:p)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:o)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:o)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null) {
                $$res = new selectorSuffixName($scope$c1, $scope$c2, $scope$c3);
            }
            return $$res;
        });
    }
    matchblock($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spacesStart;
            let $scope$selector;
            let $scope$spacesBeforeBlock;
            let $scope$blockInners;
            let $scope$spacesEnd;
            let $$res = null;
            if (true
                && ($scope$spacesStart = this.loop(() => this.matchblock_$0($$dpth + 1, $$cr), true)) !== null
                && (($scope$selector = this.matchblockSelector($$dpth + 1, $$cr)) || true)
                && ($scope$spacesBeforeBlock = this.loop(() => this.matchblock_$1($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:{)`, $$dpth + 1, $$cr) !== null
                && ($scope$blockInners = this.loop(() => this.matchblockInner($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:})`, $$dpth + 1, $$cr) !== null
                && ($scope$spacesEnd = this.loop(() => this.matchblock_$2($$dpth + 1, $$cr), true)) !== null) {
                $$res = { kind: ASTKinds.block, spacesStart: $scope$spacesStart, selector: $scope$selector, spacesBeforeBlock: $scope$spacesBeforeBlock, blockInners: $scope$blockInners, spacesEnd: $scope$spacesEnd };
            }
            return $$res;
        });
    }
    matchblock_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchblock_$0_1($$dpth + 1, $$cr),
            () => this.matchblock_$0_2($$dpth + 1, $$cr),
            () => this.matchblock_$0_3($$dpth + 1, $$cr),
            () => this.matchblock_$0_4($$dpth + 1, $$cr),
            () => this.matchblock_$0_5($$dpth + 1, $$cr),
        ]);
    }
    matchblock_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchblock_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchblock_$0_3($$dpth, $$cr) {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    matchblock_$0_4($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchblock_$0_5($$dpth, $$cr) {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    matchblock_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchblock_$1_1($$dpth + 1, $$cr),
            () => this.matchblock_$1_2($$dpth + 1, $$cr),
            () => this.matchblock_$1_3($$dpth + 1, $$cr),
        ]);
    }
    matchblock_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchblock_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchblock_$1_3($$dpth, $$cr) {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    matchblock_$2($$dpth, $$cr) {
        return this.choice([
            () => this.matchblock_$2_1($$dpth + 1, $$cr),
            () => this.matchblock_$2_2($$dpth + 1, $$cr),
            () => this.matchblock_$2_3($$dpth + 1, $$cr),
            () => this.matchblock_$2_4($$dpth + 1, $$cr),
            () => this.matchblock_$2_5($$dpth + 1, $$cr),
        ]);
    }
    matchblock_$2_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchblock_$2_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchblock_$2_3($$dpth, $$cr) {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    matchblock_$2_4($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchblock_$2_5($$dpth, $$cr) {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    matchblockSelector($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$selector;
            let $scope$spacesLhs;
            let $scope$spacesRhs;
            let $$res = null;
            if (true
                && (($scope$selector = this.matchselector($$dpth + 1, $$cr)) || true)
                && ($scope$spacesLhs = this.loop(() => this.matchspace($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?::)`, $$dpth + 1, $$cr) !== null
                && ($scope$spacesRhs = this.loop(() => this.matchspace($$dpth + 1, $$cr), true)) !== null) {
                $$res = { kind: ASTKinds.blockSelector, selector: $scope$selector, spacesLhs: $scope$spacesLhs, spacesRhs: $scope$spacesRhs };
            }
            return $$res;
        });
    }
    matchblockInner($$dpth, $$cr) {
        return this.choice([
            () => this.matchblockInner_1($$dpth + 1, $$cr),
            () => this.matchblockInner_2($$dpth + 1, $$cr),
            () => this.matchblockInner_3($$dpth + 1, $$cr),
            () => this.matchblockInner_4($$dpth + 1, $$cr),
            () => this.matchblockInner_5($$dpth + 1, $$cr),
            () => this.matchblockInner_6($$dpth + 1, $$cr),
            () => this.matchblockInner_7($$dpth + 1, $$cr),
            () => this.matchblockInner_8($$dpth + 1, $$cr),
        ]);
    }
    matchblockInner_1($$dpth, $$cr) {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    matchblockInner_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchblockInner_3($$dpth, $$cr) {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    matchblockInner_4($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchblockInner_5($$dpth, $$cr) {
        return this.matchsomeSpaces($$dpth + 1, $$cr);
    }
    matchblockInner_6($$dpth, $$cr) {
        return this.matchblockInnerFlow($$dpth + 1, $$cr);
    }
    matchblockInner_7($$dpth, $$cr) {
        return this.matchblockInnerSentence($$dpth + 1, $$cr);
    }
    matchblockInner_8($$dpth, $$cr) {
        return this.matchpreprocess($$dpth + 1, $$cr);
    }
    matchblockInnerFlow($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$body;
            let $$res = null;
            if (true
                && ($scope$body = this.matchblockInnerFlowKind($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.blockInnerFlow, body: $scope$body };
            }
            return $$res;
        });
    }
    matchblockInnerFlowKind($$dpth, $$cr) {
        return this.choice([
            () => this.matchblockInnerFlowKind_1($$dpth + 1, $$cr),
            () => this.matchblockInnerFlowKind_2($$dpth + 1, $$cr),
            () => this.matchblockInnerFlowKind_3($$dpth + 1, $$cr),
            () => this.matchblockInnerFlowKind_4($$dpth + 1, $$cr),
            () => this.matchblockInnerFlowKind_5($$dpth + 1, $$cr),
            () => this.matchblockInnerFlowKind_6($$dpth + 1, $$cr),
            () => this.matchblockInnerFlowKind_7($$dpth + 1, $$cr),
        ]);
    }
    matchblockInnerFlowKind_1($$dpth, $$cr) {
        return this.matchflowIf($$dpth + 1, $$cr);
    }
    matchblockInnerFlowKind_2($$dpth, $$cr) {
        return this.matchflowCase($$dpth + 1, $$cr);
    }
    matchblockInnerFlowKind_3($$dpth, $$cr) {
        return this.matchflowSwitch($$dpth + 1, $$cr);
    }
    matchblockInnerFlowKind_4($$dpth, $$cr) {
        return this.matchflowWhile($$dpth + 1, $$cr);
    }
    matchblockInnerFlowKind_5($$dpth, $$cr) {
        return this.matchflowFor($$dpth + 1, $$cr);
    }
    matchblockInnerFlowKind_6($$dpth, $$cr) {
        return this.matchflowForeach($$dpth + 1, $$cr);
    }
    matchblockInnerFlowKind_7($$dpth, $$cr) {
        return this.matchblock($$dpth + 1, $$cr);
    }
    matchblockInnerSentence($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$body;
            let $scope$spaces;
            let $scope$terminator;
            let $$res = null;
            if (true
                && ($scope$body = this.matchblockInnerSentenceKind($$dpth + 1, $$cr)) !== null
                && ($scope$spaces = this.loop(() => this.matchblockInnerSentence_$0($$dpth + 1, $$cr), true)) !== null
                && ($scope$terminator = this.matchstatementTerminator($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.blockInnerSentence, body: $scope$body, spaces: $scope$spaces, terminator: $scope$terminator };
            }
            return $$res;
        });
    }
    matchblockInnerSentence_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchblockInnerSentence_$0_1($$dpth + 1, $$cr),
            () => this.matchblockInnerSentence_$0_2($$dpth + 1, $$cr),
            () => this.matchblockInnerSentence_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchblockInnerSentence_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchblockInnerSentence_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchblockInnerSentence_$0_3($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchblockInnerSentenceKind($$dpth, $$cr) {
        return this.choice([
            () => this.matchblockInnerSentenceKind_1($$dpth + 1, $$cr),
            () => this.matchblockInnerSentenceKind_2($$dpth + 1, $$cr),
            () => this.matchblockInnerSentenceKind_3($$dpth + 1, $$cr),
            () => this.matchblockInnerSentenceKind_4($$dpth + 1, $$cr),
            () => this.matchblockInnerSentenceKind_5($$dpth + 1, $$cr),
            () => this.matchblockInnerSentenceKind_6($$dpth + 1, $$cr),
            () => this.matchblockInnerSentenceKind_7($$dpth + 1, $$cr),
        ]);
    }
    matchblockInnerSentenceKind_1($$dpth, $$cr) {
        return this.matchblockInnerBreak($$dpth + 1, $$cr);
    }
    matchblockInnerSentenceKind_2($$dpth, $$cr) {
        return this.matchblockInnerContinue($$dpth + 1, $$cr);
    }
    matchblockInnerSentenceKind_3($$dpth, $$cr) {
        return this.matchblockInnerReturn($$dpth + 1, $$cr);
    }
    matchblockInnerSentenceKind_4($$dpth, $$cr) {
        return this.matchblockInnerParallel($$dpth + 1, $$cr);
    }
    matchblockInnerSentenceKind_5($$dpth, $$cr) {
        return this.matchblockInnerVoid($$dpth + 1, $$cr);
    }
    matchblockInnerSentenceKind_6($$dpth, $$cr) {
        return this.matchoutputSettlement($$dpth + 1, $$cr);
    }
    matchblockInnerSentenceKind_7($$dpth, $$cr) {
        return this.matchexpr($$dpth + 1, $$cr);
    }
    matchflowIf($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$condition;
            let $scope$block;
            let $scope$flowElseifs;
            let $scope$flowElse;
            let $$res = null;
            if (true
                && ($scope$name = this.matchflowIfName($$dpth + 1, $$cr)) !== null
                && this.loop(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                && ($scope$block = this.matchflowIf_$0($$dpth + 1, $$cr)) !== null
                && ($scope$flowElseifs = this.loop(() => this.matchflowElseif($$dpth + 1, $$cr), true)) !== null
                && (($scope$flowElse = this.matchflowElse($$dpth + 1, $$cr)) || true)) {
                $$res = { kind: ASTKinds.flowIf, name: $scope$name, condition: $scope$condition, block: $scope$block, flowElseifs: $scope$flowElseifs, flowElse: $scope$flowElse };
            }
            return $$res;
        });
    }
    matchflowIf_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowIf_$0_1($$dpth + 1, $$cr),
            () => this.matchflowIf_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchflowIf_$0_1($$dpth, $$cr) {
        return this.matchblock($$dpth + 1, $$cr);
    }
    matchflowIf_$0_2($$dpth, $$cr) {
        return this.matchflowIfBlock($$dpth + 1, $$cr);
    }
    matchflowIfName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:i)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:f)`, $$dpth + 1, $$cr) !== null) {
                $$res = new flowIfName($scope$c1);
            }
            return $$res;
        });
    }
    matchflowElseif($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$condition;
            let $scope$block;
            let $$res = null;
            if (true
                && ($scope$name = this.matchflowElseifName($$dpth + 1, $$cr)) !== null
                && this.loop(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                && ($scope$block = this.matchflowElseif_$0($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.flowElseif, name: $scope$name, condition: $scope$condition, block: $scope$block };
            }
            return $$res;
        });
    }
    matchflowElseif_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowElseif_$0_1($$dpth + 1, $$cr),
            () => this.matchflowElseif_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchflowElseif_$0_1($$dpth, $$cr) {
        return this.matchblock($$dpth + 1, $$cr);
    }
    matchflowElseif_$0_2($$dpth, $$cr) {
        return this.matchflowIfBlock($$dpth + 1, $$cr);
    }
    matchflowElseifName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $scope$c6;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:s)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:i)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:f)`, $$dpth + 1, $$cr) !== null
                && ($scope$c6 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new flowElseifName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6);
            }
            return $$res;
        });
    }
    matchflowElse($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$block;
            let $$res = null;
            if (true
                && ($scope$name = this.matchflowElseName($$dpth + 1, $$cr)) !== null
                && ($scope$block = this.matchflowElse_$0($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.flowElse, name: $scope$name, block: $scope$block };
            }
            return $$res;
        });
    }
    matchflowElse_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowElse_$0_1($$dpth + 1, $$cr),
            () => this.matchflowElse_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchflowElse_$0_1($$dpth, $$cr) {
        return this.matchblock($$dpth + 1, $$cr);
    }
    matchflowElse_$0_2($$dpth, $$cr) {
        return this.matchflowIfBlock($$dpth + 1, $$cr);
    }
    matchflowElseName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:s)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new flowElseName($scope$c1, $scope$c2, $scope$c3, $scope$c4);
            }
            return $$res;
        });
    }
    matchflowIfBlock($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spacesStart;
            let $scope$newLineFirst;
            let $scope$inner;
            let $scope$spacesEnd;
            let $$res = null;
            if (true
                && ($scope$spacesStart = this.loop(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && ($scope$newLineFirst = this.matchflowIfBlock_$0($$dpth + 1, $$cr)) !== null
                && ($scope$inner = this.matchblockInnerSentence($$dpth + 1, $$cr)) !== null
                && ($scope$spacesEnd = this.loop(() => this.matchflowIfBlock_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = { kind: ASTKinds.flowIfBlock, spacesStart: $scope$spacesStart, newLineFirst: $scope$newLineFirst, inner: $scope$inner, spacesEnd: $scope$spacesEnd };
            }
            return $$res;
        });
    }
    matchflowIfBlock_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowIfBlock_$0_1($$dpth + 1, $$cr),
            () => this.matchflowIfBlock_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchflowIfBlock_$0_1($$dpth, $$cr) {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    matchflowIfBlock_$0_2($$dpth, $$cr) {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    matchflowIfBlock_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowIfBlock_$1_1($$dpth + 1, $$cr),
            () => this.matchflowIfBlock_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchflowIfBlock_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchflowIfBlock_$1_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchflowCase($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$condition;
            let $scope$spacesBeforeBlock;
            let $scope$firstBlockInners;
            let $scope$flowWhens;
            let $scope$flowOthers;
            let $scope$lastBlockInners;
            let $scope$spacesAfterBlock;
            let $$res = null;
            if (true
                && ($scope$name = this.matchflowCaseName($$dpth + 1, $$cr)) !== null
                && this.loop(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                && ($scope$spacesBeforeBlock = this.loop(() => this.matchflowCase_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:{)`, $$dpth + 1, $$cr) !== null
                && ($scope$firstBlockInners = this.loop(() => this.matchblockInner($$dpth + 1, $$cr), true)) !== null
                && ($scope$flowWhens = this.loop(() => this.matchflowWhen($$dpth + 1, $$cr), true)) !== null
                && (($scope$flowOthers = this.matchflowOthers($$dpth + 1, $$cr)) || true)
                && ($scope$lastBlockInners = this.loop(() => this.matchblockInner($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:})`, $$dpth + 1, $$cr) !== null
                && ($scope$spacesAfterBlock = this.loop(() => this.matchflowCase_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = { kind: ASTKinds.flowCase, name: $scope$name, condition: $scope$condition, spacesBeforeBlock: $scope$spacesBeforeBlock, firstBlockInners: $scope$firstBlockInners, flowWhens: $scope$flowWhens, flowOthers: $scope$flowOthers, lastBlockInners: $scope$lastBlockInners, spacesAfterBlock: $scope$spacesAfterBlock };
            }
            return $$res;
        });
    }
    matchflowCase_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowCase_$0_1($$dpth + 1, $$cr),
            () => this.matchflowCase_$0_2($$dpth + 1, $$cr),
            () => this.matchflowCase_$0_3($$dpth + 1, $$cr),
            () => this.matchflowCase_$0_4($$dpth + 1, $$cr),
            () => this.matchflowCase_$0_5($$dpth + 1, $$cr),
        ]);
    }
    matchflowCase_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchflowCase_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchflowCase_$0_3($$dpth, $$cr) {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    matchflowCase_$0_4($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchflowCase_$0_5($$dpth, $$cr) {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    matchflowCase_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowCase_$1_1($$dpth + 1, $$cr),
            () => this.matchflowCase_$1_2($$dpth + 1, $$cr),
            () => this.matchflowCase_$1_3($$dpth + 1, $$cr),
            () => this.matchflowCase_$1_4($$dpth + 1, $$cr),
            () => this.matchflowCase_$1_5($$dpth + 1, $$cr),
        ]);
    }
    matchflowCase_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchflowCase_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchflowCase_$1_3($$dpth, $$cr) {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    matchflowCase_$1_4($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchflowCase_$1_5($$dpth, $$cr) {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    matchflowCaseName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:c)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:a)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:s)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new flowCaseName($scope$c1, $scope$c2, $scope$c3, $scope$c4);
            }
            return $$res;
        });
    }
    matchflowWhen($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$conditions;
            let $scope$block;
            let $$res = null;
            if (true
                && ($scope$name = this.matchflowWhenName($$dpth + 1, $$cr)) !== null
                && this.loop(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                && ($scope$conditions = this.matchflowWhenConditions($$dpth + 1, $$cr)) !== null
                && ($scope$block = this.matchblock($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.flowWhen, name: $scope$name, conditions: $scope$conditions, block: $scope$block };
            }
            return $$res;
        });
    }
    matchflowWhenName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:w)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:h)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:n)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new flowWhenName($scope$c1, $scope$c2, $scope$c3, $scope$c4);
            }
            return $$res;
        });
    }
    matchflowWhenConditions($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$conditionHead;
            let $scope$conditionBodies;
            let $$res = null;
            if (true
                && ($scope$conditionHead = this.matchflowWhenCondition($$dpth + 1, $$cr)) !== null
                && ($scope$conditionBodies = this.loop(() => this.matchflowWhenConditions_$0($$dpth + 1, $$cr), true)) !== null) {
                $$res = new flowWhenConditions($scope$conditionHead, $scope$conditionBodies);
            }
            return $$res;
        });
    }
    matchflowWhenConditions_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$body;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\,)`, $$dpth + 1, $$cr) !== null
                && ($scope$body = this.matchflowWhenCondition($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.flowWhenConditions_$0, body: $scope$body };
            }
            return $$res;
        });
    }
    matchflowWhenCondition($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowWhenCondition_1($$dpth + 1, $$cr),
            () => this.matchflowWhenCondition_2($$dpth + 1, $$cr),
        ]);
    }
    matchflowWhenCondition_1($$dpth, $$cr) {
        return this.matchflowWhenConditionRange($$dpth + 1, $$cr);
    }
    matchflowWhenCondition_2($$dpth, $$cr) {
        return this.matchflowWhenConditionLiteral($$dpth + 1, $$cr);
    }
    matchflowWhenConditionLiteral($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spacesStart;
            let $scope$body;
            let $scope$spacesEnd;
            let $$res = null;
            if (true
                && ($scope$spacesStart = this.loop(() => this.matchflowWhenConditionLiteral_$0($$dpth + 1, $$cr), true)) !== null
                && ($scope$body = this.matchflowWhenConditionLiteral_$1($$dpth + 1, $$cr)) !== null
                && ($scope$spacesEnd = this.loop(() => this.matchflowWhenConditionLiteral_$2($$dpth + 1, $$cr), true)) !== null) {
                $$res = { kind: ASTKinds.flowWhenConditionLiteral, spacesStart: $scope$spacesStart, body: $scope$body, spacesEnd: $scope$spacesEnd };
            }
            return $$res;
        });
    }
    matchflowWhenConditionLiteral_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowWhenConditionLiteral_$0_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionLiteral_$0_2($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionLiteral_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchflowWhenConditionLiteral_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchflowWhenConditionLiteral_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchflowWhenConditionLiteral_$0_3($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchflowWhenConditionLiteral_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowWhenConditionLiteral_$1_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionLiteral_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchflowWhenConditionLiteral_$1_1($$dpth, $$cr) {
        return this.matchliteral($$dpth + 1, $$cr);
    }
    matchflowWhenConditionLiteral_$1_2($$dpth, $$cr) {
        return this.matchmaybePreprocess($$dpth + 1, $$cr);
    }
    matchflowWhenConditionLiteral_$2($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowWhenConditionLiteral_$2_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionLiteral_$2_2($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionLiteral_$2_3($$dpth + 1, $$cr),
        ]);
    }
    matchflowWhenConditionLiteral_$2_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchflowWhenConditionLiteral_$2_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchflowWhenConditionLiteral_$2_3($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spacesStart;
            let $scope$lhs;
            let $scope$spacesLhs;
            let $scope$spacesRhs;
            let $scope$rhs;
            let $scope$spacesEnd;
            let $$res = null;
            if (true
                && ($scope$spacesStart = this.loop(() => this.matchflowWhenConditionRange_$0($$dpth + 1, $$cr), true)) !== null
                && ($scope$lhs = this.matchflowWhenConditionRange_$1($$dpth + 1, $$cr)) !== null
                && ($scope$spacesLhs = this.loop(() => this.matchflowWhenConditionRange_$2($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\-)`, $$dpth + 1, $$cr) !== null
                && ($scope$spacesRhs = this.loop(() => this.matchflowWhenConditionRange_$3($$dpth + 1, $$cr), true)) !== null
                && ($scope$rhs = this.matchflowWhenConditionRange_$4($$dpth + 1, $$cr)) !== null
                && ($scope$spacesEnd = this.loop(() => this.matchflowWhenConditionRange_$5($$dpth + 1, $$cr), true)) !== null) {
                $$res = { kind: ASTKinds.flowWhenConditionRange, spacesStart: $scope$spacesStart, lhs: $scope$lhs, spacesLhs: $scope$spacesLhs, spacesRhs: $scope$spacesRhs, rhs: $scope$rhs, spacesEnd: $scope$spacesEnd };
            }
            return $$res;
        });
    }
    matchflowWhenConditionRange_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowWhenConditionRange_$0_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$0_2($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchflowWhenConditionRange_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$0_3($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowWhenConditionRange_$1_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchflowWhenConditionRange_$1_1($$dpth, $$cr) {
        return this.matchliteral($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$1_2($$dpth, $$cr) {
        return this.matchmaybePreprocess($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$2($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowWhenConditionRange_$2_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$2_2($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$2_3($$dpth + 1, $$cr),
        ]);
    }
    matchflowWhenConditionRange_$2_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$2_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$2_3($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$3($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowWhenConditionRange_$3_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$3_2($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$3_3($$dpth + 1, $$cr),
        ]);
    }
    matchflowWhenConditionRange_$3_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$3_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$3_3($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$4($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowWhenConditionRange_$4_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$4_2($$dpth + 1, $$cr),
        ]);
    }
    matchflowWhenConditionRange_$4_1($$dpth, $$cr) {
        return this.matchliteral($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$4_2($$dpth, $$cr) {
        return this.matchmaybePreprocess($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$5($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowWhenConditionRange_$5_1($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$5_2($$dpth + 1, $$cr),
            () => this.matchflowWhenConditionRange_$5_3($$dpth + 1, $$cr),
        ]);
    }
    matchflowWhenConditionRange_$5_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$5_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchflowWhenConditionRange_$5_3($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchflowOthers($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spacesStart;
            let $scope$name;
            let $scope$block;
            let $$res = null;
            if (true
                && ($scope$spacesStart = this.loop(() => this.matchflowOthers_$0($$dpth + 1, $$cr), true)) !== null
                && ($scope$name = this.matchflowOthersName($$dpth + 1, $$cr)) !== null
                && ($scope$block = this.matchblock($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.flowOthers, spacesStart: $scope$spacesStart, name: $scope$name, block: $scope$block };
            }
            return $$res;
        });
    }
    matchflowOthers_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowOthers_$0_1($$dpth + 1, $$cr),
            () => this.matchflowOthers_$0_2($$dpth + 1, $$cr),
            () => this.matchflowOthers_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchflowOthers_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchflowOthers_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchflowOthers_$0_3($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchflowOthersName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $scope$c6;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:o)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:t)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:h)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:r)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:s)`, $$dpth + 1, $$cr) !== null
                && ($scope$c6 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new flowOthersName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6);
            }
            return $$res;
        });
    }
    matchflowSwitch($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$condition;
            let $scope$block;
            let $$res = null;
            if (true
                && ($scope$name = this.matchflowSwitchName($$dpth + 1, $$cr)) !== null
                && this.loop(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                && ($scope$block = this.matchblock($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.flowSwitch, name: $scope$name, condition: $scope$condition, block: $scope$block };
            }
            return $$res;
        });
    }
    matchflowSwitchName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $scope$c6;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:s)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:w)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:i)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:t)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:c)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:h)`, $$dpth + 1, $$cr) !== null
                && ($scope$c6 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new flowSwitchName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6);
            }
            return $$res;
        });
    }
    matchflowWhile($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$condition;
            let $scope$block;
            let $$res = null;
            if (true
                && ($scope$name = this.matchflowWhileName($$dpth + 1, $$cr)) !== null
                && this.loop(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                && ($scope$block = this.matchblock($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.flowWhile, name: $scope$name, condition: $scope$condition, block: $scope$block };
            }
            return $$res;
        });
    }
    matchflowWhileName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:w)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:h)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:i)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new flowWhileName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5);
            }
            return $$res;
        });
    }
    matchflowFor($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$initializer;
            let $scope$separator1;
            let $scope$condition;
            let $scope$separator2;
            let $scope$updater;
            let $scope$block;
            let $$res = null;
            if (true
                && ($scope$name = this.matchflowForName($$dpth + 1, $$cr)) !== null
                && this.loop(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                && ($scope$initializer = this.matchexpr($$dpth + 1, $$cr)) !== null
                && this.loop(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                && ($scope$separator1 = this.matchstatementSeparator($$dpth + 1, $$cr)) !== null
                && this.loop(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                && ($scope$condition = this.matchexpr($$dpth + 1, $$cr)) !== null
                && this.loop(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                && ($scope$separator2 = this.matchstatementSeparator($$dpth + 1, $$cr)) !== null
                && this.loop(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                && ($scope$updater = this.matchexpr($$dpth + 1, $$cr)) !== null
                && ($scope$block = this.matchblock($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.flowFor, name: $scope$name, initializer: $scope$initializer, separator1: $scope$separator1, condition: $scope$condition, separator2: $scope$separator2, updater: $scope$updater, block: $scope$block };
            }
            return $$res;
        });
    }
    matchflowForName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:f)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:o)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:r)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new flowForName($scope$c1, $scope$c2, $scope$c3);
            }
            return $$res;
        });
    }
    matchflowForeach($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$target;
            let $scope$separator;
            let $scope$spaceBeforeVariable;
            let $scope$variable;
            let $scope$block;
            let $$res = null;
            if (true
                && ($scope$name = this.matchflowForeachName($$dpth + 1, $$cr)) !== null
                && this.loop(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                && ($scope$target = this.matchexpr($$dpth + 1, $$cr)) !== null
                && this.loop(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                && ($scope$separator = this.matchstatementSeparator($$dpth + 1, $$cr)) !== null
                && ($scope$spaceBeforeVariable = this.loop(() => this.matchflowForeach_$0($$dpth + 1, $$cr), true)) !== null
                && ($scope$variable = this.matchvariable($$dpth + 1, $$cr)) !== null
                && ($scope$block = this.matchblock($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.flowForeach, name: $scope$name, target: $scope$target, separator: $scope$separator, spaceBeforeVariable: $scope$spaceBeforeVariable, variable: $scope$variable, block: $scope$block };
            }
            return $$res;
        });
    }
    matchflowForeach_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchflowForeach_$0_1($$dpth + 1, $$cr),
            () => this.matchflowForeach_$0_2($$dpth + 1, $$cr),
            () => this.matchflowForeach_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchflowForeach_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchflowForeach_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchflowForeach_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchflowForeachName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $scope$c6;
            let $scope$c7;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:f)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:o)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:r)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:a)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:c)`, $$dpth + 1, $$cr) !== null
                && ($scope$c6 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:h)`, $$dpth + 1, $$cr) !== null
                && ($scope$c7 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new flowForeachName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6, $scope$c7);
            }
            return $$res;
        });
    }
    matchblockInnerBreak($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $$res = null;
            if (true
                && ($scope$name = this.matchblockInnerBreakName($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.blockInnerBreak, name: $scope$name };
            }
            return $$res;
        });
    }
    matchblockInnerBreakName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:b)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:r)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:a)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:k)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new blockInnerBreakName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5);
            }
            return $$res;
        });
    }
    matchblockInnerContinue($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $$res = null;
            if (true
                && ($scope$name = this.matchblockInnerContinueName($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.blockInnerContinue, name: $scope$name };
            }
            return $$res;
        });
    }
    matchblockInnerContinueName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $scope$c6;
            let $scope$c7;
            let $scope$c8;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:c)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:o)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:n)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:t)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:i)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:n)`, $$dpth + 1, $$cr) !== null
                && ($scope$c6 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:u)`, $$dpth + 1, $$cr) !== null
                && ($scope$c7 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c8 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new blockInnerContinueName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6, $scope$c7, $scope$c8);
            }
            return $$res;
        });
    }
    matchblockInnerReturn($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $$res = null;
            if (true
                && ($scope$name = this.matchblockInnerReturnName($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.blockInnerReturn, name: $scope$name };
            }
            return $$res;
        });
    }
    matchblockInnerReturnName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $scope$c6;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:r)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:t)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:u)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:r)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:n)`, $$dpth + 1, $$cr) !== null
                && ($scope$c6 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new blockInnerReturnName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6);
            }
            return $$res;
        });
    }
    matchblockInnerParallel($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$target;
            let $$res = null;
            if (true
                && ($scope$name = this.matchblockInnerParallelName($$dpth + 1, $$cr)) !== null
                && ($scope$target = this.matchexpr($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.blockInnerParallel, name: $scope$name, target: $scope$target };
            }
            return $$res;
        });
    }
    matchblockInnerParallelName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $scope$c6;
            let $scope$c7;
            let $scope$c8;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:p)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:a)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:r)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:a)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null
                && ($scope$c6 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c7 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null
                && ($scope$c8 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new blockInnerParallelName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6, $scope$c7, $scope$c8);
            }
            return $$res;
        });
    }
    matchblockInnerVoid($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$target;
            let $$res = null;
            if (true
                && ($scope$name = this.matchblockInnerVoidName($$dpth + 1, $$cr)) !== null
                && ($scope$target = this.matchexpr($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.blockInnerVoid, name: $scope$name, target: $scope$target };
            }
            return $$res;
        });
    }
    matchblockInnerVoidName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:v)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:o)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:i)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:d)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new blockInnerVoidName($scope$c1, $scope$c2, $scope$c3, $scope$c4);
            }
            return $$res;
        });
    }
    matchoutputSettlement($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$tokens;
            let $$res = null;
            if (true
                && ($scope$tokens = this.regexAccept(String.raw `(?:\-\-)`, $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.outputSettlement, tokens: $scope$tokens };
            }
            return $$res;
        });
    }
    matchexpr($$dpth, $$cr) {
        const fn = () => {
            return this.run($$dpth, () => {
                let $scope$spacesLhs;
                let $scope$inner;
                let $scope$spacesRhs;
                let $$res = null;
                if (true
                    && ($scope$spacesLhs = this.loop(() => this.matchexpr_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$inner = this.matchexprInner($$dpth + 1, $$cr)) !== null
                    && ($scope$spacesRhs = this.loop(() => this.matchexpr_$1($$dpth + 1, $$cr), true)) !== null) {
                    $$res = { kind: ASTKinds.expr, spacesLhs: $scope$spacesLhs, inner: $scope$inner, spacesRhs: $scope$spacesRhs };
                }
                return $$res;
            });
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$expr$memo.get($scope$pos.overallPos);
        if (memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$expr$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes = null;
        let lastPos = $scope$pos;
        for (;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if (end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$expr$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    matchexpr_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchexpr_$0_1($$dpth + 1, $$cr),
            () => this.matchexpr_$0_2($$dpth + 1, $$cr),
            () => this.matchexpr_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchexpr_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchexpr_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchexpr_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchexpr_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchexpr_$1_1($$dpth + 1, $$cr),
            () => this.matchexpr_$1_2($$dpth + 1, $$cr),
            () => this.matchexpr_$1_3($$dpth + 1, $$cr),
        ]);
    }
    matchexpr_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchexpr_$1_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchexpr_$1_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchexprInner($$dpth, $$cr) {
        return this.choice([
            () => this.matchexprInner_1($$dpth + 1, $$cr),
            () => this.matchexprInner_2($$dpth + 1, $$cr),
            () => this.matchexprInner_3($$dpth + 1, $$cr),
            () => this.matchexprInner_4($$dpth + 1, $$cr),
            () => this.matchexprInner_5($$dpth + 1, $$cr),
            () => this.matchexprInner_6($$dpth + 1, $$cr),
            () => this.matchexprInner_7($$dpth + 1, $$cr),
            () => this.matchexprInner_8($$dpth + 1, $$cr),
            () => this.matchexprInner_9($$dpth + 1, $$cr),
            () => this.matchexprInner_10($$dpth + 1, $$cr),
            () => this.matchexprInner_11($$dpth + 1, $$cr),
            () => this.matchexprInner_12($$dpth + 1, $$cr),
            () => this.matchexprInner_13($$dpth + 1, $$cr),
            () => this.matchexprInner_14($$dpth + 1, $$cr),
            () => this.matchexprInner_15($$dpth + 1, $$cr),
            () => this.matchexprInner_16($$dpth + 1, $$cr),
            () => this.matchexprInner_17($$dpth + 1, $$cr),
            () => this.matchexprInner_18($$dpth + 1, $$cr),
            () => this.matchexprInner_19($$dpth + 1, $$cr),
        ]);
    }
    matchexprInner_1($$dpth, $$cr) {
        return this.matchcommaOperation($$dpth + 1, $$cr);
    }
    matchexprInner_2($$dpth, $$cr) {
        return this.matchmultiplicationOrDivisionOperation($$dpth + 1, $$cr);
    }
    matchexprInner_3($$dpth, $$cr) {
        return this.matchadditionOrSubtractionOperation($$dpth + 1, $$cr);
    }
    matchexprInner_4($$dpth, $$cr) {
        return this.matchlogicalConjunction($$dpth + 1, $$cr);
    }
    matchexprInner_5($$dpth, $$cr) {
        return this.matchlogicalDisjunction($$dpth + 1, $$cr);
    }
    matchexprInner_6($$dpth, $$cr) {
        return this.matchsubstitution($$dpth + 1, $$cr);
    }
    matchexprInner_7($$dpth, $$cr) {
        return this.matchsubstitutionOperation($$dpth + 1, $$cr);
    }
    matchexprInner_8($$dpth, $$cr) {
        return this.matchcomparisonOperation($$dpth + 1, $$cr);
    }
    matchexprInner_9($$dpth, $$cr) {
        return this.matcharrayCall($$dpth + 1, $$cr);
    }
    matchexprInner_10($$dpth, $$cr) {
        return this.matchfunctionCall($$dpth + 1, $$cr);
    }
    matchexprInner_11($$dpth, $$cr) {
        return this.matchparenthesesOperation($$dpth + 1, $$cr);
    }
    matchexprInner_12($$dpth, $$cr) {
        return this.matchbracketsOperation($$dpth + 1, $$cr);
    }
    matchexprInner_13($$dpth, $$cr) {
        return this.matchexclamationOperation($$dpth + 1, $$cr);
    }
    matchexprInner_14($$dpth, $$cr) {
        return this.matchincrementOrDecrementOperation($$dpth + 1, $$cr);
    }
    matchexprInner_15($$dpth, $$cr) {
        return this.matchfeedbackOperation($$dpth + 1, $$cr);
    }
    matchexprInner_16($$dpth, $$cr) {
        return this.matchliteral($$dpth + 1, $$cr);
    }
    matchexprInner_17($$dpth, $$cr) {
        return this.matchvariable($$dpth + 1, $$cr);
    }
    matchexprInner_18($$dpth, $$cr) {
        return this.matchsigned($$dpth + 1, $$cr);
    }
    matchexprInner_19($$dpth, $$cr) {
        return this.matchmaybePreprocess($$dpth + 1, $$cr);
    }
    matchparenthesesOperation($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spacesLhs;
            let $scope$operand;
            let $scope$spacesRhs;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\()`, $$dpth + 1, $$cr) !== null
                && ($scope$spacesLhs = this.loop(() => this.matchparenthesesOperation_$0($$dpth + 1, $$cr), true)) !== null
                && (($scope$operand = this.matchexpr($$dpth + 1, $$cr)) || true)
                && ($scope$spacesRhs = this.loop(() => this.matchparenthesesOperation_$1($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\))`, $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.parenthesesOperation, spacesLhs: $scope$spacesLhs, operand: $scope$operand, spacesRhs: $scope$spacesRhs };
            }
            return $$res;
        });
    }
    matchparenthesesOperation_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchparenthesesOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchparenthesesOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchparenthesesOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchparenthesesOperation_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchparenthesesOperation_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchparenthesesOperation_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchparenthesesOperation_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchparenthesesOperation_$1_1($$dpth + 1, $$cr),
            () => this.matchparenthesesOperation_$1_2($$dpth + 1, $$cr),
            () => this.matchparenthesesOperation_$1_3($$dpth + 1, $$cr),
        ]);
    }
    matchparenthesesOperation_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchparenthesesOperation_$1_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchparenthesesOperation_$1_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchbracketsOperation($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spacesLhs;
            let $scope$start;
            let $scope$end;
            let $scope$delimiter;
            let $scope$spacesRhs;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\[)`, $$dpth + 1, $$cr) !== null
                && ($scope$spacesLhs = this.loop(() => this.matchbracketsOperation_$0($$dpth + 1, $$cr), true)) !== null
                && ($scope$start = this.matchexpr($$dpth + 1, $$cr)) !== null
                && (($scope$end = this.matchbracketsOperationOption($$dpth + 1, $$cr)) || true)
                && (($scope$delimiter = this.matchbracketsOperationOption($$dpth + 1, $$cr)) || true)
                && ($scope$spacesRhs = this.loop(() => this.matchbracketsOperation_$1($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\])`, $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.bracketsOperation, spacesLhs: $scope$spacesLhs, start: $scope$start, end: $scope$end, delimiter: $scope$delimiter, spacesRhs: $scope$spacesRhs };
            }
            return $$res;
        });
    }
    matchbracketsOperation_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchbracketsOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchbracketsOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchbracketsOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchbracketsOperation_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchbracketsOperation_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchbracketsOperation_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchbracketsOperation_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchbracketsOperation_$1_1($$dpth + 1, $$cr),
            () => this.matchbracketsOperation_$1_2($$dpth + 1, $$cr),
            () => this.matchbracketsOperation_$1_3($$dpth + 1, $$cr),
        ]);
    }
    matchbracketsOperation_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchbracketsOperation_$1_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchbracketsOperation_$1_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchbracketsOperationOption($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spacesLhs;
            let $scope$spacesRhs;
            let $scope$value;
            let $$res = null;
            if (true
                && ($scope$spacesLhs = this.loop(() => this.matchbracketsOperationOption_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:,)`, $$dpth + 1, $$cr) !== null
                && ($scope$spacesRhs = this.loop(() => this.matchbracketsOperationOption_$1($$dpth + 1, $$cr), true)) !== null
                && (($scope$value = this.matchexpr($$dpth + 1, $$cr)) || true)) {
                $$res = { kind: ASTKinds.bracketsOperationOption, spacesLhs: $scope$spacesLhs, spacesRhs: $scope$spacesRhs, value: $scope$value };
            }
            return $$res;
        });
    }
    matchbracketsOperationOption_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchbracketsOperationOption_$0_1($$dpth + 1, $$cr),
            () => this.matchbracketsOperationOption_$0_2($$dpth + 1, $$cr),
            () => this.matchbracketsOperationOption_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchbracketsOperationOption_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchbracketsOperationOption_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchbracketsOperationOption_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchbracketsOperationOption_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchbracketsOperationOption_$1_1($$dpth + 1, $$cr),
            () => this.matchbracketsOperationOption_$1_2($$dpth + 1, $$cr),
            () => this.matchbracketsOperationOption_$1_3($$dpth + 1, $$cr),
        ]);
    }
    matchbracketsOperationOption_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchbracketsOperationOption_$1_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchbracketsOperationOption_$1_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchexclamationOperation($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spaces;
            let $scope$operand;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\!)`, $$dpth + 1, $$cr) !== null
                && ($scope$spaces = this.loop(() => this.matchexclamationOperation_$0($$dpth + 1, $$cr), true)) !== null
                && ($scope$operand = this.matchexpr($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.exclamationOperation, spaces: $scope$spaces, operand: $scope$operand };
            }
            return $$res;
        });
    }
    matchexclamationOperation_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchexclamationOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchexclamationOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchexclamationOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchexclamationOperation_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchexclamationOperation_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchexclamationOperation_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchincrementOrDecrementOperation($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$operand;
            let $scope$spaces;
            let $scope$operator;
            let $$res = null;
            if (true
                && ($scope$operand = this.matchvariable($$dpth + 1, $$cr)) !== null
                && ($scope$spaces = this.loop(() => this.matchincrementOrDecrementOperation_$0($$dpth + 1, $$cr), true)) !== null
                && ($scope$operator = this.matchincrementOrDecrementOperator($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.incrementOrDecrementOperation, operand: $scope$operand, spaces: $scope$spaces, operator: $scope$operator };
            }
            return $$res;
        });
    }
    matchincrementOrDecrementOperation_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchincrementOrDecrementOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchincrementOrDecrementOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchincrementOrDecrementOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchincrementOrDecrementOperation_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchincrementOrDecrementOperation_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchincrementOrDecrementOperation_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchincrementOrDecrementOperator($$dpth, $$cr) {
        return this.choice([
            () => this.matchincrementOrDecrementOperator_1($$dpth + 1, $$cr),
            () => this.matchincrementOrDecrementOperator_2($$dpth + 1, $$cr),
        ]);
    }
    matchincrementOrDecrementOperator_1($$dpth, $$cr) {
        return this.matchincrementOrDecrementOperator_$0($$dpth + 1, $$cr);
    }
    matchincrementOrDecrementOperator_2($$dpth, $$cr) {
        return this.matchincrementOrDecrementOperator_$1($$dpth + 1, $$cr);
    }
    matchincrementOrDecrementOperator_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\+)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchincrementOrDecrementOperator_$0_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\+)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchincrementOrDecrementOperator_$0_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new incrementOrDecrementOperator_$0($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchincrementOrDecrementOperator_$0_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchincrementOrDecrementOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchincrementOrDecrementOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchincrementOrDecrementOperator_$0_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchincrementOrDecrementOperator_$0_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchincrementOrDecrementOperator_$0_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchincrementOrDecrementOperator_$0_$1_1($$dpth + 1, $$cr),
            () => this.matchincrementOrDecrementOperator_$0_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchincrementOrDecrementOperator_$0_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchincrementOrDecrementOperator_$0_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchincrementOrDecrementOperator_$1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\-)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchincrementOrDecrementOperator_$1_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\-)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchincrementOrDecrementOperator_$1_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new incrementOrDecrementOperator_$1($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchincrementOrDecrementOperator_$1_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchincrementOrDecrementOperator_$1_$0_1($$dpth + 1, $$cr),
            () => this.matchincrementOrDecrementOperator_$1_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchincrementOrDecrementOperator_$1_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchincrementOrDecrementOperator_$1_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchincrementOrDecrementOperator_$1_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchincrementOrDecrementOperator_$1_$1_1($$dpth + 1, $$cr),
            () => this.matchincrementOrDecrementOperator_$1_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchincrementOrDecrementOperator_$1_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchincrementOrDecrementOperator_$1_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperation($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$operand1;
            let $scope$spacesLhs;
            let $scope$operator;
            let $scope$spacesRhs;
            let $scope$operand2;
            let $$res = null;
            if (true
                && ($scope$operand1 = this.matchexpr($$dpth + 1, $$cr)) !== null
                && ($scope$spacesLhs = this.loop(() => this.matchmultiplicationOrDivisionOperation_$0($$dpth + 1, $$cr), true)) !== null
                && ($scope$operator = this.matchmultiplicationOrDivisionOperator($$dpth + 1, $$cr)) !== null
                && ($scope$spacesRhs = this.loop(() => this.matchmultiplicationOrDivisionOperation_$1($$dpth + 1, $$cr), true)) !== null
                && ($scope$operand2 = this.matchexpr($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.multiplicationOrDivisionOperation, operand1: $scope$operand1, spacesLhs: $scope$spacesLhs, operator: $scope$operator, spacesRhs: $scope$spacesRhs, operand2: $scope$operand2 };
            }
            return $$res;
        });
    }
    matchmultiplicationOrDivisionOperation_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchmultiplicationOrDivisionOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchmultiplicationOrDivisionOperation_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperation_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperation_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperation_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchmultiplicationOrDivisionOperation_$1_1($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperation_$1_2($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperation_$1_3($$dpth + 1, $$cr),
        ]);
    }
    matchmultiplicationOrDivisionOperation_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperation_$1_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperation_$1_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperator($$dpth, $$cr) {
        return this.choice([
            () => this.matchmultiplicationOrDivisionOperator_1($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperator_2($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperator_3($$dpth + 1, $$cr),
        ]);
    }
    matchmultiplicationOrDivisionOperator_1($$dpth, $$cr) {
        return this.matchmultiplicationOrDivisionOperator_$0($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperator_2($$dpth, $$cr) {
        return this.matchmultiplicationOrDivisionOperator_$1($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperator_3($$dpth, $$cr) {
        return this.matchmultiplicationOrDivisionOperator_$2($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperator_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\*)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchmultiplicationOrDivisionOperator_$0_$0($$dpth + 1, $$cr), true)) !== null) {
                $$res = new multiplicationOrDivisionOperator_$0($scope$c1);
            }
            return $$res;
        });
    }
    matchmultiplicationOrDivisionOperator_$0_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchmultiplicationOrDivisionOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchmultiplicationOrDivisionOperator_$0_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperator_$0_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperator_$1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\/)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchmultiplicationOrDivisionOperator_$1_$0($$dpth + 1, $$cr), true)) !== null) {
                $$res = new multiplicationOrDivisionOperator_$1($scope$c1);
            }
            return $$res;
        });
    }
    matchmultiplicationOrDivisionOperator_$1_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchmultiplicationOrDivisionOperator_$1_$0_1($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperator_$1_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchmultiplicationOrDivisionOperator_$1_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperator_$1_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperator_$2($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\%)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchmultiplicationOrDivisionOperator_$2_$0($$dpth + 1, $$cr), true)) !== null) {
                $$res = new multiplicationOrDivisionOperator_$2($scope$c1);
            }
            return $$res;
        });
    }
    matchmultiplicationOrDivisionOperator_$2_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchmultiplicationOrDivisionOperator_$2_$0_1($$dpth + 1, $$cr),
            () => this.matchmultiplicationOrDivisionOperator_$2_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchmultiplicationOrDivisionOperator_$2_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchmultiplicationOrDivisionOperator_$2_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchadditionOrSubtractionOperation($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$operand1;
            let $scope$spacesLhs;
            let $scope$operator;
            let $scope$spacesRhs;
            let $scope$operand2;
            let $$res = null;
            if (true
                && ($scope$operand1 = this.matchexpr($$dpth + 1, $$cr)) !== null
                && ($scope$spacesLhs = this.loop(() => this.matchadditionOrSubtractionOperation_$0($$dpth + 1, $$cr), true)) !== null
                && ($scope$operator = this.matchadditionOrSubtractionOperator($$dpth + 1, $$cr)) !== null
                && ($scope$spacesRhs = this.loop(() => this.matchadditionOrSubtractionOperation_$1($$dpth + 1, $$cr), true)) !== null
                && ($scope$operand2 = this.matchexpr($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.additionOrSubtractionOperation, operand1: $scope$operand1, spacesLhs: $scope$spacesLhs, operator: $scope$operator, spacesRhs: $scope$spacesRhs, operand2: $scope$operand2 };
            }
            return $$res;
        });
    }
    matchadditionOrSubtractionOperation_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchadditionOrSubtractionOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchadditionOrSubtractionOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchadditionOrSubtractionOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchadditionOrSubtractionOperation_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchadditionOrSubtractionOperation_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchadditionOrSubtractionOperation_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchadditionOrSubtractionOperation_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchadditionOrSubtractionOperation_$1_1($$dpth + 1, $$cr),
            () => this.matchadditionOrSubtractionOperation_$1_2($$dpth + 1, $$cr),
            () => this.matchadditionOrSubtractionOperation_$1_3($$dpth + 1, $$cr),
        ]);
    }
    matchadditionOrSubtractionOperation_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchadditionOrSubtractionOperation_$1_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchadditionOrSubtractionOperation_$1_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchadditionOrSubtractionOperator($$dpth, $$cr) {
        return this.choice([
            () => this.matchadditionOrSubtractionOperator_1($$dpth + 1, $$cr),
            () => this.matchadditionOrSubtractionOperator_2($$dpth + 1, $$cr),
        ]);
    }
    matchadditionOrSubtractionOperator_1($$dpth, $$cr) {
        return this.matchadditionOrSubtractionOperator_$0($$dpth + 1, $$cr);
    }
    matchadditionOrSubtractionOperator_2($$dpth, $$cr) {
        return this.matchadditionOrSubtractionOperator_$1($$dpth + 1, $$cr);
    }
    matchadditionOrSubtractionOperator_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\+)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchadditionOrSubtractionOperator_$0_$0($$dpth + 1, $$cr), true)) !== null) {
                $$res = new additionOrSubtractionOperator_$0($scope$c1);
            }
            return $$res;
        });
    }
    matchadditionOrSubtractionOperator_$0_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchadditionOrSubtractionOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchadditionOrSubtractionOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchadditionOrSubtractionOperator_$0_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchadditionOrSubtractionOperator_$0_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchadditionOrSubtractionOperator_$1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\-)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchadditionOrSubtractionOperator_$1_$0($$dpth + 1, $$cr), true)) !== null) {
                $$res = new additionOrSubtractionOperator_$1($scope$c1);
            }
            return $$res;
        });
    }
    matchadditionOrSubtractionOperator_$1_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchadditionOrSubtractionOperator_$1_$0_1($$dpth + 1, $$cr),
            () => this.matchadditionOrSubtractionOperator_$1_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchadditionOrSubtractionOperator_$1_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchadditionOrSubtractionOperator_$1_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchfeedbackOperation($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spaces;
            let $scope$operand;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\&)`, $$dpth + 1, $$cr) !== null
                && ($scope$spaces = this.loop(() => this.matchfeedbackOperation_$0($$dpth + 1, $$cr), true)) !== null
                && ($scope$operand = this.matchvariable($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.feedbackOperation, spaces: $scope$spaces, operand: $scope$operand };
            }
            return $$res;
        });
    }
    matchfeedbackOperation_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchfeedbackOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchfeedbackOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchfeedbackOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchfeedbackOperation_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchfeedbackOperation_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchfeedbackOperation_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperation($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$operand1;
            let $scope$spacesLhs;
            let $scope$operator;
            let $scope$spacesRhs;
            let $scope$operand2;
            let $$res = null;
            if (true
                && ($scope$operand1 = this.matchexpr($$dpth + 1, $$cr)) !== null
                && ($scope$spacesLhs = this.loop(() => this.matchcomparisonOperation_$0($$dpth + 1, $$cr), true)) !== null
                && ($scope$operator = this.matchcomparisonOperator($$dpth + 1, $$cr)) !== null
                && ($scope$spacesRhs = this.loop(() => this.matchcomparisonOperation_$1($$dpth + 1, $$cr), true)) !== null
                && ($scope$operand2 = this.matchexpr($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.comparisonOperation, operand1: $scope$operand1, spacesLhs: $scope$spacesLhs, operator: $scope$operator, spacesRhs: $scope$spacesRhs, operand2: $scope$operand2 };
            }
            return $$res;
        });
    }
    matchcomparisonOperation_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperation_$0_2($$dpth + 1, $$cr),
            () => this.matchcomparisonOperation_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperation_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchcomparisonOperation_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperation_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperation_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperation_$1_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperation_$1_2($$dpth + 1, $$cr),
            () => this.matchcomparisonOperation_$1_3($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperation_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchcomparisonOperation_$1_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperation_$1_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_2($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_3($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_4($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_5($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_6($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_7($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_8($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_1($$dpth, $$cr) {
        return this.matchcomparisonOperator_$0($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_2($$dpth, $$cr) {
        return this.matchcomparisonOperator_$1($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_3($$dpth, $$cr) {
        return this.matchcomparisonOperator_$2($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_4($$dpth, $$cr) {
        return this.matchcomparisonOperator_$3($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_5($$dpth, $$cr) {
        return this.matchcomparisonOperator_$4($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_6($$dpth, $$cr) {
        return this.matchcomparisonOperator_$5($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_7($$dpth, $$cr) {
        return this.matchcomparisonOperator_$6($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_8($$dpth, $$cr) {
        return this.matchcomparisonOperator_$7($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcomparisonOperator_$0_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcomparisonOperator_$0_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new comparisonOperator_$0($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchcomparisonOperator_$0_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$0_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$0_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$0_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$0_$1_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$0_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$0_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$0_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\!)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcomparisonOperator_$1_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcomparisonOperator_$1_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new comparisonOperator_$1($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchcomparisonOperator_$1_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$1_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$1_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$1_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$1_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$1_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$1_$1_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$1_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$1_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$1_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$2($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\>)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcomparisonOperator_$2_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcomparisonOperator_$2_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new comparisonOperator_$2($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchcomparisonOperator_$2_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$2_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$2_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$2_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$2_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$2_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$2_$1_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$2_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$2_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$2_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$3($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\<)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcomparisonOperator_$3_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcomparisonOperator_$3_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new comparisonOperator_$3($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchcomparisonOperator_$3_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$3_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$3_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$3_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$3_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$3_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$3_$1_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$3_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$3_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$3_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$4($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\<)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcomparisonOperator_$4_$0($$dpth + 1, $$cr), true)) !== null) {
                $$res = new comparisonOperator_$4($scope$c1);
            }
            return $$res;
        });
    }
    matchcomparisonOperator_$4_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$4_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$4_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$4_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$4_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$5($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\>)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcomparisonOperator_$5_$0($$dpth + 1, $$cr), true)) !== null) {
                $$res = new comparisonOperator_$5($scope$c1);
            }
            return $$res;
        });
    }
    matchcomparisonOperator_$5_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$5_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$5_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$5_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$5_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$6($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\_)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcomparisonOperator_$6_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:i)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcomparisonOperator_$6_$1($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:n)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcomparisonOperator_$6_$2($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\_)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcomparisonOperator_$6_$3($$dpth + 1, $$cr), true)) !== null) {
                $$res = new comparisonOperator_$6($scope$c1, $scope$c2, $scope$c3, $scope$c4);
            }
            return $$res;
        });
    }
    matchcomparisonOperator_$6_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$6_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$6_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$6_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$6_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$6_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$6_$1_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$6_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$6_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$6_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$6_$2($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$6_$2_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$6_$2_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$6_$2_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$6_$2_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$6_$3($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$6_$3_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$6_$3_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$6_$3_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$6_$3_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$7($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\!)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcomparisonOperator_$7_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\_)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcomparisonOperator_$7_$1($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:i)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcomparisonOperator_$7_$2($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:n)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcomparisonOperator_$7_$3($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\_)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcomparisonOperator_$7_$4($$dpth + 1, $$cr), true)) !== null) {
                $$res = new comparisonOperator_$7($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5);
            }
            return $$res;
        });
    }
    matchcomparisonOperator_$7_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$7_$0_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$7_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$7_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$7_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$7_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$7_$1_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$7_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$7_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$7_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$7_$2($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$7_$2_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$7_$2_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$7_$2_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$7_$2_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$7_$3($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$7_$3_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$7_$3_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$7_$3_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$7_$3_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$7_$4($$dpth, $$cr) {
        return this.choice([
            () => this.matchcomparisonOperator_$7_$4_1($$dpth + 1, $$cr),
            () => this.matchcomparisonOperator_$7_$4_2($$dpth + 1, $$cr),
        ]);
    }
    matchcomparisonOperator_$7_$4_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchcomparisonOperator_$7_$4_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchlogicalConjunction($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$operand1;
            let $scope$spacesLhs;
            let $scope$operator;
            let $scope$spacesRhs;
            let $scope$operand2;
            let $$res = null;
            if (true
                && ($scope$operand1 = this.matchexpr($$dpth + 1, $$cr)) !== null
                && ($scope$spacesLhs = this.loop(() => this.matchlogicalConjunction_$0($$dpth + 1, $$cr), true)) !== null
                && ($scope$operator = this.matchlogicalConjunctionOperator($$dpth + 1, $$cr)) !== null
                && ($scope$spacesRhs = this.loop(() => this.matchlogicalConjunction_$1($$dpth + 1, $$cr), true)) !== null
                && ($scope$operand2 = this.matchexpr($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.logicalConjunction, operand1: $scope$operand1, spacesLhs: $scope$spacesLhs, operator: $scope$operator, spacesRhs: $scope$spacesRhs, operand2: $scope$operand2 };
            }
            return $$res;
        });
    }
    matchlogicalConjunction_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchlogicalConjunction_$0_1($$dpth + 1, $$cr),
            () => this.matchlogicalConjunction_$0_2($$dpth + 1, $$cr),
            () => this.matchlogicalConjunction_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchlogicalConjunction_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchlogicalConjunction_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchlogicalConjunction_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchlogicalConjunction_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchlogicalConjunction_$1_1($$dpth + 1, $$cr),
            () => this.matchlogicalConjunction_$1_2($$dpth + 1, $$cr),
            () => this.matchlogicalConjunction_$1_3($$dpth + 1, $$cr),
        ]);
    }
    matchlogicalConjunction_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchlogicalConjunction_$1_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchlogicalConjunction_$1_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchlogicalConjunctionOperator($$dpth, $$cr) {
        return this.matchlogicalConjunctionOperator_$0($$dpth + 1, $$cr);
    }
    matchlogicalConjunctionOperator_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\&)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchlogicalConjunctionOperator_$0_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\&)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchlogicalConjunctionOperator_$0_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new logicalConjunctionOperator_$0($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchlogicalConjunctionOperator_$0_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchlogicalConjunctionOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchlogicalConjunctionOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchlogicalConjunctionOperator_$0_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchlogicalConjunctionOperator_$0_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchlogicalConjunctionOperator_$0_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchlogicalConjunctionOperator_$0_$1_1($$dpth + 1, $$cr),
            () => this.matchlogicalConjunctionOperator_$0_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchlogicalConjunctionOperator_$0_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchlogicalConjunctionOperator_$0_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchlogicalDisjunction($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$operand1;
            let $scope$spacesLhs;
            let $scope$operator;
            let $scope$spacesRhs;
            let $scope$operand2;
            let $$res = null;
            if (true
                && ($scope$operand1 = this.matchexpr($$dpth + 1, $$cr)) !== null
                && ($scope$spacesLhs = this.loop(() => this.matchlogicalDisjunction_$0($$dpth + 1, $$cr), true)) !== null
                && ($scope$operator = this.matchlogicalDisjunctionOperator($$dpth + 1, $$cr)) !== null
                && ($scope$spacesRhs = this.loop(() => this.matchlogicalDisjunction_$1($$dpth + 1, $$cr), true)) !== null
                && ($scope$operand2 = this.matchexpr($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.logicalDisjunction, operand1: $scope$operand1, spacesLhs: $scope$spacesLhs, operator: $scope$operator, spacesRhs: $scope$spacesRhs, operand2: $scope$operand2 };
            }
            return $$res;
        });
    }
    matchlogicalDisjunction_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchlogicalDisjunction_$0_1($$dpth + 1, $$cr),
            () => this.matchlogicalDisjunction_$0_2($$dpth + 1, $$cr),
            () => this.matchlogicalDisjunction_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchlogicalDisjunction_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchlogicalDisjunction_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchlogicalDisjunction_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchlogicalDisjunction_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchlogicalDisjunction_$1_1($$dpth + 1, $$cr),
            () => this.matchlogicalDisjunction_$1_2($$dpth + 1, $$cr),
            () => this.matchlogicalDisjunction_$1_3($$dpth + 1, $$cr),
        ]);
    }
    matchlogicalDisjunction_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchlogicalDisjunction_$1_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchlogicalDisjunction_$1_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchlogicalDisjunctionOperator($$dpth, $$cr) {
        return this.matchlogicalDisjunctionOperator_$0($$dpth + 1, $$cr);
    }
    matchlogicalDisjunctionOperator_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\|)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchlogicalDisjunctionOperator_$0_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\|)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchlogicalDisjunctionOperator_$0_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new logicalDisjunctionOperator_$0($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchlogicalDisjunctionOperator_$0_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchlogicalDisjunctionOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchlogicalDisjunctionOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchlogicalDisjunctionOperator_$0_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchlogicalDisjunctionOperator_$0_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchlogicalDisjunctionOperator_$0_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchlogicalDisjunctionOperator_$0_$1_1($$dpth + 1, $$cr),
            () => this.matchlogicalDisjunctionOperator_$0_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchlogicalDisjunctionOperator_$0_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchlogicalDisjunctionOperator_$0_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitution($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$operand1;
            let $scope$spacesLhs;
            let $scope$operator;
            let $scope$spacesRhs;
            let $scope$operand2;
            let $$res = null;
            if (true
                && ($scope$operand1 = this.matchsubstitution_$0($$dpth + 1, $$cr)) !== null
                && ($scope$spacesLhs = this.loop(() => this.matchsubstitution_$1($$dpth + 1, $$cr), true)) !== null
                && ($scope$operator = this.matchsubstitutionOperator($$dpth + 1, $$cr)) !== null
                && ($scope$spacesRhs = this.loop(() => this.matchsubstitution_$2($$dpth + 1, $$cr), true)) !== null
                && ($scope$operand2 = this.matchexpr($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.substitution, operand1: $scope$operand1, spacesLhs: $scope$spacesLhs, operator: $scope$operator, spacesRhs: $scope$spacesRhs, operand2: $scope$operand2 };
            }
            return $$res;
        });
    }
    matchsubstitution_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitution_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitution_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitution_$0_1($$dpth, $$cr) {
        return this.matcharrayCall($$dpth + 1, $$cr);
    }
    matchsubstitution_$0_2($$dpth, $$cr) {
        return this.matchvariable($$dpth + 1, $$cr);
    }
    matchsubstitution_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitution_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitution_$1_2($$dpth + 1, $$cr),
            () => this.matchsubstitution_$1_3($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitution_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchsubstitution_$1_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitution_$1_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitution_$2($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitution_$2_1($$dpth + 1, $$cr),
            () => this.matchsubstitution_$2_2($$dpth + 1, $$cr),
            () => this.matchsubstitution_$2_3($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitution_$2_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchsubstitution_$2_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitution_$2_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperator($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperator_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperator_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperator_1($$dpth, $$cr) {
        return this.matchsubstitutionOperator_$0($$dpth + 1, $$cr);
    }
    matchsubstitutionOperator_2($$dpth, $$cr) {
        return this.matchsubstitutionOperator_$1($$dpth + 1, $$cr);
    }
    matchsubstitutionOperator_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchsubstitutionOperator_$0_$0($$dpth + 1, $$cr), true)) !== null) {
                $$res = new substitutionOperator_$0($scope$c1);
            }
            return $$res;
        });
    }
    matchsubstitutionOperator_$0_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperator_$0_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperator_$0_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperator_$1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\:)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchsubstitutionOperator_$1_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchsubstitutionOperator_$1_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new substitutionOperator_$1($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchsubstitutionOperator_$1_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperator_$1_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperator_$1_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperator_$1_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperator_$1_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperator_$1_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperator_$1_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperator_$1_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperator_$1_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperator_$1_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperation($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$operand1;
            let $scope$spacesLhs;
            let $scope$operator;
            let $scope$spacesRhs;
            let $scope$operand2;
            let $$res = null;
            if (true
                && ($scope$operand1 = this.matchsubstitutionOperation_$0($$dpth + 1, $$cr)) !== null
                && ($scope$spacesLhs = this.loop(() => this.matchsubstitutionOperation_$1($$dpth + 1, $$cr), true)) !== null
                && ($scope$operator = this.matchsubstitutionOperationOperator($$dpth + 1, $$cr)) !== null
                && ($scope$spacesRhs = this.loop(() => this.matchsubstitutionOperation_$2($$dpth + 1, $$cr), true)) !== null
                && ($scope$operand2 = this.matchexpr($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.substitutionOperation, operand1: $scope$operand1, spacesLhs: $scope$spacesLhs, operator: $scope$operator, spacesRhs: $scope$spacesRhs, operand2: $scope$operand2 };
            }
            return $$res;
        });
    }
    matchsubstitutionOperation_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperation_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperation_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperation_$0_1($$dpth, $$cr) {
        return this.matcharrayCall($$dpth + 1, $$cr);
    }
    matchsubstitutionOperation_$0_2($$dpth, $$cr) {
        return this.matchvariable($$dpth + 1, $$cr);
    }
    matchsubstitutionOperation_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperation_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperation_$1_2($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperation_$1_3($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperation_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchsubstitutionOperation_$1_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperation_$1_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperation_$2($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperation_$2_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperation_$2_2($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperation_$2_3($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperation_$2_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchsubstitutionOperation_$2_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperation_$2_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_2($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_3($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_4($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_5($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_6($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_7($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_8($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_9($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_10($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_11($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_1($$dpth, $$cr) {
        return this.matchsubstitutionOperationOperator_$0($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_2($$dpth, $$cr) {
        return this.matchsubstitutionOperationOperator_$1($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_3($$dpth, $$cr) {
        return this.matchsubstitutionOperationOperator_$2($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_4($$dpth, $$cr) {
        return this.matchsubstitutionOperationOperator_$3($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_5($$dpth, $$cr) {
        return this.matchsubstitutionOperationOperator_$4($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_6($$dpth, $$cr) {
        return this.matchsubstitutionOperationOperator_$5($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_7($$dpth, $$cr) {
        return this.matchsubstitutionOperationOperator_$6($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_8($$dpth, $$cr) {
        return this.matchsubstitutionOperationOperator_$7($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_9($$dpth, $$cr) {
        return this.matchsubstitutionOperationOperator_$8($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_10($$dpth, $$cr) {
        return this.matchsubstitutionOperationOperator_$9($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_11($$dpth, $$cr) {
        return this.matchsubstitutionOperationOperator_$10($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\+)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchsubstitutionOperationOperator_$0_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchsubstitutionOperationOperator_$0_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new substitutionOperationOperator_$0($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchsubstitutionOperationOperator_$0_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$0_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$0_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$0_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$0_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$0_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$0_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$0_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\-)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchsubstitutionOperationOperator_$1_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchsubstitutionOperationOperator_$1_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new substitutionOperationOperator_$1($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchsubstitutionOperationOperator_$1_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$1_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$1_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$1_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$1_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$1_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$1_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$1_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$1_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$1_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$2($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\*)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchsubstitutionOperationOperator_$2_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchsubstitutionOperationOperator_$2_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new substitutionOperationOperator_$2($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchsubstitutionOperationOperator_$2_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$2_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$2_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$2_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$2_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$2_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$2_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$2_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$2_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$2_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$3($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\/)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchsubstitutionOperationOperator_$3_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchsubstitutionOperationOperator_$3_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new substitutionOperationOperator_$3($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchsubstitutionOperationOperator_$3_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$3_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$3_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$3_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$3_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$3_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$3_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$3_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$3_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$3_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$4($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\%)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchsubstitutionOperationOperator_$4_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchsubstitutionOperationOperator_$4_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new substitutionOperationOperator_$4($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchsubstitutionOperationOperator_$4_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$4_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$4_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$4_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$4_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$4_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$4_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$4_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$4_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$4_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$5($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\+)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchsubstitutionOperationOperator_$5_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\:)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchsubstitutionOperationOperator_$5_$1($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchsubstitutionOperationOperator_$5_$2($$dpth + 1, $$cr), true)) !== null) {
                $$res = new substitutionOperationOperator_$5($scope$c1, $scope$c2, $scope$c3);
            }
            return $$res;
        });
    }
    matchsubstitutionOperationOperator_$5_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$5_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$5_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$5_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$5_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$5_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$5_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$5_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$5_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$5_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$5_$2($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$5_$2_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$5_$2_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$5_$2_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$5_$2_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$6($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\-)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchsubstitutionOperationOperator_$6_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\:)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchsubstitutionOperationOperator_$6_$1($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchsubstitutionOperationOperator_$6_$2($$dpth + 1, $$cr), true)) !== null) {
                $$res = new substitutionOperationOperator_$6($scope$c1, $scope$c2, $scope$c3);
            }
            return $$res;
        });
    }
    matchsubstitutionOperationOperator_$6_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$6_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$6_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$6_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$6_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$6_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$6_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$6_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$6_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$6_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$6_$2($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$6_$2_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$6_$2_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$6_$2_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$6_$2_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$7($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\*)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchsubstitutionOperationOperator_$7_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\:)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchsubstitutionOperationOperator_$7_$1($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchsubstitutionOperationOperator_$7_$2($$dpth + 1, $$cr), true)) !== null) {
                $$res = new substitutionOperationOperator_$7($scope$c1, $scope$c2, $scope$c3);
            }
            return $$res;
        });
    }
    matchsubstitutionOperationOperator_$7_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$7_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$7_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$7_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$7_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$7_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$7_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$7_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$7_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$7_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$7_$2($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$7_$2_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$7_$2_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$7_$2_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$7_$2_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$8($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\/)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchsubstitutionOperationOperator_$8_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\:)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchsubstitutionOperationOperator_$8_$1($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchsubstitutionOperationOperator_$8_$2($$dpth + 1, $$cr), true)) !== null) {
                $$res = new substitutionOperationOperator_$8($scope$c1, $scope$c2, $scope$c3);
            }
            return $$res;
        });
    }
    matchsubstitutionOperationOperator_$8_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$8_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$8_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$8_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$8_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$8_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$8_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$8_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$8_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$8_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$8_$2($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$8_$2_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$8_$2_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$8_$2_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$8_$2_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$9($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\%)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchsubstitutionOperationOperator_$9_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\:)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchsubstitutionOperationOperator_$9_$1($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchsubstitutionOperationOperator_$9_$2($$dpth + 1, $$cr), true)) !== null) {
                $$res = new substitutionOperationOperator_$9($scope$c1, $scope$c2, $scope$c3);
            }
            return $$res;
        });
    }
    matchsubstitutionOperationOperator_$9_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$9_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$9_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$9_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$9_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$9_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$9_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$9_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$9_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$9_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$9_$2($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$9_$2_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$9_$2_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$9_$2_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$9_$2_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$10($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\,)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchsubstitutionOperationOperator_$10_$0($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\=)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchsubstitutionOperationOperator_$10_$1($$dpth + 1, $$cr), true)) !== null) {
                $$res = new substitutionOperationOperator_$10($scope$c1, $scope$c2);
            }
            return $$res;
        });
    }
    matchsubstitutionOperationOperator_$10_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$10_$0_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$10_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$10_$0_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$10_$0_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$10_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchsubstitutionOperationOperator_$10_$1_1($$dpth + 1, $$cr),
            () => this.matchsubstitutionOperationOperator_$10_$1_2($$dpth + 1, $$cr),
        ]);
    }
    matchsubstitutionOperationOperator_$10_$1_1($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchsubstitutionOperationOperator_$10_$1_2($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchcommaOperation($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$head;
            let $scope$bodyRaw;
            let $$res = null;
            if (true
                && (($scope$head = this.matchexpr($$dpth + 1, $$cr)) || true)
                && ($scope$bodyRaw = this.loop(() => this.matchcommaOperation_$0($$dpth + 1, $$cr), false)) !== null) {
                $$res = new commaOperation($scope$head, $scope$bodyRaw);
            }
            return $$res;
        });
    }
    matchcommaOperation_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spacesLhs;
            let $scope$expr;
            let $scope$spacesRhs;
            let $$res = null;
            if (true
                && ($scope$spacesLhs = this.loop(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\,)`, $$dpth + 1, $$cr) !== null
                && (($scope$expr = this.matchexpr($$dpth + 1, $$cr)) || true)
                && ($scope$spacesRhs = this.loop(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = { kind: ASTKinds.commaOperation_$0, spacesLhs: $scope$spacesLhs, expr: $scope$expr, spacesRhs: $scope$spacesRhs };
            }
            return $$res;
        });
    }
    matcharrayCall($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$target;
            let $scope$spacesLhs;
            let $scope$call;
            let $scope$spacesRhs;
            let $$res = null;
            if (true
                && ($scope$target = this.matchexpr($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\[)`, $$dpth + 1, $$cr) !== null
                && ($scope$spacesLhs = this.loop(() => this.matcharrayCall_$0($$dpth + 1, $$cr), true)) !== null
                && (($scope$call = this.matchexpr($$dpth + 1, $$cr)) || true)
                && ($scope$spacesRhs = this.loop(() => this.matcharrayCall_$1($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\])`, $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.arrayCall, target: $scope$target, spacesLhs: $scope$spacesLhs, call: $scope$call, spacesRhs: $scope$spacesRhs };
            }
            return $$res;
        });
    }
    matcharrayCall_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matcharrayCall_$0_1($$dpth + 1, $$cr),
            () => this.matcharrayCall_$0_2($$dpth + 1, $$cr),
            () => this.matcharrayCall_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matcharrayCall_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matcharrayCall_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matcharrayCall_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matcharrayCall_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matcharrayCall_$1_1($$dpth + 1, $$cr),
            () => this.matcharrayCall_$1_2($$dpth + 1, $$cr),
            () => this.matcharrayCall_$1_3($$dpth + 1, $$cr),
        ]);
    }
    matcharrayCall_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matcharrayCall_$1_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matcharrayCall_$1_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchfunctionCall($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$target;
            let $scope$spacesLhs;
            let $scope$args;
            let $scope$spacesRhs;
            let $$res = null;
            if (true
                && ($scope$target = this.matchidentifer($$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\()`, $$dpth + 1, $$cr) !== null
                && ($scope$spacesLhs = this.loop(() => this.matchfunctionCall_$0($$dpth + 1, $$cr), true)) !== null
                && (($scope$args = this.matchexpr($$dpth + 1, $$cr)) || true)
                && ($scope$spacesRhs = this.loop(() => this.matchfunctionCall_$1($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\))`, $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.functionCall, target: $scope$target, spacesLhs: $scope$spacesLhs, args: $scope$args, spacesRhs: $scope$spacesRhs };
            }
            return $$res;
        });
    }
    matchfunctionCall_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchfunctionCall_$0_1($$dpth + 1, $$cr),
            () => this.matchfunctionCall_$0_2($$dpth + 1, $$cr),
            () => this.matchfunctionCall_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchfunctionCall_$0_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchfunctionCall_$0_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchfunctionCall_$0_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchfunctionCall_$1($$dpth, $$cr) {
        return this.choice([
            () => this.matchfunctionCall_$1_1($$dpth + 1, $$cr),
            () => this.matchfunctionCall_$1_2($$dpth + 1, $$cr),
            () => this.matchfunctionCall_$1_3($$dpth + 1, $$cr),
        ]);
    }
    matchfunctionCall_$1_1($$dpth, $$cr) {
        return this.matchspace($$dpth + 1, $$cr);
    }
    matchfunctionCall_$1_2($$dpth, $$cr) {
        return this.matchcommentLong($$dpth + 1, $$cr);
    }
    matchfunctionCall_$1_3($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchsigned($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$operator;
            let $scope$operand;
            let $$res = null;
            if (true
                && ($scope$operator = this.matchsigned_$0($$dpth + 1, $$cr)) !== null
                && ($scope$operand = this.matchexpr($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.signed, operator: $scope$operator, operand: $scope$operand };
            }
            return $$res;
        });
    }
    matchsigned_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchsigned_$0_1($$dpth + 1, $$cr),
            () => this.matchsigned_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchsigned_$0_1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:\+)`, $$dpth + 1, $$cr);
    }
    matchsigned_$0_2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:\-)`, $$dpth + 1, $$cr);
    }
    matchvariable($$dpth, $$cr) {
        return this.choice([
            () => this.matchvariable_1($$dpth + 1, $$cr),
            () => this.matchvariable_2($$dpth + 1, $$cr),
        ]);
    }
    matchvariable_1($$dpth, $$cr) {
        return this.matchidentifer($$dpth + 1, $$cr);
    }
    matchvariable_2($$dpth, $$cr) {
        return this.matchvariableLocal($$dpth + 1, $$cr);
    }
    matchidentifer($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$head;
            let $scope$bodyRaw;
            let $$res = null;
            if (true
                && ($scope$head = this.matchidentiferHeadCharacter($$dpth + 1, $$cr)) !== null
                && ($scope$bodyRaw = this.loop(() => this.matchidentiferBodySentence($$dpth + 1, $$cr), true)) !== null) {
                $$res = new identifer($scope$head, $scope$bodyRaw);
            }
            return $$res;
        });
    }
    matchvariableLocal($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$spaces;
            let $scope$head;
            let $scope$bodyRaw;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:_)`, $$dpth + 1, $$cr) !== null
                && ($scope$spaces = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && ($scope$head = this.matchidentiferHeadCharacter($$dpth + 1, $$cr)) !== null
                && ($scope$bodyRaw = this.loop(() => this.matchidentiferBodySentence($$dpth + 1, $$cr), true)) !== null) {
                $$res = new variableLocal($scope$spaces, $scope$head, $scope$bodyRaw);
            }
            return $$res;
        });
    }
    matchliteral($$dpth, $$cr) {
        return this.choice([
            () => this.matchliteral_1($$dpth + 1, $$cr),
            () => this.matchliteral_2($$dpth + 1, $$cr),
            () => this.matchliteral_3($$dpth + 1, $$cr),
            () => this.matchliteral_4($$dpth + 1, $$cr),
            () => this.matchliteral_5($$dpth + 1, $$cr),
            () => this.matchliteral_6($$dpth + 1, $$cr),
        ]);
    }
    matchliteral_1($$dpth, $$cr) {
        return this.matchheredoc($$dpth + 1, $$cr);
    }
    matchliteral_2($$dpth, $$cr) {
        return this.matchheredocRaw($$dpth + 1, $$cr);
    }
    matchliteral_3($$dpth, $$cr) {
        return this.matchliteralString($$dpth + 1, $$cr);
    }
    matchliteral_4($$dpth, $$cr) {
        return this.matchliteralStringRaw($$dpth + 1, $$cr);
    }
    matchliteral_5($$dpth, $$cr) {
        return this.matchreal($$dpth + 1, $$cr);
    }
    matchliteral_6($$dpth, $$cr) {
        return this.matchint($$dpth + 1, $$cr);
    }
    matchheredoc($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$bodyRaw;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:<<\")`, $$dpth + 1, $$cr) !== null
                && this.matchnewLine($$dpth + 1, $$cr) !== null
                && ($scope$bodyRaw = this.loop(() => this.matchheredocInner($$dpth + 1, $$cr), false)) !== null
                && this.regexAccept(String.raw `(?:\">>)`, $$dpth + 1, $$cr) !== null) {
                $$res = new heredoc($scope$bodyRaw);
            }
            return $$res;
        });
    }
    matchheredocInner($$dpth, $$cr) {
        return this.choice([
            () => this.matchheredocInner_1($$dpth + 1, $$cr),
            () => this.matchheredocInner_2($$dpth + 1, $$cr),
            () => this.matchheredocInner_3($$dpth + 1, $$cr),
        ]);
    }
    matchheredocInner_1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c;
            let $$res = null;
            if (true
                && ($scope$c = this.regexAccept(String.raw `(?:\"\">>)`, $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.heredocInner_1, c: $scope$c };
            }
            return $$res;
        });
    }
    matchheredocInner_2($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c;
            let $$res = null;
            if (true
                && ($scope$c = this.regexAccept(String.raw `(?:[\r\n])`, $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.heredocInner_2, c: $scope$c };
            }
            return $$res;
        });
    }
    matchheredocInner_3($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c;
            let $$res = null;
            if (true
                && this.negate(() => this.regexAccept(String.raw `(?:\">>)`, $$dpth + 1, $$cr)) !== null
                && ($scope$c = this.regexAccept(String.raw `(?:.)`, $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.heredocInner_3, c: $scope$c };
            }
            return $$res;
        });
    }
    matchheredocRaw($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$bodyRaw;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:<<\')`, $$dpth + 1, $$cr) !== null
                && this.matchnewLine($$dpth + 1, $$cr) !== null
                && ($scope$bodyRaw = this.loop(() => this.matchheredocRawInner($$dpth + 1, $$cr), false)) !== null
                && this.regexAccept(String.raw `(?:\'>>)`, $$dpth + 1, $$cr) !== null) {
                $$res = new heredocRaw($scope$bodyRaw);
            }
            return $$res;
        });
    }
    matchheredocRawInner($$dpth, $$cr) {
        return this.choice([
            () => this.matchheredocRawInner_1($$dpth + 1, $$cr),
            () => this.matchheredocRawInner_2($$dpth + 1, $$cr),
            () => this.matchheredocRawInner_3($$dpth + 1, $$cr),
        ]);
    }
    matchheredocRawInner_1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c;
            let $$res = null;
            if (true
                && ($scope$c = this.regexAccept(String.raw `(?:\'\'>>)`, $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.heredocRawInner_1, c: $scope$c };
            }
            return $$res;
        });
    }
    matchheredocRawInner_2($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c;
            let $$res = null;
            if (true
                && ($scope$c = this.regexAccept(String.raw `(?:[\r\n])`, $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.heredocRawInner_2, c: $scope$c };
            }
            return $$res;
        });
    }
    matchheredocRawInner_3($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c;
            let $$res = null;
            if (true
                && this.negate(() => this.regexAccept(String.raw `(?:\'>>)`, $$dpth + 1, $$cr)) !== null
                && ($scope$c = this.regexAccept(String.raw `(?:.)`, $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.heredocRawInner_3, c: $scope$c };
            }
            return $$res;
        });
    }
    matchliteralString($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$bodyRaw;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\")`, $$dpth + 1, $$cr) !== null
                && ($scope$bodyRaw = this.loop(() => this.matchliteralStringInner($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\")`, $$dpth + 1, $$cr) !== null) {
                $$res = new literalString($scope$bodyRaw);
            }
            return $$res;
        });
    }
    matchliteralStringInner($$dpth, $$cr) {
        return this.choice([
            () => this.matchliteralStringInner_1($$dpth + 1, $$cr),
            () => this.matchliteralStringInner_2($$dpth + 1, $$cr),
            () => this.matchliteralStringInner_3($$dpth + 1, $$cr),
            () => this.matchliteralStringInner_4($$dpth + 1, $$cr),
        ]);
    }
    matchliteralStringInner_1($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchliteralStringInner_2($$dpth, $$cr) {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    matchliteralStringInner_3($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:\"\")`, $$dpth + 1, $$cr);
    }
    matchliteralStringInner_4($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[^\r\n\"])`, $$dpth + 1, $$cr);
    }
    matchliteralStringRaw($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$bodyRaw;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\')`, $$dpth + 1, $$cr) !== null
                && ($scope$bodyRaw = this.loop(() => this.matchliteralStringRawInner($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\')`, $$dpth + 1, $$cr) !== null) {
                $$res = new literalStringRaw($scope$bodyRaw);
            }
            return $$res;
        });
    }
    matchliteralStringRawInner($$dpth, $$cr) {
        return this.choice([
            () => this.matchliteralStringRawInner_1($$dpth + 1, $$cr),
            () => this.matchliteralStringRawInner_2($$dpth + 1, $$cr),
            () => this.matchliteralStringRawInner_3($$dpth + 1, $$cr),
            () => this.matchliteralStringRawInner_4($$dpth + 1, $$cr),
        ]);
    }
    matchliteralStringRawInner_1($$dpth, $$cr) {
        return this.matchcontinueLine($$dpth + 1, $$cr);
    }
    matchliteralStringRawInner_2($$dpth, $$cr) {
        return this.matchnewLine($$dpth + 1, $$cr);
    }
    matchliteralStringRawInner_3($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:\'\')`, $$dpth + 1, $$cr);
    }
    matchliteralStringRawInner_4($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[^\r\n\'])`, $$dpth + 1, $$cr);
    }
    matchreal($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$sign;
            let $scope$head;
            let $scope$integerPart;
            let $scope$fractionalPart;
            let $$res = null;
            if (true
                && (($scope$sign = this.matchreal_$0($$dpth + 1, $$cr)) || true)
                && ($scope$head = this.regexAccept(String.raw `(?:[0-9])`, $$dpth + 1, $$cr)) !== null
                && ($scope$integerPart = this.loop(() => this.matchint_x10Inner($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:\.)`, $$dpth + 1, $$cr) !== null
                && ($scope$fractionalPart = this.loop(() => this.matchint_x10Inner($$dpth + 1, $$cr), false)) !== null) {
                $$res = new real($scope$sign, $scope$head, $scope$integerPart, $scope$fractionalPart);
            }
            return $$res;
        });
    }
    matchreal_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchreal_$0_1($$dpth + 1, $$cr),
            () => this.matchreal_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchreal_$0_1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:-)`, $$dpth + 1, $$cr);
    }
    matchreal_$0_2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:\+)`, $$dpth + 1, $$cr);
    }
    matchint($$dpth, $$cr) {
        return this.choice([
            () => this.matchint_1($$dpth + 1, $$cr),
            () => this.matchint_2($$dpth + 1, $$cr),
            () => this.matchint_3($$dpth + 1, $$cr),
        ]);
    }
    matchint_1($$dpth, $$cr) {
        return this.matchint_x2($$dpth + 1, $$cr);
    }
    matchint_2($$dpth, $$cr) {
        return this.matchint_x16($$dpth + 1, $$cr);
    }
    matchint_3($$dpth, $$cr) {
        return this.matchint_x10($$dpth + 1, $$cr);
    }
    matchint_x10($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$sign;
            let $scope$head;
            let $scope$bodyRaw;
            let $$res = null;
            if (true
                && (($scope$sign = this.matchint_x10_$0($$dpth + 1, $$cr)) || true)
                && ($scope$head = this.regexAccept(String.raw `(?:[0-9])`, $$dpth + 1, $$cr)) !== null
                && ($scope$bodyRaw = this.loop(() => this.matchint_x10Inner($$dpth + 1, $$cr), true)) !== null) {
                $$res = new int_x10($scope$sign, $scope$head, $scope$bodyRaw);
            }
            return $$res;
        });
    }
    matchint_x10_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchint_x10_$0_1($$dpth + 1, $$cr),
            () => this.matchint_x10_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchint_x10_$0_1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:-)`, $$dpth + 1, $$cr);
    }
    matchint_x10_$0_2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:\+)`, $$dpth + 1, $$cr);
    }
    matchint_x10Inner($$dpth, $$cr) {
        return this.choice([
            () => this.matchint_x10Inner_1($$dpth + 1, $$cr),
            () => this.matchint_x10Inner_2($$dpth + 1, $$cr),
        ]);
    }
    matchint_x10Inner_1($$dpth, $$cr) {
        return this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr);
    }
    matchint_x10Inner_2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9])`, $$dpth + 1, $$cr);
    }
    matchint_x2($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$head;
            let $scope$bodyRaw;
            let $$res = null;
            if (true
                && ($scope$head = this.regexAccept(String.raw `(?:0b)`, $$dpth + 1, $$cr)) !== null
                && ($scope$bodyRaw = this.loop(() => this.matchint_x2Inner($$dpth + 1, $$cr), false)) !== null) {
                $$res = new int_x2($scope$head, $scope$bodyRaw);
            }
            return $$res;
        });
    }
    matchint_x2Inner($$dpth, $$cr) {
        return this.choice([
            () => this.matchint_x2Inner_1($$dpth + 1, $$cr),
            () => this.matchint_x2Inner_2($$dpth + 1, $$cr),
        ]);
    }
    matchint_x2Inner_1($$dpth, $$cr) {
        return this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr);
    }
    matchint_x2Inner_2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[01])`, $$dpth + 1, $$cr);
    }
    matchint_x16($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$head;
            let $scope$bodyRaw;
            let $$res = null;
            if (true
                && ($scope$head = this.regexAccept(String.raw `(?:0x)`, $$dpth + 1, $$cr)) !== null
                && ($scope$bodyRaw = this.loop(() => this.matchint_x16Inner($$dpth + 1, $$cr), false)) !== null) {
                $$res = new int_x16($scope$head, $scope$bodyRaw);
            }
            return $$res;
        });
    }
    matchint_x16Inner($$dpth, $$cr) {
        return this.choice([
            () => this.matchint_x16Inner_1($$dpth + 1, $$cr),
            () => this.matchint_x16Inner_2($$dpth + 1, $$cr),
        ]);
    }
    matchint_x16Inner_1($$dpth, $$cr) {
        return this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr);
    }
    matchint_x16Inner_2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[0-9a-fA-F])`, $$dpth + 1, $$cr);
    }
    matchpreprocess($$dpth, $$cr) {
        return this.choice([
            () => this.matchpreprocess_1($$dpth + 1, $$cr),
            () => this.matchpreprocess_2($$dpth + 1, $$cr),
        ]);
    }
    matchpreprocess_1($$dpth, $$cr) {
        return this.matchpreprocessGlobalDefine($$dpth + 1, $$cr);
    }
    matchpreprocess_2($$dpth, $$cr) {
        return this.matchpreprocessDefine($$dpth + 1, $$cr);
    }
    matchpreprocessGlobalDefine($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$nameRaw;
            let $scope$spacesLhs;
            let $scope$beforeRaw;
            let $scope$spacesRhs;
            let $scope$afterRaw;
            let $scope$newLine;
            let $$res = null;
            if (true
                && ($scope$nameRaw = this.matchpreprocessGlobalDefineName($$dpth + 1, $$cr)) !== null
                && ($scope$spacesLhs = this.loop(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), false)) !== null
                && ($scope$beforeRaw = this.loop(() => this.matchpreprocessBeforeCharacterSentence($$dpth + 1, $$cr), false)) !== null
                && ($scope$spacesRhs = this.loop(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), false)) !== null
                && ($scope$afterRaw = this.loop(() => this.matchpreprocessAfterCharacterSentence($$dpth + 1, $$cr), false)) !== null
                && ($scope$newLine = this.matchnewLine($$dpth + 1, $$cr)) !== null) {
                $$res = new preprocessGlobalDefine($scope$nameRaw, $scope$spacesLhs, $scope$beforeRaw, $scope$spacesRhs, $scope$afterRaw, $scope$newLine);
            }
            return $$res;
        });
    }
    matchpreprocessGlobalDefineName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $scope$c6;
            let $scope$c7;
            let $scope$c8;
            let $scope$c9;
            let $scope$c10;
            let $scope$c11;
            let $scope$c12;
            let $scope$c13;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:#)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:g)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:o)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:b)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:a)`, $$dpth + 1, $$cr) !== null
                && ($scope$c6 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:l)`, $$dpth + 1, $$cr) !== null
                && ($scope$c7 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:d)`, $$dpth + 1, $$cr) !== null
                && ($scope$c8 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c9 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:f)`, $$dpth + 1, $$cr) !== null
                && ($scope$c10 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:i)`, $$dpth + 1, $$cr) !== null
                && ($scope$c11 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:n)`, $$dpth + 1, $$cr) !== null
                && ($scope$c12 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c13 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new preprocessGlobalDefineName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6, $scope$c7, $scope$c8, $scope$c9, $scope$c10, $scope$c11, $scope$c12, $scope$c13);
            }
            return $$res;
        });
    }
    matchpreprocessDefine($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$nameRaw;
            let $scope$spacesLhs;
            let $scope$beforeRaw;
            let $scope$spacesRhs;
            let $scope$afterRaw;
            let $scope$newLine;
            let $$res = null;
            if (true
                && ($scope$nameRaw = this.matchpreprocessDefineName($$dpth + 1, $$cr)) !== null
                && ($scope$spacesLhs = this.loop(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), false)) !== null
                && ($scope$beforeRaw = this.loop(() => this.matchpreprocessBeforeCharacterSentence($$dpth + 1, $$cr), false)) !== null
                && ($scope$spacesRhs = this.loop(() => this.matchspaceOrContinueLineOrCommentLong($$dpth + 1, $$cr), false)) !== null
                && ($scope$afterRaw = this.loop(() => this.matchpreprocessAfterCharacterSentence($$dpth + 1, $$cr), false)) !== null
                && ($scope$newLine = this.matchnewLine($$dpth + 1, $$cr)) !== null) {
                $$res = new preprocessDefine($scope$nameRaw, $scope$spacesLhs, $scope$beforeRaw, $scope$spacesRhs, $scope$afterRaw, $scope$newLine);
            }
            return $$res;
        });
    }
    matchpreprocessDefineName($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$c1;
            let $scope$c2;
            let $scope$c3;
            let $scope$c4;
            let $scope$c5;
            let $scope$c6;
            let $scope$c7;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:#)`, $$dpth + 1, $$cr) !== null
                && ($scope$c1 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:d)`, $$dpth + 1, $$cr) !== null
                && ($scope$c2 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c3 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:f)`, $$dpth + 1, $$cr) !== null
                && ($scope$c4 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:i)`, $$dpth + 1, $$cr) !== null
                && ($scope$c5 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:n)`, $$dpth + 1, $$cr) !== null
                && ($scope$c6 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null
                && this.regexAccept(String.raw `(?:e)`, $$dpth + 1, $$cr) !== null
                && ($scope$c7 = this.loop(() => this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr), true)) !== null) {
                $$res = new preprocessDefineName($scope$c1, $scope$c2, $scope$c3, $scope$c4, $scope$c5, $scope$c6, $scope$c7);
            }
            return $$res;
        });
    }
    matchmaybePreprocess($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$bodyRaw;
            let $$res = null;
            if (true
                && ($scope$bodyRaw = this.loop(() => this.matchpreprocessBeforeCharacterSentence($$dpth + 1, $$cr), false)) !== null) {
                $$res = new maybePreprocess($scope$bodyRaw);
            }
            return $$res;
        });
    }
    matchpreprocessBeforeCharacterSentence($$dpth, $$cr) {
        return this.choice([
            () => this.matchpreprocessBeforeCharacterSentence_1($$dpth + 1, $$cr),
            () => this.matchpreprocessBeforeCharacterSentence_2($$dpth + 1, $$cr),
        ]);
    }
    matchpreprocessBeforeCharacterSentence_1($$dpth, $$cr) {
        return this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr);
    }
    matchpreprocessBeforeCharacterSentence_2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[^ \t　!\'\"%&\(\)\*\+\,\-\/;<\=>/\[\]{\|}\r\n])`, $$dpth + 1, $$cr);
    }
    matchpreprocessAfterCharacterSentence($$dpth, $$cr) {
        return this.choice([
            () => this.matchpreprocessAfterCharacterSentence_1($$dpth + 1, $$cr),
            () => this.matchpreprocessAfterCharacterSentence_2($$dpth + 1, $$cr),
        ]);
    }
    matchpreprocessAfterCharacterSentence_1($$dpth, $$cr) {
        return this.matchcontinueLineOrCommentLong($$dpth + 1, $$cr);
    }
    matchpreprocessAfterCharacterSentence_2($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[^\r\n])`, $$dpth + 1, $$cr);
    }
    test() {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    parse() {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res)
            return { ast: res, errs: [] };
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchstart(0, rec);
        const err = rec.getErr();
        return { ast: res, errs: err !== null ? [err] : [] };
    }
    mark() {
        return this.pos;
    }
    loop(func, star = false) {
        const mrk = this.mark();
        const res = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    run($$dpth, fn) {
        const mrk = this.mark();
        const res = fn();
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    choice(fns) {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    regexAccept(match, dpth, cr) {
        return this.run(dpth, () => {
            const reg = new RegExp(match, "y");
            const mrk = this.mark();
            reg.lastIndex = mrk.overallPos;
            const res = this.tryConsume(reg);
            if (cr) {
                cr.record(mrk, res, {
                    kind: "RegexMatch",
                    // We substring from 3 to len - 1 to strip off the
                    // non-capture group syntax added as a WebKit workaround
                    literal: match.substring(3, match.length - 1),
                    negated: this.negating,
                });
            }
            return res;
        });
    }
    tryConsume(reg) {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    noConsume(fn) {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    negate(fn) {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    memoise(rule, memo) {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if (this.memoSafe && $scope$memoRes !== undefined) {
            this.reset($scope$memoRes[1]);
            return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if (this.memoSafe)
            memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    match$EOF(et) {
        const res = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if (et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
exports.Parser = Parser;
function parse(s) {
    const p = new Parser(s);
    return p.parse();
}
exports.parse = parse;
class SyntaxErr {
    constructor(pos, expmatches) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    toString() {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ' : ''}'${x.literal}'`)}`;
    }
}
exports.SyntaxErr = SyntaxErr;
class ErrorTracker {
    constructor() {
        this.mxpos = { overallPos: -1, line: -1, offset: -1 };
        this.regexset = new Set();
        this.pmatches = [];
    }
    record(pos, result, att) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear();
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if (att.kind === "RegexMatch") {
                if (!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            }
            else {
                this.pmatches.push(att);
            }
        }
    }
    getErr() {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}
